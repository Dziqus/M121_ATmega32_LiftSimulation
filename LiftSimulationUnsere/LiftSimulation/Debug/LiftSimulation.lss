
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000820  000008b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  0080007e  0080007e  000008d2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001858  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000967  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a06  00000000  00000000  00002c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000420  00000000  00000000  00003680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d77  00000000  00000000  00003aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f02  00000000  00000000  00004817  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005719  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  8a:	0c 94 0e 04 	jmp	0x81c	; 0x81c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
   RegisterTestHandler( TestFunction );
   InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	if ( data[0] == 1 )
  96:	fc 01       	movw	r30, r24
  98:	80 81       	ld	r24, Z
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	41 f4       	brne	.+16     	; 0xae <TestFunction+0x1c>
  9e:	c2 e7       	ldi	r28, 0x72	; 114
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello World\n";
		while ( *ch !=  0)
		{
			Usart_PutChar(*ch++);
  a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if ( data[0] == 1 )
	{
		char *ch = "Hello World\n";
		while ( *ch !=  0)
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <TestFunction+0x12>
		{
			Usart_PutChar(*ch++);
		}
		 
	}
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <main>:
void TestFunction(uint8_t* data, uint8_t nrOfBytes);

int main(void)
{
    /* Replace with your application code */
   InitializePorts();
  b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <InitializePorts>
   Usart_Init();
  b8:	0e 94 cc 00 	call	0x198	; 0x198 <Usart_Init>
   RegisterTestHandler( TestFunction );
  bc:	89 e4       	ldi	r24, 0x49	; 73
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 c7 00 	call	0x18e	; 0x18e <RegisterTestHandler>
   InitializeStart();
  c4:	0e 94 b3 02 	call	0x566	; 0x566 <InitializeStart>
}
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <EnterAtomic>:
  ce:	f8 94       	cli
  d0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <enterAtomicNesting>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <enterAtomicNesting>
  da:	08 95       	ret

000000dc <LeaveAtomic>:
  dc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <enterAtomicNesting>
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <enterAtomicNesting>
  e6:	81 11       	cpse	r24, r1
  e8:	01 c0       	rjmp	.+2      	; 0xec <LeaveAtomic+0x10>
  ea:	78 94       	sei
  ec:	08 95       	ret

000000ee <DispatchEvent>:
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	0e 94 67 00 	call	0xce	; 0xce <EnterAtomic>
  fa:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <msgQ_out>
  fe:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <msgQ_in>
 102:	98 17       	cp	r25, r24
 104:	59 f0       	breq	.+22     	; 0x11c <DispatchEvent+0x2e>
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	98 9f       	mul	r25, r24
 10a:	e0 01       	movw	r28, r0
 10c:	11 24       	eor	r1, r1
 10e:	c7 56       	subi	r28, 0x67	; 103
 110:	df 4f       	sbci	r29, 0xFF	; 255
 112:	9f 5f       	subi	r25, 0xFF	; 255
 114:	9f 71       	andi	r25, 0x1F	; 31
 116:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <msgQ_out>
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DispatchEvent+0x32>
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	0e 94 6e 00 	call	0xdc	; 0xdc <LeaveAtomic>
 124:	20 97       	sbiw	r28, 0x00	; 0
 126:	c9 f0       	breq	.+50     	; 0x15a <DispatchEvent+0x6c>
 128:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	00 36       	cpi	r16, 0x60	; 96
 134:	1f 07       	cpc	r17, r31
 136:	89 f0       	breq	.+34     	; 0x15a <DispatchEvent+0x6c>
 138:	d8 01       	movw	r26, r16
 13a:	12 96       	adiw	r26, 0x02	; 2
 13c:	9c 91       	ld	r25, X
 13e:	12 97       	sbiw	r26, 0x02	; 2
 140:	88 81       	ld	r24, Y
 142:	89 23       	and	r24, r25
 144:	31 f0       	breq	.+12     	; 0x152 <DispatchEvent+0x64>
 146:	13 96       	adiw	r26, 0x03	; 3
 148:	ed 91       	ld	r30, X+
 14a:	fc 91       	ld	r31, X
 14c:	14 97       	sbiw	r26, 0x04	; 4
 14e:	ce 01       	movw	r24, r28
 150:	09 95       	icall
 152:	f8 01       	movw	r30, r16
 154:	00 81       	ld	r16, Z
 156:	11 81       	ldd	r17, Z+1	; 0x01
 158:	eb cf       	rjmp	.-42     	; 0x130 <DispatchEvent+0x42>
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <InitializeCounter>:
 164:	12 be       	out	0x32, r1	; 50
 166:	8b e0       	ldi	r24, 0x0B	; 11
 168:	83 bf       	out	0x33, r24	; 51
 16a:	8d e7       	ldi	r24, 0x7D	; 125
 16c:	8c bf       	out	0x3c, r24	; 60
 16e:	89 b7       	in	r24, 0x39	; 57
 170:	82 60       	ori	r24, 0x02	; 2
 172:	89 bf       	out	0x39, r24	; 57
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9b bd       	out	0x2b, r25	; 43
 17a:	8a bd       	out	0x2a, r24	; 42
 17c:	1d bc       	out	0x2d, r1	; 45
 17e:	1c bc       	out	0x2c, r1	; 44
 180:	1f bc       	out	0x2f, r1	; 47
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	8e bd       	out	0x2e, r24	; 46
 186:	89 b7       	in	r24, 0x39	; 57
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	89 bf       	out	0x39, r24	; 57
 18c:	08 95       	ret

0000018e <RegisterTestHandler>:
 18e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_testHandler+0x1>
 192:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_testHandler>
 196:	08 95       	ret

00000198 <Usart_Init>:
 198:	10 bc       	out	0x20, r1	; 32
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	89 b9       	out	0x09, r24	; 9
 19e:	86 e8       	ldi	r24, 0x86	; 134
 1a0:	80 bd       	out	0x20, r24	; 32
 1a2:	88 e9       	ldi	r24, 0x98	; 152
 1a4:	8a b9       	out	0x0a, r24	; 10
 1a6:	78 94       	sei
 1a8:	08 95       	ret

000001aa <InitializePorts>:
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 bb       	out	0x17, r24	; 23
 1ae:	84 bb       	out	0x14, r24	; 20
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	11 ba       	out	0x11, r1	; 17
 1b4:	0e 94 cc 00 	call	0x198	; 0x198 <Usart_Init>
 1b8:	85 b7       	in	r24, 0x35	; 53
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	85 bf       	out	0x35, r24	; 53
 1be:	8b b7       	in	r24, 0x3b	; 59
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8b bf       	out	0x3b, r24	; 59
 1c4:	08 95       	ret

000001c6 <Usart_PutChar>:
 1c6:	8c b9       	out	0x0c, r24	; 12
 1c8:	5d 9b       	sbis	0x0b, 5	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <Usart_PutChar+0x2>
 1cc:	08 95       	ret

000001ce <SendEvent>:
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	c8 2f       	mov	r28, r24
 1d8:	06 2f       	mov	r16, r22
 1da:	d4 2f       	mov	r29, r20
 1dc:	12 2f       	mov	r17, r18
 1de:	0e 94 67 00 	call	0xce	; 0xce <EnterAtomic>
 1e2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <msgQ_in>
 1e6:	e8 2f       	mov	r30, r24
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	af 01       	movw	r20, r30
 1ec:	4f 5f       	subi	r20, 0xFF	; 255
 1ee:	5f 4f       	sbci	r21, 0xFF	; 255
 1f0:	4f 71       	andi	r20, 0x1F	; 31
 1f2:	55 27       	eor	r21, r21
 1f4:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <msgQ_out>
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	42 17       	cp	r20, r18
 1fc:	53 07       	cpc	r21, r19
 1fe:	71 f4       	brne	.+28     	; 0x21c <SendEvent+0x4e>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 212:	8e ed       	ldi	r24, 0xDE	; 222
 214:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 218:	8d ea       	ldi	r24, 0xAD	; 173
 21a:	f9 cf       	rjmp	.-14     	; 0x20e <SendEvent+0x40>
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	e7 56       	subi	r30, 0x67	; 103
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	01 83       	std	Z+1, r16	; 0x01
 22a:	13 83       	std	Z+3, r17	; 0x03
 22c:	d2 83       	std	Z+2, r29	; 0x02
 22e:	c0 83       	st	Z, r28
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	8f 71       	andi	r24, 0x1F	; 31
 234:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <msgQ_in>
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	0c 94 6e 00 	jmp	0xdc	; 0xdc <LeaveAtomic>

00000244 <MakeDoorStates>:
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ce e5       	ldi	r28, 0x5E	; 94
 254:	d1 e0       	ldi	r29, 0x01	; 1
 256:	00 e0       	ldi	r16, 0x00	; 0
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	ee 24       	eor	r14, r14
 25c:	e3 94       	inc	r14
 25e:	f1 2c       	mov	r15, r1
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	81 11       	cpse	r24, r1
 264:	24 c0       	rjmp	.+72     	; 0x2ae <MakeDoorStates+0x6a>
 266:	48 81       	ld	r20, Y
 268:	40 ff       	sbrs	r20, 0
 26a:	23 c0       	rjmp	.+70     	; 0x2b2 <MakeDoorStates+0x6e>
 26c:	4e 7f       	andi	r20, 0xFE	; 254
 26e:	48 83       	st	Y, r20
 270:	20 2f       	mov	r18, r16
 272:	65 ec       	ldi	r22, 0xC5	; 197
 274:	80 e1       	ldi	r24, 0x10	; 16
 276:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SendEvent>
 27a:	88 81       	ld	r24, Y
 27c:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <OpenDoors>
 280:	84 ff       	sbrs	r24, 4
 282:	0a c0       	rjmp	.+20     	; 0x298 <MakeDoorStates+0x54>
 284:	97 01       	movw	r18, r14
 286:	00 2e       	mov	r0, r16
 288:	01 c0       	rjmp	.+2      	; 0x28c <MakeDoorStates+0x48>
 28a:	22 0f       	add	r18, r18
 28c:	0a 94       	dec	r0
 28e:	ea f7       	brpl	.-6      	; 0x28a <MakeDoorStates+0x46>
 290:	24 2b       	or	r18, r20
 292:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <OpenDoors>
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <MakeDoorStates+0x6e>
 298:	c7 01       	movw	r24, r14
 29a:	00 2e       	mov	r0, r16
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <MakeDoorStates+0x5c>
 29e:	88 0f       	add	r24, r24
 2a0:	0a 94       	dec	r0
 2a2:	ea f7       	brpl	.-6      	; 0x29e <MakeDoorStates+0x5a>
 2a4:	80 95       	com	r24
 2a6:	84 23       	and	r24, r20
 2a8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <OpenDoors>
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <MakeDoorStates+0x6e>
 2ae:	81 50       	subi	r24, 0x01	; 1
 2b0:	89 83       	std	Y+1, r24	; 0x01
 2b2:	0f 5f       	subi	r16, 0xFF	; 255
 2b4:	1f 4f       	sbci	r17, 0xFF	; 255
 2b6:	22 96       	adiw	r28, 0x02	; 2
 2b8:	04 30       	cpi	r16, 0x04	; 4
 2ba:	11 05       	cpc	r17, r1
 2bc:	89 f6       	brne	.-94     	; 0x260 <MakeDoorStates+0x1c>
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	08 95       	ret

000002ce <ProcessMessage>:
 2ce:	db 01       	movw	r26, r22
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	b1 f5       	brne	.+108    	; 0x340 <ProcessMessage+0x72>
 2d4:	8c 91       	ld	r24, X
 2d6:	98 2f       	mov	r25, r24
 2d8:	90 72       	andi	r25, 0x20	; 32
 2da:	28 2f       	mov	r18, r24
 2dc:	20 76       	andi	r18, 0x60	; 96
 2de:	d9 f1       	breq	.+118    	; 0x356 <ProcessMessage+0x88>
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	38 2f       	mov	r19, r24
 2e4:	30 71       	andi	r19, 0x10	; 16
 2e6:	84 ff       	sbrs	r24, 4
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	99 23       	and	r25, r25
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <ProcessMessage+0x24>
 2ee:	94 e0       	ldi	r25, 0x04	; 4
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <ProcessMessage+0x26>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	8f 70       	andi	r24, 0x0F	; 15
 2f6:	89 0f       	add	r24, r25
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <ProcessMessage+0x34>
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <ProcessMessage+0x30>
 306:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 30a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 30e:	ba 01       	movw	r22, r20
 310:	60 95       	com	r22
 312:	70 95       	com	r23
 314:	86 23       	and	r24, r22
 316:	97 23       	and	r25, r23
 318:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 31c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 320:	33 23       	and	r19, r19
 322:	51 f0       	breq	.+20     	; 0x338 <ProcessMessage+0x6a>
 324:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 328:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 32c:	84 2b       	or	r24, r20
 32e:	95 2b       	or	r25, r21
 330:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 334:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 338:	67 ec       	ldi	r22, 0xC7	; 199
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <SendEvent>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	49 f4       	brne	.+18     	; 0x356 <ProcessMessage+0x88>
 344:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <_testHandler>
 348:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <_testHandler+0x1>
 34c:	30 97       	sbiw	r30, 0x00	; 0
 34e:	19 f0       	breq	.+6      	; 0x356 <ProcessMessage+0x88>
 350:	64 2f       	mov	r22, r20
 352:	cd 01       	movw	r24, r26
 354:	09 94       	ijmp
 356:	08 95       	ret

00000358 <HandleMessage>:
 358:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <msgType.1871>
 35c:	91 11       	cpse	r25, r1
 35e:	05 c0       	rjmp	.+10     	; 0x36a <HandleMessage+0x12>
 360:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <msgType.1871>
 364:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <msgLen.1872>
 368:	08 95       	ret
 36a:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <msgLen.1872>
 36e:	41 11       	cpse	r20, r1
 370:	04 c0       	rjmp	.+8      	; 0x37a <HandleMessage+0x22>
 372:	82 50       	subi	r24, 0x02	; 2
 374:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <msgLen.1872>
 378:	15 c0       	rjmp	.+42     	; 0x3a4 <HandleMessage+0x4c>
 37a:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <bufferIndex.1870>
 37e:	e4 17       	cp	r30, r20
 380:	98 f4       	brcc	.+38     	; 0x3a8 <HandleMessage+0x50>
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	2e 0f       	add	r18, r30
 386:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <bufferIndex.1870>
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ea 57       	subi	r30, 0x7A	; 122
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
 390:	80 83       	st	Z, r24
 392:	42 13       	cpse	r20, r18
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <HandleMessage+0x50>
 396:	66 e8       	ldi	r22, 0x86	; 134
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	89 2f       	mov	r24, r25
 39c:	0e 94 67 01 	call	0x2ce	; 0x2ce <ProcessMessage>
 3a0:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <msgType.1871>
 3a4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <bufferIndex.1870>
 3a8:	08 95       	ret

000003aa <SetInputOutput>:
 3aa:	cf 93       	push	r28
 3ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <outputRefreshCounter.1884>
 3b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <outputRefreshCounter.1884+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <outputRefreshCounter.1884+0x1>
 3ba:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <outputRefreshCounter.1884>
 3be:	83 70       	andi	r24, 0x03	; 3
 3c0:	99 27       	eor	r25, r25
 3c2:	89 2b       	or	r24, r25
 3c4:	21 f5       	brne	.+72     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3c6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <doorRefreshCounter.1885>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <doorRefreshCounter.1885>
 3d0:	83 70       	andi	r24, 0x03	; 3
 3d2:	a8 2f       	mov	r26, r24
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	aa 0f       	add	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	a2 5a       	subi	r26, 0xA2	; 162
 3dc:	be 4f       	sbci	r27, 0xFE	; 254
 3de:	11 96       	adiw	r26, 0x01	; 1
 3e0:	ec 91       	ld	r30, X
 3e2:	11 97       	sbiw	r26, 0x01	; 1
 3e4:	9c 91       	ld	r25, X
 3e6:	94 ff       	sbrs	r25, 4
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <SetInputOutput+0x46>
 3ea:	94 e0       	ldi	r25, 0x04	; 4
 3ec:	9e 1b       	sub	r25, r30
 3ee:	e9 2f       	mov	r30, r25
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	e4 59       	subi	r30, 0x94	; 148
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a9 01       	movw	r20, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	8a 95       	dec	r24
 404:	e2 f7       	brpl	.-8      	; 0x3fe <SetInputOutput+0x54>
 406:	ca 01       	movw	r24, r20
 408:	90 81       	ld	r25, Z
 40a:	89 2b       	or	r24, r25
 40c:	85 bb       	out	0x15, r24	; 21
 40e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <buttonRefreshCounter.1886>
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <buttonRefreshCounter.1886>
 418:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <displayCache>
 41c:	22 23       	and	r18, r18
 41e:	01 f1       	breq	.+64     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 420:	83 70       	andi	r24, 0x03	; 3
 422:	62 2f       	mov	r22, r18
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	40 e1       	ldi	r20, 0x10	; 16
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	08 2e       	mov	r0, r24
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	44 0f       	add	r20, r20
 430:	55 1f       	adc	r21, r21
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	46 23       	and	r20, r22
 438:	57 23       	and	r21, r23
 43a:	45 2b       	or	r20, r21
 43c:	11 f0       	breq	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <buttonLiftLed>
 442:	08 2e       	mov	r0, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	75 95       	asr	r23
 448:	67 95       	ror	r22
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	60 fd       	sbrc	r22, 0
 450:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <buttonFloorLed>
 454:	82 2f       	mov	r24, r18
 456:	80 7f       	andi	r24, 0xF0	; 240
 458:	19 f0       	breq	.+6      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <buttonLiftLed_on>
 45e:	01 c0       	rjmp	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	2f 70       	andi	r18, 0x0F	; 15
 464:	19 f0       	breq	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 466:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <buttonFloorLed_On>
 46a:	01 c0       	rjmp	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <liftPosDisplay_On>
 472:	81 11       	cpse	r24, r1
 474:	04 c0       	rjmp	.+8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 476:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Elevator>
 47a:	3f 73       	andi	r19, 0x3F	; 63
 47c:	01 c0       	rjmp	.+2      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47e:	3f e3       	ldi	r19, 0x3F	; 63
 480:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftDisplay7Seg_On>
 484:	81 11       	cpse	r24, r1
 486:	03 c0       	rjmp	.+6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 488:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <liftDisplay7Seg>
 48c:	01 c0       	rjmp	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48e:	87 e0       	ldi	r24, 0x07	; 7
 490:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <floorDisplayPort>
 494:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <doorframe>
 498:	60 e4       	ldi	r22, 0x40	; 64
 49a:	86 9f       	mul	r24, r22
 49c:	a0 01       	movw	r20, r0
 49e:	11 24       	eor	r1, r1
 4a0:	60 e8       	ldi	r22, 0x80	; 128
 4a2:	96 9f       	mul	r25, r22
 4a4:	c0 01       	movw	r24, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	84 2b       	or	r24, r20
 4aa:	83 2b       	or	r24, r19
 4ac:	88 bb       	out	0x18, r24	; 24
 4ae:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <buttonLiftLed>
 4b2:	98 e0       	ldi	r25, 0x08	; 8
 4b4:	89 9f       	mul	r24, r25
 4b6:	a0 01       	movw	r20, r0
 4b8:	11 24       	eor	r1, r1
 4ba:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <buttonFloorLed>
 4be:	30 e2       	ldi	r19, 0x20	; 32
 4c0:	93 9f       	mul	r25, r19
 4c2:	c0 01       	movw	r24, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	84 2b       	or	r24, r20
 4c8:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <floorDisplayPort>
 4cc:	38 2b       	or	r19, r24
 4ce:	40 e8       	ldi	r20, 0x80	; 128
 4d0:	24 9f       	mul	r18, r20
 4d2:	c0 01       	movw	r24, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	83 2b       	or	r24, r19
 4d8:	8b bb       	out	0x1b, r24	; 27
 4da:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <USART_rxBufferOut>
 4de:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 4e2:	98 17       	cp	r25, r24
 4e4:	b9 f0       	breq	.+46     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 4e6:	0e 94 67 00 	call	0xce	; 0xce <EnterAtomic>
 4ea:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <USART_rxBufferOut>
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	8e 0f       	add	r24, r30
 4f2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USART_rxBufferOut>
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	e2 5c       	subi	r30, 0xC2	; 194
 4fa:	fe 4f       	sbci	r31, 0xFE	; 254
 4fc:	c0 81       	ld	r28, Z
 4fe:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USART_rxBufferOut>
 502:	8f 71       	andi	r24, 0x1F	; 31
 504:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USART_rxBufferOut>
 508:	0e 94 6e 00 	call	0xdc	; 0xdc <LeaveAtomic>
 50c:	8c 2f       	mov	r24, r28
 50e:	0e 94 ac 01 	call	0x358	; 0x358 <HandleMessage>
 512:	e3 cf       	rjmp	.-58     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 514:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <terminalRefreshCounter.1887>
 518:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <terminalRefreshCounter.1887+0x1>
 51c:	9c 01       	movw	r18, r24
 51e:	2f 5f       	subi	r18, 0xFF	; 255
 520:	3f 4f       	sbci	r19, 0xFF	; 255
 522:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <terminalRefreshCounter.1887+0x1>
 526:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <terminalRefreshCounter.1887>
 52a:	8f 3f       	cpi	r24, 0xFF	; 255
 52c:	9f 40       	sbci	r25, 0x0F	; 15
 52e:	c9 f4       	brne	.+50     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 530:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <EnableStatusUpdate>
 534:	88 23       	and	r24, r24
 536:	a9 f0       	breq	.+42     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 53e:	86 e0       	ldi	r24, 0x06	; 6
 540:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 544:	85 ea       	ldi	r24, 0xA5	; 165
 546:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 54a:	8a e5       	ldi	r24, 0x5A	; 90
 54c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 550:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <SystemState>
 554:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 558:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <OpenDoors>
 55c:	cf 91       	pop	r28
 55e:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <Usart_PutChar>
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <InitializeStart>:
 566:	8a ec       	ldi	r24, 0xCA	; 202
 568:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 56c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <liftPosDisplay_On>
 570:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <buttonLiftLed_on>
 574:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftDisplay7Seg_On>
 578:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <buttonFloorLed_On>
 57c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <doorframe>
 580:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <liftDoorState+0x1>
 584:	80 e2       	ldi	r24, 0x20	; 32
 586:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <liftDoorState>
 58a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <liftDoorState+0x3>
 58e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <liftDoorState+0x2>
 592:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <liftDoorState+0x5>
 596:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <liftDoorState+0x4>
 59a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <liftDoorState+0x7>
 59e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <liftDoorState+0x6>
 5a2:	8f e1       	ldi	r24, 0x1F	; 31
 5a4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Elevator>
 5a8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Elevator+0x1>
 5ac:	0e 94 b2 00 	call	0x164	; 0x164 <InitializeCounter>
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	61 ec       	ldi	r22, 0xC1	; 193
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SendEvent>
 5bc:	8e ef       	ldi	r24, 0xFE	; 254
 5be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Usart_PutChar>
 5c2:	0e 94 77 00 	call	0xee	; 0xee <DispatchEvent>
 5c6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SetInputOutput>
 5ca:	fb cf       	rjmp	.-10     	; 0x5c2 <InitializeStart+0x5c>

000005cc <__vector_1>:
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
 5ee:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 5f2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 5f6:	91 60       	ori	r25, 0x01	; 1
 5f8:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 5fc:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 600:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <ButtonState>
 604:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <ButtonState+0x1>
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	69 ec       	ldi	r22, 0xC9	; 201
 60c:	80 e1       	ldi	r24, 0x10	; 16
 60e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SendEvent>
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_13>:
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	ef 93       	push	r30
 648:	ff 93       	push	r31
 64a:	5f 9b       	sbis	0x0b, 7	; 11
 64c:	1e c0       	rjmp	.+60     	; 0x68a <__vector_13+0x56>
 64e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 652:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <USART_rxBufferOut>
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	8f 71       	andi	r24, 0x1F	; 31
 65c:	99 27       	eor	r25, r25
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	82 17       	cp	r24, r18
 662:	93 07       	cpc	r25, r19
 664:	89 f0       	breq	.+34     	; 0x688 <__vector_13+0x54>
 666:	8c b1       	in	r24, 0x0c	; 12
 668:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <USART_rxBufferIn>
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	9e 0f       	add	r25, r30
 670:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <USART_rxBufferIn>
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	e2 5c       	subi	r30, 0xC2	; 194
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	80 83       	st	Z, r24
 67c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 680:	8f 71       	andi	r24, 0x1F	; 31
 682:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USART_rxBufferIn>
 686:	e1 cf       	rjmp	.-62     	; 0x64a <__vector_13+0x16>
 688:	57 98       	cbi	0x0a, 7	; 10
 68a:	ff 91       	pop	r31
 68c:	ef 91       	pop	r30
 68e:	9f 91       	pop	r25
 690:	8f 91       	pop	r24
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <__vector_7>:
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	4f 93       	push	r20
 6b0:	5f 93       	push	r21
 6b2:	6f 93       	push	r22
 6b4:	7f 93       	push	r23
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
 6c2:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ElevatorTick.1962>
 6c6:	8f 5f       	subi	r24, 0xFF	; 255
 6c8:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ElevatorTick.1962>
 6cc:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__data_end>
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__data_end>
 6d6:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Elevator+0x2>
 6da:	0e 94 02 04 	call	0x804	; 0x804 <__udivmodqi4>
 6de:	91 11       	cpse	r25, r1
 6e0:	14 c0       	rjmp	.+40     	; 0x70a <__vector_7+0x6a>
 6e2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Elevator>
 6e6:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Elevator+0x1>
 6ea:	96 17       	cp	r25, r22
 6ec:	61 f0       	breq	.+24     	; 0x706 <__vector_7+0x66>
 6ee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Elevator+0x4>
 6f2:	89 0f       	add	r24, r25
 6f4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Elevator>
 6f8:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Elevator+0x5>
 6fc:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Elevator+0x6>
 700:	30 97       	sbiw	r30, 0x00	; 0
 702:	09 f0       	breq	.+2      	; 0x706 <__vector_7+0x66>
 704:	09 95       	icall
 706:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <ElevatorTick.1962>
 70a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 70e:	6c e0       	ldi	r22, 0x0C	; 12
 710:	0e 94 02 04 	call	0x804	; 0x804 <__udivmodqi4>
 714:	91 11       	cpse	r25, r1
 716:	04 c0       	rjmp	.+8      	; 0x720 <__vector_7+0x80>
 718:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
 71c:	0e 94 22 01 	call	0x244	; 0x244 <MakeDoorStates>
 720:	ff 91       	pop	r31
 722:	ef 91       	pop	r30
 724:	bf 91       	pop	r27
 726:	af 91       	pop	r26
 728:	9f 91       	pop	r25
 72a:	8f 91       	pop	r24
 72c:	7f 91       	pop	r23
 72e:	6f 91       	pop	r22
 730:	5f 91       	pop	r21
 732:	4f 91       	pop	r20
 734:	3f 91       	pop	r19
 736:	2f 91       	pop	r18
 738:	0f 90       	pop	r0
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <__vector_10>:
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	cf 92       	push	r12
 74e:	df 92       	push	r13
 750:	ff 92       	push	r15
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	ef 93       	push	r30
 770:	ff 93       	push	r31
 772:	0b e2       	ldi	r16, 0x2B	; 43
 774:	11 e0       	ldi	r17, 0x01	; 1
 776:	c0 e0       	ldi	r28, 0x00	; 0
 778:	d0 e0       	ldi	r29, 0x00	; 0
 77a:	cc 24       	eor	r12, r12
 77c:	c3 94       	inc	r12
 77e:	d1 2c       	mov	r13, r1
 780:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <UsedTimers>
 784:	8f 2d       	mov	r24, r15
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0c 2e       	mov	r0, r28
 78a:	02 c0       	rjmp	.+4      	; 0x790 <__vector_10+0x4e>
 78c:	95 95       	asr	r25
 78e:	87 95       	ror	r24
 790:	0a 94       	dec	r0
 792:	e2 f7       	brpl	.-8      	; 0x78c <__vector_10+0x4a>
 794:	80 ff       	sbrs	r24, 0
 796:	18 c0       	rjmp	.+48     	; 0x7c8 <__vector_10+0x86>
 798:	f8 01       	movw	r30, r16
 79a:	80 81       	ld	r24, Z
 79c:	91 81       	ldd	r25, Z+1	; 0x01
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	91 83       	std	Z+1, r25	; 0x01
 7a2:	80 83       	st	Z, r24
 7a4:	89 2b       	or	r24, r25
 7a6:	81 f4       	brne	.+32     	; 0x7c8 <__vector_10+0x86>
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	68 ec       	ldi	r22, 0xC8	; 200
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SendEvent>
 7b4:	c6 01       	movw	r24, r12
 7b6:	0c 2e       	mov	r0, r28
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <__vector_10+0x7a>
 7ba:	88 0f       	add	r24, r24
 7bc:	0a 94       	dec	r0
 7be:	ea f7       	brpl	.-6      	; 0x7ba <__vector_10+0x78>
 7c0:	80 95       	com	r24
 7c2:	f8 22       	and	r15, r24
 7c4:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <UsedTimers>
 7c8:	21 96       	adiw	r28, 0x01	; 1
 7ca:	0e 5f       	subi	r16, 0xFE	; 254
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	c8 30       	cpi	r28, 0x08	; 8
 7d0:	d1 05       	cpc	r29, r1
 7d2:	b1 f6       	brne	.-84     	; 0x780 <__vector_10+0x3e>
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	bf 91       	pop	r27
 7de:	af 91       	pop	r26
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	7f 91       	pop	r23
 7e6:	6f 91       	pop	r22
 7e8:	5f 91       	pop	r21
 7ea:	4f 91       	pop	r20
 7ec:	3f 91       	pop	r19
 7ee:	2f 91       	pop	r18
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	df 90       	pop	r13
 7f8:	cf 90       	pop	r12
 7fa:	0f 90       	pop	r0
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	0f 90       	pop	r0
 800:	1f 90       	pop	r1
 802:	18 95       	reti

00000804 <__udivmodqi4>:
 804:	99 1b       	sub	r25, r25
 806:	79 e0       	ldi	r23, 0x09	; 9
 808:	04 c0       	rjmp	.+8      	; 0x812 <__udivmodqi4_ep>

0000080a <__udivmodqi4_loop>:
 80a:	99 1f       	adc	r25, r25
 80c:	96 17       	cp	r25, r22
 80e:	08 f0       	brcs	.+2      	; 0x812 <__udivmodqi4_ep>
 810:	96 1b       	sub	r25, r22

00000812 <__udivmodqi4_ep>:
 812:	88 1f       	adc	r24, r24
 814:	7a 95       	dec	r23
 816:	c9 f7       	brne	.-14     	; 0x80a <__udivmodqi4_loop>
 818:	80 95       	com	r24
 81a:	08 95       	ret

0000081c <_exit>:
 81c:	f8 94       	cli

0000081e <__stop_program>:
 81e:	ff cf       	rjmp	.-2      	; 0x81e <__stop_program>
