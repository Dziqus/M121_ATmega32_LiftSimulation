
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000bda  00000c6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800094  00800094  00000ca2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000274b  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e00  00000000  00000000  0000368b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f31  00000000  00000000  0000448b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ac  00000000  00000000  000053bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a2  00000000  00000000  00005968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014c2  00000000  00000000  00006a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007ecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8c 04 	jmp	0x918	; 0x918 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c0 04 	jmp	0x980	; 0x980 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	fc 01       	movw	r30, r24
  98:	90 81       	ld	r25, Z
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	49 f4       	brne	.+18     	; 0xb0 <TestFunction+0x1e>
  9e:	c8 e8       	ldi	r28, 0x88	; 136
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	88 e4       	ldi	r24, 0x48	; 72
  a4:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <TestFunction+0x12>
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <TestFunction+0x2e>
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	31 f4       	brne	.+12     	; 0xc0 <TestFunction+0x2e>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	41 81       	ldd	r20, Z+1	; 0x01
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <main>:
  c6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <InitializePorts>
  ca:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Usart_Init>
  ce:	89 e4       	ldi	r24, 0x49	; 73
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 6d 02 	call	0x4da	; 0x4da <RegisterTestHandler>
  d6:	8f e6       	ldi	r24, 0x6F	; 111
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 c8 01 	call	0x390	; 0x390 <RegisterFsm>
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 c8 01 	call	0x390	; 0x390 <RegisterFsm>
  e6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <InitializeStart>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

000000f0 <MainCtrl_Initializing>:
		*floor = _mainCtrl.ElevatorNextPosQ[_mainCtrl.qOut];
		_mainCtrl.qOut = (_mainCtrl.qOut + 1)%countof(_mainCtrl.ElevatorNextPosQ);
		return true;
	}
	return false;
}
  f0:	fc 01       	movw	r30, r24
  f2:	81 81       	ldd	r24, Z+1	; 0x01
  f4:	82 3c       	cpi	r24, 0xC2	; 194
  f6:	19 f4       	brne	.+6      	; 0xfe <MainCtrl_Initializing+0xe>
  f8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
  fc:	08 95       	ret
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	8d 58       	subi	r24, 0x8D	; 141
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	49 f4       	brne	.+18     	; 0x118 <MainCtrl_Initializing+0x28>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <EnableStatusUpdate>
 10c:	68 eb       	ldi	r22, 0xB8	; 184
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e6       	ldi	r24, 0x60	; 96
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 b8 01 	call	0x370	; 0x370 <SetState>
 118:	08 95       	ret

0000011a <Message_ElevatorReady>:
 11a:	64 e9       	ldi	r22, 0x94	; 148
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 b8 01 	call	0x370	; 0x370 <SetState>
 126:	08 95       	ret

00000128 <MainCtrl_AwaitTargetSelection>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 134:	4a 81       	ldd	r20, Y+2	; 0x02
 136:	42 95       	swap	r20
 138:	4f 70       	andi	r20, 0x0F	; 15
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <FindBit>:

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
 14a:	88 23       	and	r24, r24
 14c:	49 f0       	breq	.+18     	; 0x160 <FindBit+0x16>
	uint8_t pos = 0;
	while(!(value&1))
 14e:	80 fd       	sbrc	r24, 0
 150:	09 c0       	rjmp	.+18     	; 0x164 <FindBit+0x1a>
 152:	90 e0       	ldi	r25, 0x00	; 0
	{
		value >>=1;
 154:	86 95       	lsr	r24
		pos++;
 156:	9f 5f       	subi	r25, 0xFF	; 255

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
	uint8_t pos = 0;
	while(!(value&1))
 158:	80 ff       	sbrs	r24, 0
 15a:	fc cf       	rjmp	.-8      	; 0x154 <FindBit+0xa>
	{
		value >>=1;
		pos++;
 15c:	89 2f       	mov	r24, r25
 15e:	08 95       	ret
	return false;
}

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	08 95       	ret
	uint8_t pos = 0;
	while(!(value&1))
 164:	80 e0       	ldi	r24, 0x00	; 0
	{
		value >>=1;
		pos++;
	}
	return pos;
}
 166:	08 95       	ret

00000168 <GetFloorReservation>:



FloorType GetFloorReservation(uint8_t buttonEventParameter )
{
	return FindBit(buttonEventParameter) - 4;
 168:	0e 94 a5 00 	call	0x14a	; 0x14a <FindBit>
}
 16c:	84 50       	subi	r24, 0x04	; 4
 16e:	08 95       	ret

00000170 <MainCtrl_AwaitElevatorRequest>:
	SetState(&_mainCtrl.fsm, MainCtrl_AwaitTargetSelection);
		
}

void MainCtrl_AwaitElevatorRequest(Message* msg)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	//Usart_PutChar(0xA0); //this is called when moving
	//Usart_PutChar(msg->Id);

	if( IS_BUTTON_PRESS( msg ) )
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	87 3c       	cpi	r24, 0xC7	; 199
 17a:	01 f5       	brne	.+64     	; 0x1bc <MainCtrl_AwaitElevatorRequest+0x4c>
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	b1 f5       	brne	.+108    	; 0x1ee <MainCtrl_AwaitElevatorRequest+0x7e>
	{
		if( IS_RESERVATION(msg->MsgParamLow))
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	98 2f       	mov	r25, r24
 186:	90 7f       	andi	r25, 0xF0	; 240
 188:	91 f1       	breq	.+100    	; 0x1ee <MainCtrl_AwaitElevatorRequest+0x7e>
		{
			FloorType reservation = GetFloorReservation(msg->MsgParamLow);
 18a:	0e 94 b4 00 	call	0x168	; 0x168 <GetFloorReservation>
			if( reservation != _mainCtrl.currentFloor )
 18e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 192:	89 17       	cp	r24, r25
 194:	49 f0       	breq	.+18     	; 0x1a8 <MainCtrl_AwaitElevatorRequest+0x38>
			{			
				_mainCtrl.nextFloor = reservation;
 196:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
				SendEvent(SignalSourceApp, Message_MoveTo, _mainCtrl.nextFloor, 0);
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	48 2f       	mov	r20, r24
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 1a6:	0a c0       	rjmp	.+20     	; 0x1bc <MainCtrl_AwaitElevatorRequest+0x4c>
			}
			else if( reservation == _mainCtrl.currentFloor)
			{
				SetDoorState(DoorOpen, _mainCtrl.currentFloor);
 1a8:	68 2f       	mov	r22, r24
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	0e 94 35 02 	call	0x46a	; 0x46a <SetDoorState>
				_mainCtrl.timer = StartTimer(5000);
 1b0:	88 e8       	ldi	r24, 0x88	; 136
 1b2:	93 e1       	ldi	r25, 0x13	; 19
 1b4:	0e 94 47 05 	call	0xa8e	; 0xa8e <StartTimer>
 1b8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			}
		}
	}
	if( msg->Id == TimerEvent )
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	88 3c       	cpi	r24, 0xC8	; 200
 1c0:	29 f4       	brne	.+10     	; 0x1cc <MainCtrl_AwaitElevatorRequest+0x5c>
	{
		//Usart_PutChar(0xA1);
		//Usart_PutChar(_mainCtrl.currentFloor);
		SetDoorState(DoorClosed, _mainCtrl.currentFloor);
 1c2:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	0e 94 35 02 	call	0x46a	; 0x46a <SetDoorState>
	}
	
	if( msg->Id == Message_PosChanged)
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	71 f4       	brne	.+28     	; 0x1ee <MainCtrl_AwaitElevatorRequest+0x7e>
	{
		if( msg->MsgParamHigh == msg->MsgParamLow)
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	89 13       	cpse	r24, r25
 1d8:	0a c0       	rjmp	.+20     	; 0x1ee <MainCtrl_AwaitElevatorRequest+0x7e>
		{
			_mainCtrl.currentFloor = msg->MsgParamHigh/POS_STEPS_PER_FLOOR;
 1da:	c0 e6       	ldi	r28, 0x60	; 96
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	82 95       	swap	r24
 1e0:	8f 70       	andi	r24, 0x0F	; 15
 1e2:	8d 83       	std	Y+5, r24	; 0x05
			_mainCtrl.timer = StartTimer(5000);
 1e4:	88 e8       	ldi	r24, 0x88	; 136
 1e6:	93 e1       	ldi	r25, 0x13	; 19
 1e8:	0e 94 47 05 	call	0xa8e	; 0xa8e <StartTimer>
 1ec:	8f 83       	std	Y+7, r24	; 0x07
		}
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	d8 2f       	mov	r29, r24
 1fc:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/16;
 1fe:	c8 2f       	mov	r28, r24
 200:	c2 95       	swap	r28
 202:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
 20a:	8d 2f       	mov	r24, r29
 20c:	6c 2f       	mov	r22, r28
 20e:	0e 94 df 05 	call	0xbbe	; 0xbbe <__udivmodqi4>
 212:	91 11       	cpse	r25, r1
 214:	08 c0       	rjmp	.+16     	; 0x226 <NotifyCalibrationDone+0x32>
 216:	c1 11       	cpse	r28, r1
 218:	06 c0       	rjmp	.+12     	; 0x226 <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 21a:	21 2f       	mov	r18, r17
 21c:	4d 2f       	mov	r20, r29
 21e:	62 ec       	ldi	r22, 0xC2	; 194
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	08 95       	ret

0000022e <OnElevatorPositionChanged>:
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 22e:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 230:	48 2f       	mov	r20, r24
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 23a:	08 95       	ret

0000023c <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 23c:	fc 01       	movw	r30, r24
 23e:	81 81       	ldd	r24, Z+1	; 0x01
 240:	81 3c       	cpi	r24, 0xC1	; 193
 242:	29 f4       	brne	.+10     	; 0x24e <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 244:	8a ef       	ldi	r24, 0xFA	; 250
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 66 02 	call	0x4cc	; 0x4cc <CalibrateElevatorPosition>
		return;
 24c:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 24e:	82 3c       	cpi	r24, 0xC2	; 194
 250:	81 f4       	brne	.+32     	; 0x272 <MotorCtrl_Initializing+0x36>
	{
		SetDisplay(Floor0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 258:	6a e3       	ldi	r22, 0x3A	; 58
 25a:	71 e0       	ldi	r23, 0x01	; 1
 25c:	8f e6       	ldi	r24, 0x6F	; 111
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 b8 01 	call	0x370	; 0x370 <SetState>
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	6d e8       	ldi	r22, 0x8D	; 141
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 272:	08 95       	ret

00000274 <MotorCtrl_Stopped>:
}


void MotorCtrl_Stopped(Message* msg)
{
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 274:	fc 01       	movw	r30, r24
 276:	21 81       	ldd	r18, Z+1	; 0x01
 278:	21 30       	cpi	r18, 0x01	; 1
 27a:	81 f4       	brne	.+32     	; 0x29c <MotorCtrl_Stopped+0x28>
 27c:	82 81       	ldd	r24, Z+2	; 0x02
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	68 f4       	brcc	.+26     	; 0x29c <MotorCtrl_Stopped+0x28>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 282:	ef e6       	ldi	r30, 0x6F	; 111
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	86 83       	std	Z+6, r24	; 0x06
		SetDoorState(DoorClosed, _motorCtrl.start);
 288:	65 81       	ldd	r22, Z+5	; 0x05
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	0e 94 35 02 	call	0x46a	; 0x46a <SetDoorState>
		SetState(&_motorCtrl.fsm, Await_DoorClosed);
 290:	63 e9       	ldi	r22, 0x93	; 147
 292:	71 e0       	ldi	r23, 0x01	; 1
 294:	8f e6       	ldi	r24, 0x6F	; 111
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 b8 01 	call	0x370	; 0x370 <SetState>
 29c:	08 95       	ret

0000029e <MotorCtrl_Moving>:
	
}


void MotorCtrl_Moving(Message* msg)
{
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	ec 01       	movw	r28, r24
	SetDisplay((FloorType)msg->MsgParamLow / POS_STEPS_PER_FLOOR);
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	82 95       	swap	r24
 2ac:	8f 70       	andi	r24, 0x0F	; 15
 2ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SetDisplay>
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	c1 f4       	brne	.+48     	; 0x2e8 <MotorCtrl_Moving+0x4a>
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	9b 81       	ldd	r25, Y+3	; 0x03
 2bc:	89 13       	cpse	r24, r25
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <MotorCtrl_Moving+0x4a>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow / POS_STEPS_PER_FLOOR;
 2c0:	0f e6       	ldi	r16, 0x6F	; 111
 2c2:	10 e0       	ldi	r17, 0x00	; 0
 2c4:	82 95       	swap	r24
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	f8 01       	movw	r30, r16
 2ca:	86 83       	std	Z+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, Await_DoorOpen);
 2cc:	69 e7       	ldi	r22, 0x79	; 121
 2ce:	71 e0       	ldi	r23, 0x01	; 1
 2d0:	c8 01       	movw	r24, r16
 2d2:	0e 94 b8 01 	call	0x370	; 0x370 <SetState>
		_motorCtrl.start = msg->MsgParamLow / POS_STEPS_PER_FLOOR;
 2d6:	8a 81       	ldd	r24, Y+2	; 0x02
 2d8:	82 95       	swap	r24
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	f8 01       	movw	r30, r16
 2de:	85 83       	std	Z+5, r24	; 0x05
		SetDoorState(DoorOpen, _motorCtrl.target);
 2e0:	66 81       	ldd	r22, Z+6	; 0x06
 2e2:	80 e1       	ldi	r24, 0x10	; 16
 2e4:	0e 94 35 02 	call	0x46a	; 0x46a <SetDoorState>
		
	}	
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <Await_DoorOpen>:

void Await_DoorOpen(Message* msg)
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
	if(msg->Id == LiftDoorEvent && msg->MsgParamLow == DoorOpen)
 2f6:	fc 01       	movw	r30, r24
 2f8:	21 81       	ldd	r18, Z+1	; 0x01
 2fa:	25 3c       	cpi	r18, 0xC5	; 197
 2fc:	89 f4       	brne	.+34     	; 0x320 <Await_DoorOpen+0x2e>
 2fe:	22 81       	ldd	r18, Z+2	; 0x02
 300:	20 31       	cpi	r18, 0x10	; 16
 302:	71 f4       	brne	.+28     	; 0x320 <Await_DoorOpen+0x2e>
 304:	ec 01       	movw	r28, r24
	{
		Usart_PutChar(_motorCtrl.start);
 306:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <_motorCtrl+0x5>
 30a:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 30e:	6a e3       	ldi	r22, 0x3A	; 58
 310:	71 e0       	ldi	r23, 0x01	; 1
 312:	8f e6       	ldi	r24, 0x6F	; 111
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 b8 01 	call	0x370	; 0x370 <SetState>
		Message_ElevatorReady(msg);
 31a:	ce 01       	movw	r24, r28
 31c:	0e 94 8d 00 	call	0x11a	; 0x11a <Message_ElevatorReady>
	}
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <Await_DoorClosed>:

void Await_DoorClosed(Message* msg)
{
	if (ReadDoorState((FloorType)_motorCtrl.start) == DoorClosed)
 326:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <_motorCtrl+0x5>
 32a:	0e 94 2d 02 	call	0x45a	; 0x45a <ReadDoorState>
 32e:	80 32       	cpi	r24, 0x20	; 32
 330:	71 f4       	brne	.+28     	; 0x34e <Await_DoorClosed+0x28>
	{
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 332:	6f e4       	ldi	r22, 0x4F	; 79
 334:	71 e0       	ldi	r23, 0x01	; 1
 336:	8f e6       	ldi	r24, 0x6F	; 111
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 b8 01 	call	0x370	; 0x370 <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 33e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <_motorCtrl+0x6>
 342:	67 e1       	ldi	r22, 0x17	; 23
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	82 95       	swap	r24
 348:	80 7f       	andi	r24, 0xF0	; 240
 34a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MoveElevator>
 34e:	08 95       	ret

00000350 <EnterAtomic>:
 350:	f8 94       	cli
 352:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 35c:	08 95       	ret

0000035e <LeaveAtomic>:
 35e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 362:	81 50       	subi	r24, 0x01	; 1
 364:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 368:	81 11       	cpse	r24, r1
 36a:	01 c0       	rjmp	.+2      	; 0x36e <LeaveAtomic+0x10>
 36c:	78 94       	sei
 36e:	08 95       	ret

00000370 <SetState>:
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	8b 01       	movw	r16, r22
 37c:	0e 94 a8 01 	call	0x350	; 0x350 <EnterAtomic>
 380:	1c 83       	std	Y+4, r17	; 0x04
 382:	0b 83       	std	Y+3, r16	; 0x03
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	0c 94 af 01 	jmp	0x35e	; 0x35e <LeaveAtomic>

00000390 <RegisterFsm>:
 390:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <anchor>
 394:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <anchor+0x1>
 398:	a6 e7       	ldi	r26, 0x76	; 118
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	e6 37       	cpi	r30, 0x76	; 118
 3a0:	f2 07       	cpc	r31, r18
 3a2:	29 f0       	breq	.+10     	; 0x3ae <RegisterFsm+0x1e>
 3a4:	df 01       	movw	r26, r30
 3a6:	01 90       	ld	r0, Z+
 3a8:	f0 81       	ld	r31, Z
 3aa:	e0 2d       	mov	r30, r0
 3ac:	f7 cf       	rjmp	.-18     	; 0x39c <RegisterFsm+0xc>
 3ae:	8d 93       	st	X+, r24
 3b0:	9c 93       	st	X, r25
 3b2:	dc 01       	movw	r26, r24
 3b4:	ed 93       	st	X+, r30
 3b6:	fc 93       	st	X, r31
 3b8:	08 95       	ret

000003ba <DispatchEvent>:
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	0e 94 a8 01 	call	0x350	; 0x350 <EnterAtomic>
 3c6:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <msgQ_out>
 3ca:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 3ce:	98 17       	cp	r25, r24
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <DispatchEvent+0x2e>
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	98 9f       	mul	r25, r24
 3d6:	e0 01       	movw	r28, r0
 3d8:	11 24       	eor	r1, r1
 3da:	c1 55       	subi	r28, 0x51	; 81
 3dc:	df 4f       	sbci	r29, 0xFF	; 255
 3de:	9f 5f       	subi	r25, 0xFF	; 255
 3e0:	9f 71       	andi	r25, 0x1F	; 31
 3e2:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <msgQ_out>
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DispatchEvent+0x32>
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
 3ec:	0e 94 af 01 	call	0x35e	; 0x35e <LeaveAtomic>
 3f0:	20 97       	sbiw	r28, 0x00	; 0
 3f2:	c9 f0       	breq	.+50     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3f4:	00 91 76 00 	lds	r16, 0x0076	; 0x800076 <anchor>
 3f8:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <anchor+0x1>
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	06 37       	cpi	r16, 0x76	; 118
 400:	1f 07       	cpc	r17, r31
 402:	89 f0       	breq	.+34     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 404:	d8 01       	movw	r26, r16
 406:	12 96       	adiw	r26, 0x02	; 2
 408:	9c 91       	ld	r25, X
 40a:	12 97       	sbiw	r26, 0x02	; 2
 40c:	88 81       	ld	r24, Y
 40e:	89 23       	and	r24, r25
 410:	31 f0       	breq	.+12     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 412:	13 96       	adiw	r26, 0x03	; 3
 414:	ed 91       	ld	r30, X+
 416:	fc 91       	ld	r31, X
 418:	14 97       	sbiw	r26, 0x04	; 4
 41a:	ce 01       	movw	r24, r28
 41c:	09 95       	icall
 41e:	f8 01       	movw	r30, r16
 420:	00 81       	ld	r16, Z
 422:	11 81       	ldd	r17, Z+1	; 0x01
 424:	eb cf       	rjmp	.-42     	; 0x3fc <DispatchEvent+0x42>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	08 95       	ret

00000430 <InitializeCounter>:
 430:	12 be       	out	0x32, r1	; 50
 432:	8b e0       	ldi	r24, 0x0B	; 11
 434:	83 bf       	out	0x33, r24	; 51
 436:	8d e7       	ldi	r24, 0x7D	; 125
 438:	8c bf       	out	0x3c, r24	; 60
 43a:	89 b7       	in	r24, 0x39	; 57
 43c:	82 60       	ori	r24, 0x02	; 2
 43e:	89 bf       	out	0x39, r24	; 57
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	9b bd       	out	0x2b, r25	; 43
 446:	8a bd       	out	0x2a, r24	; 42
 448:	1d bc       	out	0x2d, r1	; 45
 44a:	1c bc       	out	0x2c, r1	; 44
 44c:	1f bc       	out	0x2f, r1	; 47
 44e:	8d e0       	ldi	r24, 0x0D	; 13
 450:	8e bd       	out	0x2e, r24	; 46
 452:	89 b7       	in	r24, 0x39	; 57
 454:	80 61       	ori	r24, 0x10	; 16
 456:	89 bf       	out	0x39, r24	; 57
 458:	08 95       	ret

0000045a <ReadDoorState>:
 45a:	e8 2f       	mov	r30, r24
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	ec 58       	subi	r30, 0x8C	; 140
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	80 81       	ld	r24, Z
 468:	08 95       	ret

0000046a <SetDoorState>:
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	d8 2f       	mov	r29, r24
 470:	c6 2f       	mov	r28, r22
 472:	0e 94 a8 01 	call	0x350	; 0x350 <EnterAtomic>
 476:	6c 2f       	mov	r22, r28
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	8d 2f       	mov	r24, r29
 47c:	80 73       	andi	r24, 0x30	; 48
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	fb 01       	movw	r30, r22
 484:	ec 58       	subi	r30, 0x8C	; 140
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	90 81       	ld	r25, Z
 48a:	98 23       	and	r25, r24
 48c:	11 f4       	brne	.+4      	; 0x492 <SetDoorState+0x28>
 48e:	94 e0       	ldi	r25, 0x04	; 4
 490:	91 83       	std	Z+1, r25	; 0x01
 492:	fb 01       	movw	r30, r22
 494:	ec 58       	subi	r30, 0x8C	; 140
 496:	fe 4f       	sbci	r31, 0xFE	; 254
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	80 83       	st	Z, r24
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	0c 94 af 01 	jmp	0x35e	; 0x35e <LeaveAtomic>

000004a4 <MoveElevator>:
 4a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 4a8:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Elevator+0x4>
 4ac:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <Elevator+0x6>
 4b0:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Elevator+0x5>
 4b4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 4b8:	98 17       	cp	r25, r24
 4ba:	10 f4       	brcc	.+4      	; 0x4c0 <MoveElevator+0x1c>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <MoveElevator+0x22>
 4c0:	89 17       	cp	r24, r25
 4c2:	18 f4       	brcc	.+6      	; 0x4ca <MoveElevator+0x26>
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Elevator+0x4>
 4ca:	08 95       	ret

000004cc <CalibrateElevatorPosition>:
 4cc:	bc 01       	movw	r22, r24
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <MoveElevator>

000004d4 <SetDisplay>:
 4d4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <liftDisplay7Seg>
 4d8:	08 95       	ret

000004da <RegisterTestHandler>:
 4da:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_testHandler+0x1>
 4de:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_testHandler>
 4e2:	08 95       	ret

000004e4 <Usart_Init>:
 4e4:	10 bc       	out	0x20, r1	; 32
 4e6:	8c e0       	ldi	r24, 0x0C	; 12
 4e8:	89 b9       	out	0x09, r24	; 9
 4ea:	86 e8       	ldi	r24, 0x86	; 134
 4ec:	80 bd       	out	0x20, r24	; 32
 4ee:	88 e9       	ldi	r24, 0x98	; 152
 4f0:	8a b9       	out	0x0a, r24	; 10
 4f2:	78 94       	sei
 4f4:	08 95       	ret

000004f6 <InitializePorts>:
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	87 bb       	out	0x17, r24	; 23
 4fa:	84 bb       	out	0x14, r24	; 20
 4fc:	8a bb       	out	0x1a, r24	; 26
 4fe:	11 ba       	out	0x11, r1	; 17
 500:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Usart_Init>
 504:	85 b7       	in	r24, 0x35	; 53
 506:	83 60       	ori	r24, 0x03	; 3
 508:	85 bf       	out	0x35, r24	; 53
 50a:	8b b7       	in	r24, 0x3b	; 59
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	8b bf       	out	0x3b, r24	; 59
 510:	08 95       	ret

00000512 <Usart_PutChar>:
 512:	8c b9       	out	0x0c, r24	; 12
 514:	5d 9b       	sbis	0x0b, 5	; 11
 516:	fe cf       	rjmp	.-4      	; 0x514 <Usart_PutChar+0x2>
 518:	08 95       	ret

0000051a <SendEvent>:
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	c8 2f       	mov	r28, r24
 524:	06 2f       	mov	r16, r22
 526:	d4 2f       	mov	r29, r20
 528:	12 2f       	mov	r17, r18
 52a:	0e 94 a8 01 	call	0x350	; 0x350 <EnterAtomic>
 52e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 532:	e8 2f       	mov	r30, r24
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	af 01       	movw	r20, r30
 538:	4f 5f       	subi	r20, 0xFF	; 255
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
 53c:	4f 71       	andi	r20, 0x1F	; 31
 53e:	55 27       	eor	r21, r21
 540:	20 91 ad 00 	lds	r18, 0x00AD	; 0x8000ad <msgQ_out>
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	42 17       	cp	r20, r18
 548:	53 07       	cpc	r21, r19
 54a:	71 f4       	brne	.+28     	; 0x568 <SendEvent+0x4e>
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 55e:	8e ed       	ldi	r24, 0xDE	; 222
 560:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 564:	8d ea       	ldi	r24, 0xAD	; 173
 566:	f9 cf       	rjmp	.-14     	; 0x55a <SendEvent+0x40>
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	e1 55       	subi	r30, 0x51	; 81
 572:	ff 4f       	sbci	r31, 0xFF	; 255
 574:	01 83       	std	Z+1, r16	; 0x01
 576:	13 83       	std	Z+3, r17	; 0x03
 578:	d2 83       	std	Z+2, r29	; 0x02
 57a:	c0 83       	st	Z, r28
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	8f 71       	andi	r24, 0x1F	; 31
 580:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <msgQ_in>
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	0c 94 af 01 	jmp	0x35e	; 0x35e <LeaveAtomic>

00000590 <MakeDoorStates>:
 590:	df 92       	push	r13
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	c4 e7       	ldi	r28, 0x74	; 116
 5a0:	d1 e0       	ldi	r29, 0x01	; 1
 5a2:	00 e0       	ldi	r16, 0x00	; 0
 5a4:	10 e0       	ldi	r17, 0x00	; 0
 5a6:	ee 24       	eor	r14, r14
 5a8:	e3 94       	inc	r14
 5aa:	f1 2c       	mov	r15, r1
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	81 11       	cpse	r24, r1
 5b0:	24 c0       	rjmp	.+72     	; 0x5fa <MakeDoorStates+0x6a>
 5b2:	48 81       	ld	r20, Y
 5b4:	40 ff       	sbrs	r20, 0
 5b6:	23 c0       	rjmp	.+70     	; 0x5fe <MakeDoorStates+0x6e>
 5b8:	4e 7f       	andi	r20, 0xFE	; 254
 5ba:	48 83       	st	Y, r20
 5bc:	20 2f       	mov	r18, r16
 5be:	65 ec       	ldi	r22, 0xC5	; 197
 5c0:	80 e1       	ldi	r24, 0x10	; 16
 5c2:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 5c6:	88 81       	ld	r24, Y
 5c8:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <OpenDoors>
 5cc:	84 ff       	sbrs	r24, 4
 5ce:	0a c0       	rjmp	.+20     	; 0x5e4 <MakeDoorStates+0x54>
 5d0:	97 01       	movw	r18, r14
 5d2:	00 2e       	mov	r0, r16
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <MakeDoorStates+0x48>
 5d6:	22 0f       	add	r18, r18
 5d8:	0a 94       	dec	r0
 5da:	ea f7       	brpl	.-6      	; 0x5d6 <MakeDoorStates+0x46>
 5dc:	24 2b       	or	r18, r20
 5de:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <OpenDoors>
 5e2:	0d c0       	rjmp	.+26     	; 0x5fe <MakeDoorStates+0x6e>
 5e4:	c7 01       	movw	r24, r14
 5e6:	00 2e       	mov	r0, r16
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <MakeDoorStates+0x5c>
 5ea:	88 0f       	add	r24, r24
 5ec:	0a 94       	dec	r0
 5ee:	ea f7       	brpl	.-6      	; 0x5ea <MakeDoorStates+0x5a>
 5f0:	80 95       	com	r24
 5f2:	84 23       	and	r24, r20
 5f4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <OpenDoors>
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <MakeDoorStates+0x6e>
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	89 83       	std	Y+1, r24	; 0x01
 5fe:	0f 5f       	subi	r16, 0xFF	; 255
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	22 96       	adiw	r28, 0x02	; 2
 604:	04 30       	cpi	r16, 0x04	; 4
 606:	11 05       	cpc	r17, r1
 608:	89 f6       	brne	.-94     	; 0x5ac <MakeDoorStates+0x1c>
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	ff 90       	pop	r15
 614:	ef 90       	pop	r14
 616:	df 90       	pop	r13
 618:	08 95       	ret

0000061a <ProcessMessage>:
 61a:	db 01       	movw	r26, r22
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	b1 f5       	brne	.+108    	; 0x68c <ProcessMessage+0x72>
 620:	8c 91       	ld	r24, X
 622:	98 2f       	mov	r25, r24
 624:	90 72       	andi	r25, 0x20	; 32
 626:	28 2f       	mov	r18, r24
 628:	20 76       	andi	r18, 0x60	; 96
 62a:	d9 f1       	breq	.+118    	; 0x6a2 <ProcessMessage+0x88>
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	38 2f       	mov	r19, r24
 630:	30 71       	andi	r19, 0x10	; 16
 632:	84 ff       	sbrs	r24, 4
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	99 23       	and	r25, r25
 638:	11 f0       	breq	.+4      	; 0x63e <ProcessMessage+0x24>
 63a:	94 e0       	ldi	r25, 0x04	; 4
 63c:	01 c0       	rjmp	.+2      	; 0x640 <ProcessMessage+0x26>
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	8f 70       	andi	r24, 0x0F	; 15
 642:	89 0f       	add	r24, r25
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <ProcessMessage+0x34>
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	8a 95       	dec	r24
 650:	e2 f7       	brpl	.-8      	; 0x64a <ProcessMessage+0x30>
 652:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 656:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 65a:	ba 01       	movw	r22, r20
 65c:	60 95       	com	r22
 65e:	70 95       	com	r23
 660:	86 23       	and	r24, r22
 662:	97 23       	and	r25, r23
 664:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 668:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 66c:	33 23       	and	r19, r19
 66e:	51 f0       	breq	.+20     	; 0x684 <ProcessMessage+0x6a>
 670:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 674:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 678:	84 2b       	or	r24, r20
 67a:	95 2b       	or	r25, r21
 67c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 680:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 684:	67 ec       	ldi	r22, 0xC7	; 199
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0c 94 8d 02 	jmp	0x51a	; 0x51a <SendEvent>
 68c:	83 30       	cpi	r24, 0x03	; 3
 68e:	49 f4       	brne	.+18     	; 0x6a2 <ProcessMessage+0x88>
 690:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <_testHandler>
 694:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <_testHandler+0x1>
 698:	30 97       	sbiw	r30, 0x00	; 0
 69a:	19 f0       	breq	.+6      	; 0x6a2 <ProcessMessage+0x88>
 69c:	64 2f       	mov	r22, r20
 69e:	cd 01       	movw	r24, r26
 6a0:	09 94       	ijmp
 6a2:	08 95       	ret

000006a4 <HandleMessage>:
 6a4:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <msgType.1871>
 6a8:	91 11       	cpse	r25, r1
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <HandleMessage+0x12>
 6ac:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <msgType.1871>
 6b0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <msgLen.1872>
 6b4:	08 95       	ret
 6b6:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <msgLen.1872>
 6ba:	41 11       	cpse	r20, r1
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <HandleMessage+0x22>
 6be:	82 50       	subi	r24, 0x02	; 2
 6c0:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <msgLen.1872>
 6c4:	15 c0       	rjmp	.+42     	; 0x6f0 <HandleMessage+0x4c>
 6c6:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <bufferIndex.1870>
 6ca:	e4 17       	cp	r30, r20
 6cc:	98 f4       	brcc	.+38     	; 0x6f4 <HandleMessage+0x50>
 6ce:	21 e0       	ldi	r18, 0x01	; 1
 6d0:	2e 0f       	add	r18, r30
 6d2:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <bufferIndex.1870>
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	e4 56       	subi	r30, 0x64	; 100
 6da:	ff 4f       	sbci	r31, 0xFF	; 255
 6dc:	80 83       	st	Z, r24
 6de:	42 13       	cpse	r20, r18
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <HandleMessage+0x50>
 6e2:	6c e9       	ldi	r22, 0x9C	; 156
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	89 2f       	mov	r24, r25
 6e8:	0e 94 0d 03 	call	0x61a	; 0x61a <ProcessMessage>
 6ec:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <msgType.1871>
 6f0:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <bufferIndex.1870>
 6f4:	08 95       	ret

000006f6 <SetInputOutput>:
 6f6:	cf 93       	push	r28
 6f8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <outputRefreshCounter.1884>
 6fc:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <outputRefreshCounter.1884+0x1>
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <outputRefreshCounter.1884+0x1>
 706:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <outputRefreshCounter.1884>
 70a:	83 70       	andi	r24, 0x03	; 3
 70c:	99 27       	eor	r25, r25
 70e:	89 2b       	or	r24, r25
 710:	21 f5       	brne	.+72     	; 0x75a <SetInputOutput+0x64>
 712:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <doorRefreshCounter.1885>
 716:	8f 5f       	subi	r24, 0xFF	; 255
 718:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <doorRefreshCounter.1885>
 71c:	83 70       	andi	r24, 0x03	; 3
 71e:	a8 2f       	mov	r26, r24
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	aa 0f       	add	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	ac 58       	subi	r26, 0x8C	; 140
 728:	be 4f       	sbci	r27, 0xFE	; 254
 72a:	11 96       	adiw	r26, 0x01	; 1
 72c:	ec 91       	ld	r30, X
 72e:	11 97       	sbiw	r26, 0x01	; 1
 730:	9c 91       	ld	r25, X
 732:	94 ff       	sbrs	r25, 4
 734:	03 c0       	rjmp	.+6      	; 0x73c <SetInputOutput+0x46>
 736:	94 e0       	ldi	r25, 0x04	; 4
 738:	9e 1b       	sub	r25, r30
 73a:	e9 2f       	mov	r30, r25
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	ee 57       	subi	r30, 0x7E	; 126
 740:	ff 4f       	sbci	r31, 0xFF	; 255
 742:	21 e0       	ldi	r18, 0x01	; 1
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	a9 01       	movw	r20, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <SetInputOutput+0x58>
 74a:	44 0f       	add	r20, r20
 74c:	55 1f       	adc	r21, r21
 74e:	8a 95       	dec	r24
 750:	e2 f7       	brpl	.-8      	; 0x74a <SetInputOutput+0x54>
 752:	ca 01       	movw	r24, r20
 754:	90 81       	ld	r25, Z
 756:	89 2b       	or	r24, r25
 758:	85 bb       	out	0x15, r24	; 21
 75a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <buttonRefreshCounter.1886>
 75e:	8f 5f       	subi	r24, 0xFF	; 255
 760:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <buttonRefreshCounter.1886>
 764:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <displayCache>
 768:	22 23       	and	r18, r18
 76a:	01 f1       	breq	.+64     	; 0x7ac <SetInputOutput+0xb6>
 76c:	83 70       	andi	r24, 0x03	; 3
 76e:	62 2f       	mov	r22, r18
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	40 e1       	ldi	r20, 0x10	; 16
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	08 2e       	mov	r0, r24
 778:	02 c0       	rjmp	.+4      	; 0x77e <SetInputOutput+0x88>
 77a:	44 0f       	add	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	0a 94       	dec	r0
 780:	e2 f7       	brpl	.-8      	; 0x77a <SetInputOutput+0x84>
 782:	46 23       	and	r20, r22
 784:	57 23       	and	r21, r23
 786:	45 2b       	or	r20, r21
 788:	11 f0       	breq	.+4      	; 0x78e <SetInputOutput+0x98>
 78a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <buttonLiftLed>
 78e:	08 2e       	mov	r0, r24
 790:	02 c0       	rjmp	.+4      	; 0x796 <SetInputOutput+0xa0>
 792:	75 95       	asr	r23
 794:	67 95       	ror	r22
 796:	0a 94       	dec	r0
 798:	e2 f7       	brpl	.-8      	; 0x792 <SetInputOutput+0x9c>
 79a:	60 fd       	sbrc	r22, 0
 79c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <buttonFloorLed>
 7a0:	82 2f       	mov	r24, r18
 7a2:	80 7f       	andi	r24, 0xF0	; 240
 7a4:	19 f0       	breq	.+6      	; 0x7ac <SetInputOutput+0xb6>
 7a6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <buttonLiftLed_on>
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <SetInputOutput+0xb8>
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	2f 70       	andi	r18, 0x0F	; 15
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <SetInputOutput+0xc2>
 7b2:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <buttonFloorLed_On>
 7b6:	01 c0       	rjmp	.+2      	; 0x7ba <SetInputOutput+0xc4>
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <liftPosDisplay_On>
 7be:	81 11       	cpse	r24, r1
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <SetInputOutput+0xd4>
 7c2:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <Elevator>
 7c6:	3f 73       	andi	r19, 0x3F	; 63
 7c8:	01 c0       	rjmp	.+2      	; 0x7cc <SetInputOutput+0xd6>
 7ca:	3f e3       	ldi	r19, 0x3F	; 63
 7cc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <liftDisplay7Seg_On>
 7d0:	81 11       	cpse	r24, r1
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <SetInputOutput+0xe4>
 7d4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <liftDisplay7Seg>
 7d8:	01 c0       	rjmp	.+2      	; 0x7dc <SetInputOutput+0xe6>
 7da:	87 e0       	ldi	r24, 0x07	; 7
 7dc:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <floorDisplayPort>
 7e0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <doorframe>
 7e4:	60 e4       	ldi	r22, 0x40	; 64
 7e6:	86 9f       	mul	r24, r22
 7e8:	a0 01       	movw	r20, r0
 7ea:	11 24       	eor	r1, r1
 7ec:	60 e8       	ldi	r22, 0x80	; 128
 7ee:	96 9f       	mul	r25, r22
 7f0:	c0 01       	movw	r24, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	84 2b       	or	r24, r20
 7f6:	83 2b       	or	r24, r19
 7f8:	88 bb       	out	0x18, r24	; 24
 7fa:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <buttonLiftLed>
 7fe:	98 e0       	ldi	r25, 0x08	; 8
 800:	89 9f       	mul	r24, r25
 802:	a0 01       	movw	r20, r0
 804:	11 24       	eor	r1, r1
 806:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <buttonFloorLed>
 80a:	30 e2       	ldi	r19, 0x20	; 32
 80c:	93 9f       	mul	r25, r19
 80e:	c0 01       	movw	r24, r0
 810:	11 24       	eor	r1, r1
 812:	84 2b       	or	r24, r20
 814:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <floorDisplayPort>
 818:	38 2b       	or	r19, r24
 81a:	40 e8       	ldi	r20, 0x80	; 128
 81c:	24 9f       	mul	r18, r20
 81e:	c0 01       	movw	r24, r0
 820:	11 24       	eor	r1, r1
 822:	83 2b       	or	r24, r19
 824:	8b bb       	out	0x1b, r24	; 27
 826:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <USART_rxBufferOut>
 82a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 82e:	98 17       	cp	r25, r24
 830:	b9 f0       	breq	.+46     	; 0x860 <__stack+0x1>
 832:	0e 94 a8 01 	call	0x350	; 0x350 <EnterAtomic>
 836:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <USART_rxBufferOut>
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	8e 0f       	add	r24, r30
 83e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	ec 5a       	subi	r30, 0xAC	; 172
 846:	fe 4f       	sbci	r31, 0xFE	; 254
 848:	c0 81       	ld	r28, Z
 84a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USART_rxBufferOut>
 84e:	8f 71       	andi	r24, 0x1F	; 31
 850:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 854:	0e 94 af 01 	call	0x35e	; 0x35e <LeaveAtomic>
 858:	8c 2f       	mov	r24, r28
 85a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <HandleMessage>
 85e:	e3 cf       	rjmp	.-58     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 860:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <terminalRefreshCounter.1887>
 864:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <terminalRefreshCounter.1887+0x1>
 868:	9c 01       	movw	r18, r24
 86a:	2f 5f       	subi	r18, 0xFF	; 255
 86c:	3f 4f       	sbci	r19, 0xFF	; 255
 86e:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <terminalRefreshCounter.1887+0x1>
 872:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <terminalRefreshCounter.1887>
 876:	8f 3f       	cpi	r24, 0xFF	; 255
 878:	9f 40       	sbci	r25, 0x0F	; 15
 87a:	c9 f4       	brne	.+50     	; 0x8ae <__stack+0x4f>
 87c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <EnableStatusUpdate>
 880:	88 23       	and	r24, r24
 882:	a9 f0       	breq	.+42     	; 0x8ae <__stack+0x4f>
 884:	84 e0       	ldi	r24, 0x04	; 4
 886:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 88a:	86 e0       	ldi	r24, 0x06	; 6
 88c:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 890:	85 ea       	ldi	r24, 0xA5	; 165
 892:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 896:	8a e5       	ldi	r24, 0x5A	; 90
 898:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 89c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SystemState>
 8a0:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 8a4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <OpenDoors>
 8a8:	cf 91       	pop	r28
 8aa:	0c 94 89 02 	jmp	0x512	; 0x512 <Usart_PutChar>
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <InitializeStart>:
 8b2:	8a ec       	ldi	r24, 0xCA	; 202
 8b4:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 8b8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <liftPosDisplay_On>
 8bc:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <buttonLiftLed_on>
 8c0:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <liftDisplay7Seg_On>
 8c4:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <buttonFloorLed_On>
 8c8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <doorframe>
 8cc:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <liftDoorState+0x1>
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <liftDoorState>
 8d6:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <liftDoorState+0x3>
 8da:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <liftDoorState+0x2>
 8de:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <liftDoorState+0x5>
 8e2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <liftDoorState+0x4>
 8e6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <liftDoorState+0x7>
 8ea:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <liftDoorState+0x6>
 8ee:	8f e1       	ldi	r24, 0x1F	; 31
 8f0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 8f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 8f8:	0e 94 18 02 	call	0x430	; 0x430 <InitializeCounter>
 8fc:	20 e0       	ldi	r18, 0x00	; 0
 8fe:	40 e0       	ldi	r20, 0x00	; 0
 900:	61 ec       	ldi	r22, 0xC1	; 193
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 908:	8e ef       	ldi	r24, 0xFE	; 254
 90a:	0e 94 89 02 	call	0x512	; 0x512 <Usart_PutChar>
 90e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <DispatchEvent>
 912:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <SetInputOutput>
 916:	fb cf       	rjmp	.-10     	; 0x90e <InitializeStart+0x5c>

00000918 <__vector_1>:
 918:	1f 92       	push	r1
 91a:	0f 92       	push	r0
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	0f 92       	push	r0
 920:	11 24       	eor	r1, r1
 922:	2f 93       	push	r18
 924:	3f 93       	push	r19
 926:	4f 93       	push	r20
 928:	5f 93       	push	r21
 92a:	6f 93       	push	r22
 92c:	7f 93       	push	r23
 92e:	8f 93       	push	r24
 930:	9f 93       	push	r25
 932:	af 93       	push	r26
 934:	bf 93       	push	r27
 936:	ef 93       	push	r30
 938:	ff 93       	push	r31
 93a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 93e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 942:	91 60       	ori	r25, 0x01	; 1
 944:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 948:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 94c:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <ButtonState>
 950:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <ButtonState+0x1>
 954:	20 e0       	ldi	r18, 0x00	; 0
 956:	69 ec       	ldi	r22, 0xC9	; 201
 958:	80 e1       	ldi	r24, 0x10	; 16
 95a:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 95e:	ff 91       	pop	r31
 960:	ef 91       	pop	r30
 962:	bf 91       	pop	r27
 964:	af 91       	pop	r26
 966:	9f 91       	pop	r25
 968:	8f 91       	pop	r24
 96a:	7f 91       	pop	r23
 96c:	6f 91       	pop	r22
 96e:	5f 91       	pop	r21
 970:	4f 91       	pop	r20
 972:	3f 91       	pop	r19
 974:	2f 91       	pop	r18
 976:	0f 90       	pop	r0
 978:	0f be       	out	0x3f, r0	; 63
 97a:	0f 90       	pop	r0
 97c:	1f 90       	pop	r1
 97e:	18 95       	reti

00000980 <__vector_13>:
 980:	1f 92       	push	r1
 982:	0f 92       	push	r0
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	0f 92       	push	r0
 988:	11 24       	eor	r1, r1
 98a:	2f 93       	push	r18
 98c:	3f 93       	push	r19
 98e:	8f 93       	push	r24
 990:	9f 93       	push	r25
 992:	ef 93       	push	r30
 994:	ff 93       	push	r31
 996:	5f 9b       	sbis	0x0b, 7	; 11
 998:	1e c0       	rjmp	.+60     	; 0x9d6 <__vector_13+0x56>
 99a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 99e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USART_rxBufferOut>
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	8f 71       	andi	r24, 0x1F	; 31
 9a8:	99 27       	eor	r25, r25
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	82 17       	cp	r24, r18
 9ae:	93 07       	cpc	r25, r19
 9b0:	89 f0       	breq	.+34     	; 0x9d4 <__vector_13+0x54>
 9b2:	8c b1       	in	r24, 0x0c	; 12
 9b4:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <USART_rxBufferIn>
 9b8:	91 e0       	ldi	r25, 0x01	; 1
 9ba:	9e 0f       	add	r25, r30
 9bc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USART_rxBufferIn>
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	ec 5a       	subi	r30, 0xAC	; 172
 9c4:	fe 4f       	sbci	r31, 0xFE	; 254
 9c6:	80 83       	st	Z, r24
 9c8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 9cc:	8f 71       	andi	r24, 0x1F	; 31
 9ce:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USART_rxBufferIn>
 9d2:	e1 cf       	rjmp	.-62     	; 0x996 <__vector_13+0x16>
 9d4:	57 98       	cbi	0x0a, 7	; 10
 9d6:	ff 91       	pop	r31
 9d8:	ef 91       	pop	r30
 9da:	9f 91       	pop	r25
 9dc:	8f 91       	pop	r24
 9de:	3f 91       	pop	r19
 9e0:	2f 91       	pop	r18
 9e2:	0f 90       	pop	r0
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	0f 90       	pop	r0
 9e8:	1f 90       	pop	r1
 9ea:	18 95       	reti

000009ec <__vector_7>:
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	2f 93       	push	r18
 9f8:	3f 93       	push	r19
 9fa:	4f 93       	push	r20
 9fc:	5f 93       	push	r21
 9fe:	6f 93       	push	r22
 a00:	7f 93       	push	r23
 a02:	8f 93       	push	r24
 a04:	9f 93       	push	r25
 a06:	af 93       	push	r26
 a08:	bf 93       	push	r27
 a0a:	ef 93       	push	r30
 a0c:	ff 93       	push	r31
 a0e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ElevatorTick.1962>
 a12:	8f 5f       	subi	r24, 0xFF	; 255
 a14:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ElevatorTick.1962>
 a18:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
 a1c:	9f 5f       	subi	r25, 0xFF	; 255
 a1e:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__data_end>
 a22:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <Elevator+0x2>
 a26:	0e 94 df 05 	call	0xbbe	; 0xbbe <__udivmodqi4>
 a2a:	91 11       	cpse	r25, r1
 a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__vector_7+0x6a>
 a2e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 a32:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <Elevator+0x1>
 a36:	96 17       	cp	r25, r22
 a38:	61 f0       	breq	.+24     	; 0xa52 <__vector_7+0x66>
 a3a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Elevator+0x4>
 a3e:	89 0f       	add	r24, r25
 a40:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 a44:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Elevator+0x5>
 a48:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Elevator+0x6>
 a4c:	30 97       	sbiw	r30, 0x00	; 0
 a4e:	09 f0       	breq	.+2      	; 0xa52 <__vector_7+0x66>
 a50:	09 95       	icall
 a52:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <ElevatorTick.1962>
 a56:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 a5a:	6c e0       	ldi	r22, 0x0C	; 12
 a5c:	0e 94 df 05 	call	0xbbe	; 0xbbe <__udivmodqi4>
 a60:	91 11       	cpse	r25, r1
 a62:	04 c0       	rjmp	.+8      	; 0xa6c <__vector_7+0x80>
 a64:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
 a68:	0e 94 c8 02 	call	0x590	; 0x590 <MakeDoorStates>
 a6c:	ff 91       	pop	r31
 a6e:	ef 91       	pop	r30
 a70:	bf 91       	pop	r27
 a72:	af 91       	pop	r26
 a74:	9f 91       	pop	r25
 a76:	8f 91       	pop	r24
 a78:	7f 91       	pop	r23
 a7a:	6f 91       	pop	r22
 a7c:	5f 91       	pop	r21
 a7e:	4f 91       	pop	r20
 a80:	3f 91       	pop	r19
 a82:	2f 91       	pop	r18
 a84:	0f 90       	pop	r0
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	0f 90       	pop	r0
 a8a:	1f 90       	pop	r1
 a8c:	18 95       	reti

00000a8e <StartTimer>:
 a8e:	ff 92       	push	r15
 a90:	0f 93       	push	r16
 a92:	1f 93       	push	r17
 a94:	cf 93       	push	r28
 a96:	df 93       	push	r29
 a98:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 a9c:	2f 2d       	mov	r18, r15
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	c0 e0       	ldi	r28, 0x00	; 0
 aa2:	d0 e0       	ldi	r29, 0x00	; 0
 aa4:	a9 01       	movw	r20, r18
 aa6:	0c 2e       	mov	r0, r28
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <StartTimer+0x20>
 aaa:	55 95       	asr	r21
 aac:	47 95       	ror	r20
 aae:	0a 94       	dec	r0
 ab0:	e2 f7       	brpl	.-8      	; 0xaaa <StartTimer+0x1c>
 ab2:	40 fd       	sbrc	r20, 0
 ab4:	18 c0       	rjmp	.+48     	; 0xae6 <StartTimer+0x58>
 ab6:	8c 01       	movw	r16, r24
 ab8:	0e 94 a8 01 	call	0x350	; 0x350 <EnterAtomic>
 abc:	21 e0       	ldi	r18, 0x01	; 1
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	0c 2e       	mov	r0, r28
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <StartTimer+0x38>
 ac4:	22 0f       	add	r18, r18
 ac6:	0a 94       	dec	r0
 ac8:	ea f7       	brpl	.-6      	; 0xac4 <StartTimer+0x36>
 aca:	2f 29       	or	r18, r15
 acc:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <UsedTimers>
 ad0:	fe 01       	movw	r30, r28
 ad2:	ee 0f       	add	r30, r30
 ad4:	ff 1f       	adc	r31, r31
 ad6:	ef 5b       	subi	r30, 0xBF	; 191
 ad8:	fe 4f       	sbci	r31, 0xFE	; 254
 ada:	11 83       	std	Z+1, r17	; 0x01
 adc:	00 83       	st	Z, r16
 ade:	0e 94 af 01 	call	0x35e	; 0x35e <LeaveAtomic>
 ae2:	8c 2f       	mov	r24, r28
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <StartTimer+0x62>
 ae6:	21 96       	adiw	r28, 0x01	; 1
 ae8:	c8 30       	cpi	r28, 0x08	; 8
 aea:	d1 05       	cpc	r29, r1
 aec:	d9 f6       	brne	.-74     	; 0xaa4 <StartTimer+0x16>
 aee:	8f ef       	ldi	r24, 0xFF	; 255
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	1f 91       	pop	r17
 af6:	0f 91       	pop	r16
 af8:	ff 90       	pop	r15
 afa:	08 95       	ret

00000afc <__vector_10>:
 afc:	1f 92       	push	r1
 afe:	0f 92       	push	r0
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	0f 92       	push	r0
 b04:	11 24       	eor	r1, r1
 b06:	cf 92       	push	r12
 b08:	df 92       	push	r13
 b0a:	ff 92       	push	r15
 b0c:	0f 93       	push	r16
 b0e:	1f 93       	push	r17
 b10:	2f 93       	push	r18
 b12:	3f 93       	push	r19
 b14:	4f 93       	push	r20
 b16:	5f 93       	push	r21
 b18:	6f 93       	push	r22
 b1a:	7f 93       	push	r23
 b1c:	8f 93       	push	r24
 b1e:	9f 93       	push	r25
 b20:	af 93       	push	r26
 b22:	bf 93       	push	r27
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	ef 93       	push	r30
 b2a:	ff 93       	push	r31
 b2c:	01 e4       	ldi	r16, 0x41	; 65
 b2e:	11 e0       	ldi	r17, 0x01	; 1
 b30:	c0 e0       	ldi	r28, 0x00	; 0
 b32:	d0 e0       	ldi	r29, 0x00	; 0
 b34:	cc 24       	eor	r12, r12
 b36:	c3 94       	inc	r12
 b38:	d1 2c       	mov	r13, r1
 b3a:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 b3e:	8f 2d       	mov	r24, r15
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0c 2e       	mov	r0, r28
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <__vector_10+0x4e>
 b46:	95 95       	asr	r25
 b48:	87 95       	ror	r24
 b4a:	0a 94       	dec	r0
 b4c:	e2 f7       	brpl	.-8      	; 0xb46 <__vector_10+0x4a>
 b4e:	80 ff       	sbrs	r24, 0
 b50:	18 c0       	rjmp	.+48     	; 0xb82 <__vector_10+0x86>
 b52:	f8 01       	movw	r30, r16
 b54:	80 81       	ld	r24, Z
 b56:	91 81       	ldd	r25, Z+1	; 0x01
 b58:	01 97       	sbiw	r24, 0x01	; 1
 b5a:	91 83       	std	Z+1, r25	; 0x01
 b5c:	80 83       	st	Z, r24
 b5e:	89 2b       	or	r24, r25
 b60:	81 f4       	brne	.+32     	; 0xb82 <__vector_10+0x86>
 b62:	20 e0       	ldi	r18, 0x00	; 0
 b64:	40 e0       	ldi	r20, 0x00	; 0
 b66:	68 ec       	ldi	r22, 0xC8	; 200
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	0e 94 8d 02 	call	0x51a	; 0x51a <SendEvent>
 b6e:	c6 01       	movw	r24, r12
 b70:	0c 2e       	mov	r0, r28
 b72:	01 c0       	rjmp	.+2      	; 0xb76 <__vector_10+0x7a>
 b74:	88 0f       	add	r24, r24
 b76:	0a 94       	dec	r0
 b78:	ea f7       	brpl	.-6      	; 0xb74 <__vector_10+0x78>
 b7a:	80 95       	com	r24
 b7c:	f8 22       	and	r15, r24
 b7e:	f0 92 51 01 	sts	0x0151, r15	; 0x800151 <UsedTimers>
 b82:	21 96       	adiw	r28, 0x01	; 1
 b84:	0e 5f       	subi	r16, 0xFE	; 254
 b86:	1f 4f       	sbci	r17, 0xFF	; 255
 b88:	c8 30       	cpi	r28, 0x08	; 8
 b8a:	d1 05       	cpc	r29, r1
 b8c:	b1 f6       	brne	.-84     	; 0xb3a <__vector_10+0x3e>
 b8e:	ff 91       	pop	r31
 b90:	ef 91       	pop	r30
 b92:	df 91       	pop	r29
 b94:	cf 91       	pop	r28
 b96:	bf 91       	pop	r27
 b98:	af 91       	pop	r26
 b9a:	9f 91       	pop	r25
 b9c:	8f 91       	pop	r24
 b9e:	7f 91       	pop	r23
 ba0:	6f 91       	pop	r22
 ba2:	5f 91       	pop	r21
 ba4:	4f 91       	pop	r20
 ba6:	3f 91       	pop	r19
 ba8:	2f 91       	pop	r18
 baa:	1f 91       	pop	r17
 bac:	0f 91       	pop	r16
 bae:	ff 90       	pop	r15
 bb0:	df 90       	pop	r13
 bb2:	cf 90       	pop	r12
 bb4:	0f 90       	pop	r0
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	0f 90       	pop	r0
 bba:	1f 90       	pop	r1
 bbc:	18 95       	reti

00000bbe <__udivmodqi4>:
 bbe:	99 1b       	sub	r25, r25
 bc0:	79 e0       	ldi	r23, 0x09	; 9
 bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__udivmodqi4_ep>

00000bc4 <__udivmodqi4_loop>:
 bc4:	99 1f       	adc	r25, r25
 bc6:	96 17       	cp	r25, r22
 bc8:	08 f0       	brcs	.+2      	; 0xbcc <__udivmodqi4_ep>
 bca:	96 1b       	sub	r25, r22

00000bcc <__udivmodqi4_ep>:
 bcc:	88 1f       	adc	r24, r24
 bce:	7a 95       	dec	r23
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__udivmodqi4_loop>
 bd2:	80 95       	com	r24
 bd4:	08 95       	ret

00000bd6 <_exit>:
 bd6:	f8 94       	cli

00000bd8 <__stop_program>:
 bd8:	ff cf       	rjmp	.-2      	; 0xbd8 <__stop_program>
