
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000009d6  00000a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800086  00800086  00000a90  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f55  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bba  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c03  00000000  00000000  000037cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ecb  00000000  00000000  0000488c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001199  00000000  00000000  00005757  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000068f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
  98:	90 81       	ld	r25, Z
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	49 f4       	brne	.+18     	; 0xb0 <TestFunction+0x1e>
  9e:	c9 e7       	ldi	r28, 0x79	; 121
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
  a4:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <TestFunction+0x12>
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	31 f4       	brne	.+12     	; 0xc0 <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	41 81       	ldd	r20, Z+1	; 0x01
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	0e 94 c2 01 	call	0x384	; 0x384 <SendEvent>
	}
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <main>:
void TestFunction(uint8_t* data, uint8_t nrOfBytes);
uint8_t FindBit(uint8_t ch);

int main(void)
{
    InitializePorts();
  c6:	0e 94 b0 01 	call	0x360	; 0x360 <InitializePorts>
	Usart_Init();
  ca:	0e 94 a7 01 	call	0x34e	; 0x34e <Usart_Init>
	RegisterTestHandler( TestFunction );
  ce:	89 e4       	ldi	r24, 0x49	; 73
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 a2 01 	call	0x344	; 0x344 <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 05 01 	call	0x20a	; 0x20a <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  de:	0e 94 8e 03 	call	0x71c	; 0x71c <InitializeStart>
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d8 2f       	mov	r29, r24
  f0:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/16;
  f2:	c8 2f       	mov	r28, r24
  f4:	c2 95       	swap	r28
  f6:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 9f 01 	call	0x33e	; 0x33e <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
  fe:	8d 2f       	mov	r24, r29
 100:	6c 2f       	mov	r22, r28
 102:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__udivmodqi4>
 106:	91 11       	cpse	r25, r1
 108:	08 c0       	rjmp	.+16     	; 0x11a <NotifyCalibrationDone+0x32>
 10a:	c1 11       	cpse	r28, r1
 10c:	06 c0       	rjmp	.+12     	; 0x11a <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 10e:	21 2f       	mov	r18, r17
 110:	4d 2f       	mov	r20, r29
 112:	62 ec       	ldi	r22, 0xC2	; 194
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 c2 01 	call	0x384	; 0x384 <SendEvent>
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	08 95       	ret

00000122 <OnElevatorPositionChanged>:
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 122:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 124:	48 2f       	mov	r20, r24
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 c2 01 	call	0x384	; 0x384 <SendEvent>
 12e:	08 95       	ret

00000130 <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 130:	fc 01       	movw	r30, r24
 132:	81 81       	ldd	r24, Z+1	; 0x01
 134:	81 3c       	cpi	r24, 0xC1	; 193
 136:	29 f4       	brne	.+10     	; 0x142 <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 138:	84 e7       	ldi	r24, 0x74	; 116
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 9b 01 	call	0x336	; 0x336 <CalibrateElevatorPosition>
		return;
 140:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 142:	82 3c       	cpi	r24, 0xC2	; 194
 144:	49 f4       	brne	.+18     	; 0x158 <MotorCtrl_Initializing+0x28>
	{
		SetDisplay(Floor0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 9f 01 	call	0x33e	; 0x33e <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 14c:	6d ea       	ldi	r22, 0xAD	; 173
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SetState>
 158:	08 95       	ret

0000015a <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 15e:	fc 01       	movw	r30, r24
 160:	21 81       	ldd	r18, Z+1	; 0x01
 162:	21 30       	cpi	r18, 0x01	; 1
 164:	91 f4       	brne	.+36     	; 0x18a <MotorCtrl_Stopped+0x30>
 166:	82 81       	ldd	r24, Z+2	; 0x02
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	78 f4       	brcc	.+30     	; 0x18a <MotorCtrl_Stopped+0x30>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 16c:	c0 e6       	ldi	r28, 0x60	; 96
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 172:	68 ec       	ldi	r22, 0xC8	; 200
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	ce 01       	movw	r24, r28
 178:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 17c:	8e 81       	ldd	r24, Y+6	; 0x06
 17e:	61 e9       	ldi	r22, 0x91	; 145
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	0e 94 87 01 	call	0x30e	; 0x30e <MoveElevator>
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <MotorCtrl_Moving>:


void MotorCtrl_Moving(Message* msg)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 194:	fc 01       	movw	r30, r24
 196:	21 81       	ldd	r18, Z+1	; 0x01
 198:	22 30       	cpi	r18, 0x02	; 2
 19a:	a1 f4       	brne	.+40     	; 0x1c4 <MotorCtrl_Moving+0x34>
 19c:	22 81       	ldd	r18, Z+2	; 0x02
 19e:	33 81       	ldd	r19, Z+3	; 0x03
 1a0:	23 13       	cpse	r18, r19
 1a2:	10 c0       	rjmp	.+32     	; 0x1c4 <MotorCtrl_Moving+0x34>
 1a4:	ec 01       	movw	r28, r24
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 1a6:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
		Usart_PutChar('t');
 1aa:	84 e7       	ldi	r24, 0x74	; 116
 1ac:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
		SetDoorState(DoorOpen, msg->MsgParamLow);
 1b0:	6a 81       	ldd	r22, Y+2	; 0x02
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SetDoorState>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 1b8:	6d ea       	ldi	r22, 0xAD	; 173
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e6       	ldi	r24, 0x60	; 96
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SetState>
	}	
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <EnterAtomic>:
 1ca:	f8 94       	cli
 1cc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1d6:	08 95       	ret

000001d8 <LeaveAtomic>:
 1d8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1e2:	81 11       	cpse	r24, r1
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <LeaveAtomic+0x10>
 1e6:	78 94       	sei
 1e8:	08 95       	ret

000001ea <SetState>:
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	8b 01       	movw	r16, r22
 1f6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EnterAtomic>
 1fa:	1c 83       	std	Y+4, r17	; 0x04
 1fc:	0b 83       	std	Y+3, r16	; 0x03
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <LeaveAtomic>

0000020a <RegisterFsm>:
 20a:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <anchor>
 20e:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <anchor+0x1>
 212:	a7 e6       	ldi	r26, 0x67	; 103
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	e7 36       	cpi	r30, 0x67	; 103
 21a:	f2 07       	cpc	r31, r18
 21c:	29 f0       	breq	.+10     	; 0x228 <RegisterFsm+0x1e>
 21e:	df 01       	movw	r26, r30
 220:	01 90       	ld	r0, Z+
 222:	f0 81       	ld	r31, Z
 224:	e0 2d       	mov	r30, r0
 226:	f7 cf       	rjmp	.-18     	; 0x216 <RegisterFsm+0xc>
 228:	8d 93       	st	X+, r24
 22a:	9c 93       	st	X, r25
 22c:	dc 01       	movw	r26, r24
 22e:	ed 93       	st	X+, r30
 230:	fc 93       	st	X, r31
 232:	08 95       	ret

00000234 <DispatchEvent>:
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EnterAtomic>
 240:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <msgQ_out>
 244:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 248:	98 17       	cp	r25, r24
 24a:	59 f0       	breq	.+22     	; 0x262 <DispatchEvent+0x2e>
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	98 9f       	mul	r25, r24
 250:	e0 01       	movw	r28, r0
 252:	11 24       	eor	r1, r1
 254:	cf 55       	subi	r28, 0x5F	; 95
 256:	df 4f       	sbci	r29, 0xFF	; 255
 258:	9f 5f       	subi	r25, 0xFF	; 255
 25a:	9f 71       	andi	r25, 0x1F	; 31
 25c:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <msgQ_out>
 260:	02 c0       	rjmp	.+4      	; 0x266 <DispatchEvent+0x32>
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LeaveAtomic>
 26a:	20 97       	sbiw	r28, 0x00	; 0
 26c:	c9 f0       	breq	.+50     	; 0x2a0 <DispatchEvent+0x6c>
 26e:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <anchor>
 272:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <anchor+0x1>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	07 36       	cpi	r16, 0x67	; 103
 27a:	1f 07       	cpc	r17, r31
 27c:	89 f0       	breq	.+34     	; 0x2a0 <DispatchEvent+0x6c>
 27e:	d8 01       	movw	r26, r16
 280:	12 96       	adiw	r26, 0x02	; 2
 282:	9c 91       	ld	r25, X
 284:	12 97       	sbiw	r26, 0x02	; 2
 286:	88 81       	ld	r24, Y
 288:	89 23       	and	r24, r25
 28a:	31 f0       	breq	.+12     	; 0x298 <DispatchEvent+0x64>
 28c:	13 96       	adiw	r26, 0x03	; 3
 28e:	ed 91       	ld	r30, X+
 290:	fc 91       	ld	r31, X
 292:	14 97       	sbiw	r26, 0x04	; 4
 294:	ce 01       	movw	r24, r28
 296:	09 95       	icall
 298:	f8 01       	movw	r30, r16
 29a:	00 81       	ld	r16, Z
 29c:	11 81       	ldd	r17, Z+1	; 0x01
 29e:	eb cf       	rjmp	.-42     	; 0x276 <DispatchEvent+0x42>
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <InitializeCounter>:
 2aa:	12 be       	out	0x32, r1	; 50
 2ac:	8b e0       	ldi	r24, 0x0B	; 11
 2ae:	83 bf       	out	0x33, r24	; 51
 2b0:	8d e7       	ldi	r24, 0x7D	; 125
 2b2:	8c bf       	out	0x3c, r24	; 60
 2b4:	89 b7       	in	r24, 0x39	; 57
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	89 bf       	out	0x39, r24	; 57
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	9b bd       	out	0x2b, r25	; 43
 2c0:	8a bd       	out	0x2a, r24	; 42
 2c2:	1d bc       	out	0x2d, r1	; 45
 2c4:	1c bc       	out	0x2c, r1	; 44
 2c6:	1f bc       	out	0x2f, r1	; 47
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	8e bd       	out	0x2e, r24	; 46
 2cc:	89 b7       	in	r24, 0x39	; 57
 2ce:	80 61       	ori	r24, 0x10	; 16
 2d0:	89 bf       	out	0x39, r24	; 57
 2d2:	08 95       	ret

000002d4 <SetDoorState>:
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	d8 2f       	mov	r29, r24
 2da:	c6 2f       	mov	r28, r22
 2dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EnterAtomic>
 2e0:	6c 2f       	mov	r22, r28
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	8d 2f       	mov	r24, r29
 2e6:	80 73       	andi	r24, 0x30	; 48
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	fb 01       	movw	r30, r22
 2ee:	ea 59       	subi	r30, 0x9A	; 154
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	90 81       	ld	r25, Z
 2f4:	98 23       	and	r25, r24
 2f6:	11 f4       	brne	.+4      	; 0x2fc <SetDoorState+0x28>
 2f8:	94 e0       	ldi	r25, 0x04	; 4
 2fa:	91 83       	std	Z+1, r25	; 0x01
 2fc:	fb 01       	movw	r30, r22
 2fe:	ea 59       	subi	r30, 0x9A	; 154
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	81 60       	ori	r24, 0x01	; 1
 304:	80 83       	st	Z, r24
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <LeaveAtomic>

0000030e <MoveElevator>:
 30e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 312:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Elevator+0x4>
 316:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Elevator+0x6>
 31a:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Elevator+0x5>
 31e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 322:	98 17       	cp	r25, r24
 324:	10 f4       	brcc	.+4      	; 0x32a <MoveElevator+0x1c>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	03 c0       	rjmp	.+6      	; 0x330 <MoveElevator+0x22>
 32a:	89 17       	cp	r24, r25
 32c:	18 f4       	brcc	.+6      	; 0x334 <MoveElevator+0x26>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Elevator+0x4>
 334:	08 95       	ret

00000336 <CalibrateElevatorPosition>:
 336:	bc 01       	movw	r22, r24
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0c 94 87 01 	jmp	0x30e	; 0x30e <MoveElevator>

0000033e <SetDisplay>:
 33e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <liftDisplay7Seg>
 342:	08 95       	ret

00000344 <RegisterTestHandler>:
 344:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_testHandler+0x1>
 348:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_testHandler>
 34c:	08 95       	ret

0000034e <Usart_Init>:
 34e:	10 bc       	out	0x20, r1	; 32
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	89 b9       	out	0x09, r24	; 9
 354:	86 e8       	ldi	r24, 0x86	; 134
 356:	80 bd       	out	0x20, r24	; 32
 358:	88 e9       	ldi	r24, 0x98	; 152
 35a:	8a b9       	out	0x0a, r24	; 10
 35c:	78 94       	sei
 35e:	08 95       	ret

00000360 <InitializePorts>:
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	87 bb       	out	0x17, r24	; 23
 364:	84 bb       	out	0x14, r24	; 20
 366:	8a bb       	out	0x1a, r24	; 26
 368:	11 ba       	out	0x11, r1	; 17
 36a:	0e 94 a7 01 	call	0x34e	; 0x34e <Usart_Init>
 36e:	85 b7       	in	r24, 0x35	; 53
 370:	83 60       	ori	r24, 0x03	; 3
 372:	85 bf       	out	0x35, r24	; 53
 374:	8b b7       	in	r24, 0x3b	; 59
 376:	80 64       	ori	r24, 0x40	; 64
 378:	8b bf       	out	0x3b, r24	; 59
 37a:	08 95       	ret

0000037c <Usart_PutChar>:
 37c:	8c b9       	out	0x0c, r24	; 12
 37e:	5d 9b       	sbis	0x0b, 5	; 11
 380:	fe cf       	rjmp	.-4      	; 0x37e <Usart_PutChar+0x2>
 382:	08 95       	ret

00000384 <SendEvent>:
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	c8 2f       	mov	r28, r24
 38e:	06 2f       	mov	r16, r22
 390:	d4 2f       	mov	r29, r20
 392:	12 2f       	mov	r17, r18
 394:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EnterAtomic>
 398:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 39c:	e8 2f       	mov	r30, r24
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	af 01       	movw	r20, r30
 3a2:	4f 5f       	subi	r20, 0xFF	; 255
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	4f 71       	andi	r20, 0x1F	; 31
 3a8:	55 27       	eor	r21, r21
 3aa:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <msgQ_out>
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	42 17       	cp	r20, r18
 3b2:	53 07       	cpc	r21, r19
 3b4:	71 f4       	brne	.+28     	; 0x3d2 <SendEvent+0x4e>
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 3c8:	8e ed       	ldi	r24, 0xDE	; 222
 3ca:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 3ce:	8d ea       	ldi	r24, 0xAD	; 173
 3d0:	f9 cf       	rjmp	.-14     	; 0x3c4 <SendEvent+0x40>
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	ee 0f       	add	r30, r30
 3d8:	ff 1f       	adc	r31, r31
 3da:	ef 55       	subi	r30, 0x5F	; 95
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	01 83       	std	Z+1, r16	; 0x01
 3e0:	13 83       	std	Z+3, r17	; 0x03
 3e2:	d2 83       	std	Z+2, r29	; 0x02
 3e4:	c0 83       	st	Z, r28
 3e6:	8f 5f       	subi	r24, 0xFF	; 255
 3e8:	8f 71       	andi	r24, 0x1F	; 31
 3ea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <msgQ_in>
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <LeaveAtomic>

000003fa <MakeDoorStates>:
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	c6 e6       	ldi	r28, 0x66	; 102
 40a:	d1 e0       	ldi	r29, 0x01	; 1
 40c:	00 e0       	ldi	r16, 0x00	; 0
 40e:	10 e0       	ldi	r17, 0x00	; 0
 410:	ee 24       	eor	r14, r14
 412:	e3 94       	inc	r14
 414:	f1 2c       	mov	r15, r1
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	81 11       	cpse	r24, r1
 41a:	24 c0       	rjmp	.+72     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 41c:	48 81       	ld	r20, Y
 41e:	40 ff       	sbrs	r20, 0
 420:	23 c0       	rjmp	.+70     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 422:	4e 7f       	andi	r20, 0xFE	; 254
 424:	48 83       	st	Y, r20
 426:	20 2f       	mov	r18, r16
 428:	65 ec       	ldi	r22, 0xC5	; 197
 42a:	80 e1       	ldi	r24, 0x10	; 16
 42c:	0e 94 c2 01 	call	0x384	; 0x384 <SendEvent>
 430:	88 81       	ld	r24, Y
 432:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <OpenDoors>
 436:	84 ff       	sbrs	r24, 4
 438:	0a c0       	rjmp	.+20     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 43a:	97 01       	movw	r18, r14
 43c:	00 2e       	mov	r0, r16
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	22 0f       	add	r18, r18
 442:	0a 94       	dec	r0
 444:	ea f7       	brpl	.-6      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 446:	24 2b       	or	r18, r20
 448:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <OpenDoors>
 44c:	0d c0       	rjmp	.+26     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 44e:	c7 01       	movw	r24, r14
 450:	00 2e       	mov	r0, r16
 452:	01 c0       	rjmp	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 454:	88 0f       	add	r24, r24
 456:	0a 94       	dec	r0
 458:	ea f7       	brpl	.-6      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 45a:	80 95       	com	r24
 45c:	84 23       	and	r24, r20
 45e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <OpenDoors>
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	81 50       	subi	r24, 0x01	; 1
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	0f 5f       	subi	r16, 0xFF	; 255
 46a:	1f 4f       	sbci	r17, 0xFF	; 255
 46c:	22 96       	adiw	r28, 0x02	; 2
 46e:	04 30       	cpi	r16, 0x04	; 4
 470:	11 05       	cpc	r17, r1
 472:	89 f6       	brne	.-94     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	08 95       	ret

00000484 <ProcessMessage>:
 484:	db 01       	movw	r26, r22
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	b1 f5       	brne	.+108    	; 0x4f6 <ProcessMessage+0x72>
 48a:	8c 91       	ld	r24, X
 48c:	98 2f       	mov	r25, r24
 48e:	90 72       	andi	r25, 0x20	; 32
 490:	28 2f       	mov	r18, r24
 492:	20 76       	andi	r18, 0x60	; 96
 494:	d9 f1       	breq	.+118    	; 0x50c <ProcessMessage+0x88>
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	38 2f       	mov	r19, r24
 49a:	30 71       	andi	r19, 0x10	; 16
 49c:	84 ff       	sbrs	r24, 4
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	99 23       	and	r25, r25
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <ProcessMessage+0x24>
 4a4:	94 e0       	ldi	r25, 0x04	; 4
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <ProcessMessage+0x26>
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	8f 70       	andi	r24, 0x0F	; 15
 4ac:	89 0f       	add	r24, r25
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <ProcessMessage+0x34>
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <ProcessMessage+0x30>
 4bc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 4c0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 4c4:	ba 01       	movw	r22, r20
 4c6:	60 95       	com	r22
 4c8:	70 95       	com	r23
 4ca:	86 23       	and	r24, r22
 4cc:	97 23       	and	r25, r23
 4ce:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 4d2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 4d6:	33 23       	and	r19, r19
 4d8:	51 f0       	breq	.+20     	; 0x4ee <ProcessMessage+0x6a>
 4da:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 4de:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 4e2:	84 2b       	or	r24, r20
 4e4:	95 2b       	or	r25, r21
 4e6:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 4ea:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 4ee:	67 ec       	ldi	r22, 0xC7	; 199
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0c 94 c2 01 	jmp	0x384	; 0x384 <SendEvent>
 4f6:	83 30       	cpi	r24, 0x03	; 3
 4f8:	49 f4       	brne	.+18     	; 0x50c <ProcessMessage+0x88>
 4fa:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <_testHandler>
 4fe:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <_testHandler+0x1>
 502:	30 97       	sbiw	r30, 0x00	; 0
 504:	19 f0       	breq	.+6      	; 0x50c <ProcessMessage+0x88>
 506:	64 2f       	mov	r22, r20
 508:	cd 01       	movw	r24, r26
 50a:	09 94       	ijmp
 50c:	08 95       	ret

0000050e <HandleMessage>:
 50e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <msgType.1871>
 512:	91 11       	cpse	r25, r1
 514:	05 c0       	rjmp	.+10     	; 0x520 <HandleMessage+0x12>
 516:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <msgType.1871>
 51a:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <msgLen.1872>
 51e:	08 95       	ret
 520:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <msgLen.1872>
 524:	41 11       	cpse	r20, r1
 526:	04 c0       	rjmp	.+8      	; 0x530 <HandleMessage+0x22>
 528:	82 50       	subi	r24, 0x02	; 2
 52a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <msgLen.1872>
 52e:	15 c0       	rjmp	.+42     	; 0x55a <HandleMessage+0x4c>
 530:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <bufferIndex.1870>
 534:	e4 17       	cp	r30, r20
 536:	98 f4       	brcc	.+38     	; 0x55e <HandleMessage+0x50>
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	2e 0f       	add	r18, r30
 53c:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <bufferIndex.1870>
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	e2 57       	subi	r30, 0x72	; 114
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	80 83       	st	Z, r24
 548:	42 13       	cpse	r20, r18
 54a:	09 c0       	rjmp	.+18     	; 0x55e <HandleMessage+0x50>
 54c:	6e e8       	ldi	r22, 0x8E	; 142
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	89 2f       	mov	r24, r25
 552:	0e 94 42 02 	call	0x484	; 0x484 <ProcessMessage>
 556:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <msgType.1871>
 55a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <bufferIndex.1870>
 55e:	08 95       	ret

00000560 <SetInputOutput>:
 560:	cf 93       	push	r28
 562:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <outputRefreshCounter.1884>
 566:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <outputRefreshCounter.1884+0x1>
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <outputRefreshCounter.1884+0x1>
 570:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <outputRefreshCounter.1884>
 574:	83 70       	andi	r24, 0x03	; 3
 576:	99 27       	eor	r25, r25
 578:	89 2b       	or	r24, r25
 57a:	21 f5       	brne	.+72     	; 0x5c4 <SetInputOutput+0x64>
 57c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <doorRefreshCounter.1885>
 580:	8f 5f       	subi	r24, 0xFF	; 255
 582:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <doorRefreshCounter.1885>
 586:	83 70       	andi	r24, 0x03	; 3
 588:	a8 2f       	mov	r26, r24
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	aa 0f       	add	r26, r26
 58e:	bb 1f       	adc	r27, r27
 590:	aa 59       	subi	r26, 0x9A	; 154
 592:	be 4f       	sbci	r27, 0xFE	; 254
 594:	11 96       	adiw	r26, 0x01	; 1
 596:	ec 91       	ld	r30, X
 598:	11 97       	sbiw	r26, 0x01	; 1
 59a:	9c 91       	ld	r25, X
 59c:	94 ff       	sbrs	r25, 4
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <SetInputOutput+0x46>
 5a0:	94 e0       	ldi	r25, 0x04	; 4
 5a2:	9e 1b       	sub	r25, r30
 5a4:	e9 2f       	mov	r30, r25
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	ed 58       	subi	r30, 0x8D	; 141
 5aa:	ff 4f       	sbci	r31, 0xFF	; 255
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	a9 01       	movw	r20, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <SetInputOutput+0x58>
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	8a 95       	dec	r24
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <SetInputOutput+0x54>
 5bc:	ca 01       	movw	r24, r20
 5be:	90 81       	ld	r25, Z
 5c0:	89 2b       	or	r24, r25
 5c2:	85 bb       	out	0x15, r24	; 21
 5c4:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <buttonRefreshCounter.1886>
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <buttonRefreshCounter.1886>
 5ce:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <displayCache>
 5d2:	22 23       	and	r18, r18
 5d4:	01 f1       	breq	.+64     	; 0x616 <SetInputOutput+0xb6>
 5d6:	83 70       	andi	r24, 0x03	; 3
 5d8:	62 2f       	mov	r22, r18
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	40 e1       	ldi	r20, 0x10	; 16
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	08 2e       	mov	r0, r24
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <SetInputOutput+0x88>
 5e4:	44 0f       	add	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <SetInputOutput+0x84>
 5ec:	46 23       	and	r20, r22
 5ee:	57 23       	and	r21, r23
 5f0:	45 2b       	or	r20, r21
 5f2:	11 f0       	breq	.+4      	; 0x5f8 <SetInputOutput+0x98>
 5f4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <buttonLiftLed>
 5f8:	08 2e       	mov	r0, r24
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <SetInputOutput+0xa0>
 5fc:	75 95       	asr	r23
 5fe:	67 95       	ror	r22
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <SetInputOutput+0x9c>
 604:	60 fd       	sbrc	r22, 0
 606:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <buttonFloorLed>
 60a:	82 2f       	mov	r24, r18
 60c:	80 7f       	andi	r24, 0xF0	; 240
 60e:	19 f0       	breq	.+6      	; 0x616 <SetInputOutput+0xb6>
 610:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <buttonLiftLed_on>
 614:	01 c0       	rjmp	.+2      	; 0x618 <SetInputOutput+0xb8>
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	2f 70       	andi	r18, 0x0F	; 15
 61a:	19 f0       	breq	.+6      	; 0x622 <SetInputOutput+0xc2>
 61c:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <buttonFloorLed_On>
 620:	01 c0       	rjmp	.+2      	; 0x624 <SetInputOutput+0xc4>
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftPosDisplay_On>
 628:	81 11       	cpse	r24, r1
 62a:	04 c0       	rjmp	.+8      	; 0x634 <SetInputOutput+0xd4>
 62c:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Elevator>
 630:	3f 73       	andi	r19, 0x3F	; 63
 632:	01 c0       	rjmp	.+2      	; 0x636 <SetInputOutput+0xd6>
 634:	3f e3       	ldi	r19, 0x3F	; 63
 636:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <liftDisplay7Seg_On>
 63a:	81 11       	cpse	r24, r1
 63c:	03 c0       	rjmp	.+6      	; 0x644 <SetInputOutput+0xe4>
 63e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <liftDisplay7Seg>
 642:	01 c0       	rjmp	.+2      	; 0x646 <SetInputOutput+0xe6>
 644:	87 e0       	ldi	r24, 0x07	; 7
 646:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <floorDisplayPort>
 64a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <doorframe>
 64e:	60 e4       	ldi	r22, 0x40	; 64
 650:	86 9f       	mul	r24, r22
 652:	a0 01       	movw	r20, r0
 654:	11 24       	eor	r1, r1
 656:	60 e8       	ldi	r22, 0x80	; 128
 658:	96 9f       	mul	r25, r22
 65a:	c0 01       	movw	r24, r0
 65c:	11 24       	eor	r1, r1
 65e:	84 2b       	or	r24, r20
 660:	83 2b       	or	r24, r19
 662:	88 bb       	out	0x18, r24	; 24
 664:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <buttonLiftLed>
 668:	98 e0       	ldi	r25, 0x08	; 8
 66a:	89 9f       	mul	r24, r25
 66c:	a0 01       	movw	r20, r0
 66e:	11 24       	eor	r1, r1
 670:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <buttonFloorLed>
 674:	30 e2       	ldi	r19, 0x20	; 32
 676:	93 9f       	mul	r25, r19
 678:	c0 01       	movw	r24, r0
 67a:	11 24       	eor	r1, r1
 67c:	84 2b       	or	r24, r20
 67e:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <floorDisplayPort>
 682:	38 2b       	or	r19, r24
 684:	40 e8       	ldi	r20, 0x80	; 128
 686:	24 9f       	mul	r18, r20
 688:	c0 01       	movw	r24, r0
 68a:	11 24       	eor	r1, r1
 68c:	83 2b       	or	r24, r19
 68e:	8b bb       	out	0x1b, r24	; 27
 690:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <USART_rxBufferOut>
 694:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 698:	98 17       	cp	r25, r24
 69a:	b9 f0       	breq	.+46     	; 0x6ca <SetInputOutput+0x16a>
 69c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EnterAtomic>
 6a0:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <USART_rxBufferOut>
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	8e 0f       	add	r24, r30
 6a8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	ea 5b       	subi	r30, 0xBA	; 186
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	c0 81       	ld	r28, Z
 6b4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USART_rxBufferOut>
 6b8:	8f 71       	andi	r24, 0x1F	; 31
 6ba:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 6be:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LeaveAtomic>
 6c2:	8c 2f       	mov	r24, r28
 6c4:	0e 94 87 02 	call	0x50e	; 0x50e <HandleMessage>
 6c8:	e3 cf       	rjmp	.-58     	; 0x690 <SetInputOutput+0x130>
 6ca:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <terminalRefreshCounter.1887>
 6ce:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <terminalRefreshCounter.1887+0x1>
 6d2:	9c 01       	movw	r18, r24
 6d4:	2f 5f       	subi	r18, 0xFF	; 255
 6d6:	3f 4f       	sbci	r19, 0xFF	; 255
 6d8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <terminalRefreshCounter.1887+0x1>
 6dc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <terminalRefreshCounter.1887>
 6e0:	8f 3f       	cpi	r24, 0xFF	; 255
 6e2:	9f 40       	sbci	r25, 0x0F	; 15
 6e4:	c9 f4       	brne	.+50     	; 0x718 <SetInputOutput+0x1b8>
 6e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <EnableStatusUpdate>
 6ea:	88 23       	and	r24, r24
 6ec:	a9 f0       	breq	.+42     	; 0x718 <SetInputOutput+0x1b8>
 6ee:	84 e0       	ldi	r24, 0x04	; 4
 6f0:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 6f4:	86 e0       	ldi	r24, 0x06	; 6
 6f6:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 6fa:	85 ea       	ldi	r24, 0xA5	; 165
 6fc:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 700:	8a e5       	ldi	r24, 0x5A	; 90
 702:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 706:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <SystemState>
 70a:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 70e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <OpenDoors>
 712:	cf 91       	pop	r28
 714:	0c 94 be 01 	jmp	0x37c	; 0x37c <Usart_PutChar>
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <InitializeStart>:
 71c:	8a ec       	ldi	r24, 0xCA	; 202
 71e:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 722:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftPosDisplay_On>
 726:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <buttonLiftLed_on>
 72a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <liftDisplay7Seg_On>
 72e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <buttonFloorLed_On>
 732:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <doorframe>
 736:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <liftDoorState+0x1>
 73a:	80 e2       	ldi	r24, 0x20	; 32
 73c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <liftDoorState>
 740:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <liftDoorState+0x3>
 744:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <liftDoorState+0x2>
 748:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <liftDoorState+0x5>
 74c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <liftDoorState+0x4>
 750:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <liftDoorState+0x7>
 754:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <liftDoorState+0x6>
 758:	8f e1       	ldi	r24, 0x1F	; 31
 75a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 75e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 762:	0e 94 55 01 	call	0x2aa	; 0x2aa <InitializeCounter>
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	61 ec       	ldi	r22, 0xC1	; 193
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	0e 94 c2 01 	call	0x384	; 0x384 <SendEvent>
 772:	8e ef       	ldi	r24, 0xFE	; 254
 774:	0e 94 be 01 	call	0x37c	; 0x37c <Usart_PutChar>
 778:	0e 94 1a 01 	call	0x234	; 0x234 <DispatchEvent>
 77c:	0e 94 b0 02 	call	0x560	; 0x560 <SetInputOutput>
 780:	fb cf       	rjmp	.-10     	; 0x778 <InitializeStart+0x5c>

00000782 <__vector_1>:
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
 7a4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 7a8:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 7ac:	91 60       	ori	r25, 0x01	; 1
 7ae:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 7b2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 7b6:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <ButtonState>
 7ba:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <ButtonState+0x1>
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	69 ec       	ldi	r22, 0xC9	; 201
 7c2:	80 e1       	ldi	r24, 0x10	; 16
 7c4:	0e 94 c2 01 	call	0x384	; 0x384 <SendEvent>
 7c8:	ff 91       	pop	r31
 7ca:	ef 91       	pop	r30
 7cc:	bf 91       	pop	r27
 7ce:	af 91       	pop	r26
 7d0:	9f 91       	pop	r25
 7d2:	8f 91       	pop	r24
 7d4:	7f 91       	pop	r23
 7d6:	6f 91       	pop	r22
 7d8:	5f 91       	pop	r21
 7da:	4f 91       	pop	r20
 7dc:	3f 91       	pop	r19
 7de:	2f 91       	pop	r18
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <__vector_13>:
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	2f 93       	push	r18
 7f6:	3f 93       	push	r19
 7f8:	8f 93       	push	r24
 7fa:	9f 93       	push	r25
 7fc:	ef 93       	push	r30
 7fe:	ff 93       	push	r31
 800:	5f 9b       	sbis	0x0b, 7	; 11
 802:	1e c0       	rjmp	.+60     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 804:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 808:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USART_rxBufferOut>
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	8f 71       	andi	r24, 0x1F	; 31
 812:	99 27       	eor	r25, r25
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	82 17       	cp	r24, r18
 818:	93 07       	cpc	r25, r19
 81a:	89 f0       	breq	.+34     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 81c:	8c b1       	in	r24, 0x0c	; 12
 81e:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <USART_rxBufferIn>
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	9e 0f       	add	r25, r30
 826:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <USART_rxBufferIn>
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	ea 5b       	subi	r30, 0xBA	; 186
 82e:	fe 4f       	sbci	r31, 0xFE	; 254
 830:	80 83       	st	Z, r24
 832:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 836:	8f 71       	andi	r24, 0x1F	; 31
 838:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <USART_rxBufferIn>
 83c:	e1 cf       	rjmp	.-62     	; 0x800 <__DATA_REGION_LENGTH__>
 83e:	57 98       	cbi	0x0a, 7	; 10
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	9f 91       	pop	r25
 846:	8f 91       	pop	r24
 848:	3f 91       	pop	r19
 84a:	2f 91       	pop	r18
 84c:	0f 90       	pop	r0
 84e:	0f be       	out	0x3f, r0	; 63
 850:	0f 90       	pop	r0
 852:	1f 90       	pop	r1
 854:	18 95       	reti

00000856 <__vector_7>:
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	2f 93       	push	r18
 862:	3f 93       	push	r19
 864:	4f 93       	push	r20
 866:	5f 93       	push	r21
 868:	6f 93       	push	r22
 86a:	7f 93       	push	r23
 86c:	8f 93       	push	r24
 86e:	9f 93       	push	r25
 870:	af 93       	push	r26
 872:	bf 93       	push	r27
 874:	ef 93       	push	r30
 876:	ff 93       	push	r31
 878:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <ElevatorTick.1962>
 87c:	8f 5f       	subi	r24, 0xFF	; 255
 87e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ElevatorTick.1962>
 882:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__data_end>
 886:	9f 5f       	subi	r25, 0xFF	; 255
 888:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__data_end>
 88c:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Elevator+0x2>
 890:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__udivmodqi4>
 894:	91 11       	cpse	r25, r1
 896:	14 c0       	rjmp	.+40     	; 0x8c0 <__stack+0x61>
 898:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 89c:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Elevator+0x1>
 8a0:	96 17       	cp	r25, r22
 8a2:	61 f0       	breq	.+24     	; 0x8bc <__stack+0x5d>
 8a4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Elevator+0x4>
 8a8:	89 0f       	add	r24, r25
 8aa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 8ae:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Elevator+0x5>
 8b2:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Elevator+0x6>
 8b6:	30 97       	sbiw	r30, 0x00	; 0
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__stack+0x5d>
 8ba:	09 95       	icall
 8bc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <ElevatorTick.1962>
 8c0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 8c4:	6c e0       	ldi	r22, 0x0C	; 12
 8c6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__udivmodqi4>
 8ca:	91 11       	cpse	r25, r1
 8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
 8ce:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 8d2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <MakeDoorStates>
 8d6:	ff 91       	pop	r31
 8d8:	ef 91       	pop	r30
 8da:	bf 91       	pop	r27
 8dc:	af 91       	pop	r26
 8de:	9f 91       	pop	r25
 8e0:	8f 91       	pop	r24
 8e2:	7f 91       	pop	r23
 8e4:	6f 91       	pop	r22
 8e6:	5f 91       	pop	r21
 8e8:	4f 91       	pop	r20
 8ea:	3f 91       	pop	r19
 8ec:	2f 91       	pop	r18
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <__vector_10>:
 8f8:	1f 92       	push	r1
 8fa:	0f 92       	push	r0
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	0f 92       	push	r0
 900:	11 24       	eor	r1, r1
 902:	cf 92       	push	r12
 904:	df 92       	push	r13
 906:	ff 92       	push	r15
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	2f 93       	push	r18
 90e:	3f 93       	push	r19
 910:	4f 93       	push	r20
 912:	5f 93       	push	r21
 914:	6f 93       	push	r22
 916:	7f 93       	push	r23
 918:	8f 93       	push	r24
 91a:	9f 93       	push	r25
 91c:	af 93       	push	r26
 91e:	bf 93       	push	r27
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	ef 93       	push	r30
 926:	ff 93       	push	r31
 928:	03 e3       	ldi	r16, 0x33	; 51
 92a:	11 e0       	ldi	r17, 0x01	; 1
 92c:	c0 e0       	ldi	r28, 0x00	; 0
 92e:	d0 e0       	ldi	r29, 0x00	; 0
 930:	cc 24       	eor	r12, r12
 932:	c3 94       	inc	r12
 934:	d1 2c       	mov	r13, r1
 936:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <UsedTimers>
 93a:	8f 2d       	mov	r24, r15
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0c 2e       	mov	r0, r28
 940:	02 c0       	rjmp	.+4      	; 0x946 <__vector_10+0x4e>
 942:	95 95       	asr	r25
 944:	87 95       	ror	r24
 946:	0a 94       	dec	r0
 948:	e2 f7       	brpl	.-8      	; 0x942 <__vector_10+0x4a>
 94a:	80 ff       	sbrs	r24, 0
 94c:	18 c0       	rjmp	.+48     	; 0x97e <__vector_10+0x86>
 94e:	f8 01       	movw	r30, r16
 950:	80 81       	ld	r24, Z
 952:	91 81       	ldd	r25, Z+1	; 0x01
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	91 83       	std	Z+1, r25	; 0x01
 958:	80 83       	st	Z, r24
 95a:	89 2b       	or	r24, r25
 95c:	81 f4       	brne	.+32     	; 0x97e <__vector_10+0x86>
 95e:	20 e0       	ldi	r18, 0x00	; 0
 960:	40 e0       	ldi	r20, 0x00	; 0
 962:	68 ec       	ldi	r22, 0xC8	; 200
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	0e 94 c2 01 	call	0x384	; 0x384 <SendEvent>
 96a:	c6 01       	movw	r24, r12
 96c:	0c 2e       	mov	r0, r28
 96e:	01 c0       	rjmp	.+2      	; 0x972 <__vector_10+0x7a>
 970:	88 0f       	add	r24, r24
 972:	0a 94       	dec	r0
 974:	ea f7       	brpl	.-6      	; 0x970 <__vector_10+0x78>
 976:	80 95       	com	r24
 978:	f8 22       	and	r15, r24
 97a:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <UsedTimers>
 97e:	21 96       	adiw	r28, 0x01	; 1
 980:	0e 5f       	subi	r16, 0xFE	; 254
 982:	1f 4f       	sbci	r17, 0xFF	; 255
 984:	c8 30       	cpi	r28, 0x08	; 8
 986:	d1 05       	cpc	r29, r1
 988:	b1 f6       	brne	.-84     	; 0x936 <__vector_10+0x3e>
 98a:	ff 91       	pop	r31
 98c:	ef 91       	pop	r30
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	bf 91       	pop	r27
 994:	af 91       	pop	r26
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	7f 91       	pop	r23
 99c:	6f 91       	pop	r22
 99e:	5f 91       	pop	r21
 9a0:	4f 91       	pop	r20
 9a2:	3f 91       	pop	r19
 9a4:	2f 91       	pop	r18
 9a6:	1f 91       	pop	r17
 9a8:	0f 91       	pop	r16
 9aa:	ff 90       	pop	r15
 9ac:	df 90       	pop	r13
 9ae:	cf 90       	pop	r12
 9b0:	0f 90       	pop	r0
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	0f 90       	pop	r0
 9b6:	1f 90       	pop	r1
 9b8:	18 95       	reti

000009ba <__udivmodqi4>:
 9ba:	99 1b       	sub	r25, r25
 9bc:	79 e0       	ldi	r23, 0x09	; 9
 9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__udivmodqi4_ep>

000009c0 <__udivmodqi4_loop>:
 9c0:	99 1f       	adc	r25, r25
 9c2:	96 17       	cp	r25, r22
 9c4:	08 f0       	brcs	.+2      	; 0x9c8 <__udivmodqi4_ep>
 9c6:	96 1b       	sub	r25, r22

000009c8 <__udivmodqi4_ep>:
 9c8:	88 1f       	adc	r24, r24
 9ca:	7a 95       	dec	r23
 9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__udivmodqi4_loop>
 9ce:	80 95       	com	r24
 9d0:	08 95       	ret

000009d2 <_exit>:
 9d2:	f8 94       	cli

000009d4 <__stop_program>:
 9d4:	ff cf       	rjmp	.-2      	; 0x9d4 <__stop_program>
