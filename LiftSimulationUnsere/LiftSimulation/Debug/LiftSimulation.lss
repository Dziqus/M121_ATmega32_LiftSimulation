
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000098a  00000a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800086  00800086  00000a44  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f09  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bba  00000000  00000000  00002b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf7  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  0000432c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ecb  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000116a  00000000  00000000  000056a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006811  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 c3 04 	jmp	0x986	; 0x986 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
  98:	90 81       	ld	r25, Z
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	49 f4       	brne	.+18     	; 0xb0 <TestFunction+0x1e>
  9e:	c9 e7       	ldi	r28, 0x79	; 121
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
  a4:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <TestFunction+0x12>
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	31 f4       	brne	.+12     	; 0xc0 <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	41 81       	ldd	r20, Z+1	; 0x01
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	0e 94 9c 01 	call	0x338	; 0x338 <SendEvent>
	}
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <main>:
void TestFunction(uint8_t* data, uint8_t nrOfBytes);
uint8_t FindBit(uint8_t ch);

int main(void)
{
    InitializePorts();
  c6:	0e 94 8a 01 	call	0x314	; 0x314 <InitializePorts>
	Usart_Init();
  ca:	0e 94 81 01 	call	0x302	; 0x302 <Usart_Init>
	RegisterTestHandler( TestFunction );
  ce:	89 e4       	ldi	r24, 0x49	; 73
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  de:	0e 94 68 03 	call	0x6d0	; 0x6d0 <InitializeStart>
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d8 2f       	mov	r29, r24
  f0:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/16;
  f2:	c8 2f       	mov	r28, r24
  f4:	c2 95       	swap	r28
  f6:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
  fe:	8d 2f       	mov	r24, r29
 100:	6c 2f       	mov	r22, r28
 102:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodqi4>
 106:	91 11       	cpse	r25, r1
 108:	08 c0       	rjmp	.+16     	; 0x11a <NotifyCalibrationDone+0x32>
 10a:	c1 11       	cpse	r28, r1
 10c:	06 c0       	rjmp	.+12     	; 0x11a <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 10e:	21 2f       	mov	r18, r17
 110:	4d 2f       	mov	r20, r29
 112:	62 ec       	ldi	r22, 0xC2	; 194
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 9c 01 	call	0x338	; 0x338 <SendEvent>
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	08 95       	ret

00000122 <OnElevatorPositionChanged>:
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 122:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 124:	48 2f       	mov	r20, r24
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 9c 01 	call	0x338	; 0x338 <SendEvent>
 12e:	08 95       	ret

00000130 <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 130:	fc 01       	movw	r30, r24
 132:	81 81       	ldd	r24, Z+1	; 0x01
 134:	81 3c       	cpi	r24, 0xC1	; 193
 136:	29 f4       	brne	.+10     	; 0x142 <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 138:	84 e7       	ldi	r24, 0x74	; 116
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 75 01 	call	0x2ea	; 0x2ea <CalibrateElevatorPosition>
		return;
 140:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 142:	82 3c       	cpi	r24, 0xC2	; 194
 144:	49 f4       	brne	.+18     	; 0x158 <MotorCtrl_Initializing+0x28>
	{
		SetDisplay(Floor0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 79 01 	call	0x2f2	; 0x2f2 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 14c:	6e eb       	ldi	r22, 0xBE	; 190
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SetState>
 158:	08 95       	ret

0000015a <MotorCtrl_Moving>:
}


void MotorCtrl_Moving(Message* msg)
{
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 15a:	fc 01       	movw	r30, r24
 15c:	21 81       	ldd	r18, Z+1	; 0x01
 15e:	22 30       	cpi	r18, 0x02	; 2
 160:	61 f4       	brne	.+24     	; 0x17a <MotorCtrl_Moving+0x20>
 162:	22 81       	ldd	r18, Z+2	; 0x02
 164:	83 81       	ldd	r24, Z+3	; 0x03
 166:	28 13       	cpse	r18, r24
 168:	08 c0       	rjmp	.+16     	; 0x17a <MotorCtrl_Moving+0x20>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 16a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 16e:	6e eb       	ldi	r22, 0xBE	; 190
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SetState>
 17a:	08 95       	ret

0000017c <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 180:	fc 01       	movw	r30, r24
 182:	21 81       	ldd	r18, Z+1	; 0x01
 184:	21 30       	cpi	r18, 0x01	; 1
 186:	a9 f4       	brne	.+42     	; 0x1b2 <MotorCtrl_Stopped+0x36>
 188:	82 81       	ldd	r24, Z+2	; 0x02
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	90 f4       	brcc	.+36     	; 0x1b2 <MotorCtrl_Stopped+0x36>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 18e:	c0 e6       	ldi	r28, 0x60	; 96
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	8e 83       	std	Y+6, r24	; 0x06
		Usart_PutChar('t');
 194:	84 e7       	ldi	r24, 0x74	; 116
 196:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 19a:	6d ea       	ldi	r22, 0xAD	; 173
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	ce 01       	movw	r24, r28
 1a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 1a4:	8e 81       	ldd	r24, Y+6	; 0x06
 1a6:	61 e9       	ldi	r22, 0x91	; 145
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	82 95       	swap	r24
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	0e 94 61 01 	call	0x2c2	; 0x2c2 <MoveElevator>
	}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <EnterAtomic>:
 1b8:	f8 94       	cli
 1ba:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1c4:	08 95       	ret

000001c6 <LeaveAtomic>:
 1c6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1d0:	81 11       	cpse	r24, r1
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <LeaveAtomic+0x10>
 1d4:	78 94       	sei
 1d6:	08 95       	ret

000001d8 <SetState>:
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
 1e2:	8b 01       	movw	r16, r22
 1e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <EnterAtomic>
 1e8:	1c 83       	std	Y+4, r17	; 0x04
 1ea:	0b 83       	std	Y+3, r16	; 0x03
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <LeaveAtomic>

000001f8 <RegisterFsm>:
 1f8:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <anchor>
 1fc:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <anchor+0x1>
 200:	a7 e6       	ldi	r26, 0x67	; 103
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	e7 36       	cpi	r30, 0x67	; 103
 208:	f2 07       	cpc	r31, r18
 20a:	29 f0       	breq	.+10     	; 0x216 <RegisterFsm+0x1e>
 20c:	df 01       	movw	r26, r30
 20e:	01 90       	ld	r0, Z+
 210:	f0 81       	ld	r31, Z
 212:	e0 2d       	mov	r30, r0
 214:	f7 cf       	rjmp	.-18     	; 0x204 <RegisterFsm+0xc>
 216:	8d 93       	st	X+, r24
 218:	9c 93       	st	X, r25
 21a:	dc 01       	movw	r26, r24
 21c:	ed 93       	st	X+, r30
 21e:	fc 93       	st	X, r31
 220:	08 95       	ret

00000222 <DispatchEvent>:
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <EnterAtomic>
 22e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <msgQ_out>
 232:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 236:	98 17       	cp	r25, r24
 238:	59 f0       	breq	.+22     	; 0x250 <DispatchEvent+0x2e>
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	98 9f       	mul	r25, r24
 23e:	e0 01       	movw	r28, r0
 240:	11 24       	eor	r1, r1
 242:	cf 55       	subi	r28, 0x5F	; 95
 244:	df 4f       	sbci	r29, 0xFF	; 255
 246:	9f 5f       	subi	r25, 0xFF	; 255
 248:	9f 71       	andi	r25, 0x1F	; 31
 24a:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <msgQ_out>
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DispatchEvent+0x32>
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	d0 e0       	ldi	r29, 0x00	; 0
 254:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LeaveAtomic>
 258:	20 97       	sbiw	r28, 0x00	; 0
 25a:	c9 f0       	breq	.+50     	; 0x28e <DispatchEvent+0x6c>
 25c:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <anchor>
 260:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <anchor+0x1>
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	07 36       	cpi	r16, 0x67	; 103
 268:	1f 07       	cpc	r17, r31
 26a:	89 f0       	breq	.+34     	; 0x28e <DispatchEvent+0x6c>
 26c:	d8 01       	movw	r26, r16
 26e:	12 96       	adiw	r26, 0x02	; 2
 270:	9c 91       	ld	r25, X
 272:	12 97       	sbiw	r26, 0x02	; 2
 274:	88 81       	ld	r24, Y
 276:	89 23       	and	r24, r25
 278:	31 f0       	breq	.+12     	; 0x286 <DispatchEvent+0x64>
 27a:	13 96       	adiw	r26, 0x03	; 3
 27c:	ed 91       	ld	r30, X+
 27e:	fc 91       	ld	r31, X
 280:	14 97       	sbiw	r26, 0x04	; 4
 282:	ce 01       	movw	r24, r28
 284:	09 95       	icall
 286:	f8 01       	movw	r30, r16
 288:	00 81       	ld	r16, Z
 28a:	11 81       	ldd	r17, Z+1	; 0x01
 28c:	eb cf       	rjmp	.-42     	; 0x264 <DispatchEvent+0x42>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <InitializeCounter>:
 298:	12 be       	out	0x32, r1	; 50
 29a:	8b e0       	ldi	r24, 0x0B	; 11
 29c:	83 bf       	out	0x33, r24	; 51
 29e:	8d e7       	ldi	r24, 0x7D	; 125
 2a0:	8c bf       	out	0x3c, r24	; 60
 2a2:	89 b7       	in	r24, 0x39	; 57
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	89 bf       	out	0x39, r24	; 57
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	9b bd       	out	0x2b, r25	; 43
 2ae:	8a bd       	out	0x2a, r24	; 42
 2b0:	1d bc       	out	0x2d, r1	; 45
 2b2:	1c bc       	out	0x2c, r1	; 44
 2b4:	1f bc       	out	0x2f, r1	; 47
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	8e bd       	out	0x2e, r24	; 46
 2ba:	89 b7       	in	r24, 0x39	; 57
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	89 bf       	out	0x39, r24	; 57
 2c0:	08 95       	ret

000002c2 <MoveElevator>:
 2c2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 2c6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Elevator+0x4>
 2ca:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Elevator+0x6>
 2ce:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Elevator+0x5>
 2d2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 2d6:	98 17       	cp	r25, r24
 2d8:	10 f4       	brcc	.+4      	; 0x2de <MoveElevator+0x1c>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <MoveElevator+0x22>
 2de:	89 17       	cp	r24, r25
 2e0:	18 f4       	brcc	.+6      	; 0x2e8 <MoveElevator+0x26>
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Elevator+0x4>
 2e8:	08 95       	ret

000002ea <CalibrateElevatorPosition>:
 2ea:	bc 01       	movw	r22, r24
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <MoveElevator>

000002f2 <SetDisplay>:
 2f2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <liftDisplay7Seg>
 2f6:	08 95       	ret

000002f8 <RegisterTestHandler>:
 2f8:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_testHandler+0x1>
 2fc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_testHandler>
 300:	08 95       	ret

00000302 <Usart_Init>:
 302:	10 bc       	out	0x20, r1	; 32
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	89 b9       	out	0x09, r24	; 9
 308:	86 e8       	ldi	r24, 0x86	; 134
 30a:	80 bd       	out	0x20, r24	; 32
 30c:	88 e9       	ldi	r24, 0x98	; 152
 30e:	8a b9       	out	0x0a, r24	; 10
 310:	78 94       	sei
 312:	08 95       	ret

00000314 <InitializePorts>:
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	87 bb       	out	0x17, r24	; 23
 318:	84 bb       	out	0x14, r24	; 20
 31a:	8a bb       	out	0x1a, r24	; 26
 31c:	11 ba       	out	0x11, r1	; 17
 31e:	0e 94 81 01 	call	0x302	; 0x302 <Usart_Init>
 322:	85 b7       	in	r24, 0x35	; 53
 324:	83 60       	ori	r24, 0x03	; 3
 326:	85 bf       	out	0x35, r24	; 53
 328:	8b b7       	in	r24, 0x3b	; 59
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	8b bf       	out	0x3b, r24	; 59
 32e:	08 95       	ret

00000330 <Usart_PutChar>:
 330:	8c b9       	out	0x0c, r24	; 12
 332:	5d 9b       	sbis	0x0b, 5	; 11
 334:	fe cf       	rjmp	.-4      	; 0x332 <Usart_PutChar+0x2>
 336:	08 95       	ret

00000338 <SendEvent>:
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	c8 2f       	mov	r28, r24
 342:	06 2f       	mov	r16, r22
 344:	d4 2f       	mov	r29, r20
 346:	12 2f       	mov	r17, r18
 348:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <EnterAtomic>
 34c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 350:	e8 2f       	mov	r30, r24
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	af 01       	movw	r20, r30
 356:	4f 5f       	subi	r20, 0xFF	; 255
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	4f 71       	andi	r20, 0x1F	; 31
 35c:	55 27       	eor	r21, r21
 35e:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <msgQ_out>
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	42 17       	cp	r20, r18
 366:	53 07       	cpc	r21, r19
 368:	71 f4       	brne	.+28     	; 0x386 <SendEvent+0x4e>
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 37c:	8e ed       	ldi	r24, 0xDE	; 222
 37e:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 382:	8d ea       	ldi	r24, 0xAD	; 173
 384:	f9 cf       	rjmp	.-14     	; 0x378 <SendEvent+0x40>
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	ef 55       	subi	r30, 0x5F	; 95
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	01 83       	std	Z+1, r16	; 0x01
 394:	13 83       	std	Z+3, r17	; 0x03
 396:	d2 83       	std	Z+2, r29	; 0x02
 398:	c0 83       	st	Z, r28
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	8f 71       	andi	r24, 0x1F	; 31
 39e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <msgQ_in>
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <LeaveAtomic>

000003ae <MakeDoorStates>:
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	c6 e6       	ldi	r28, 0x66	; 102
 3be:	d1 e0       	ldi	r29, 0x01	; 1
 3c0:	00 e0       	ldi	r16, 0x00	; 0
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	ee 24       	eor	r14, r14
 3c6:	e3 94       	inc	r14
 3c8:	f1 2c       	mov	r15, r1
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	81 11       	cpse	r24, r1
 3ce:	24 c0       	rjmp	.+72     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3d0:	48 81       	ld	r20, Y
 3d2:	40 ff       	sbrs	r20, 0
 3d4:	23 c0       	rjmp	.+70     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3d6:	4e 7f       	andi	r20, 0xFE	; 254
 3d8:	48 83       	st	Y, r20
 3da:	20 2f       	mov	r18, r16
 3dc:	65 ec       	ldi	r22, 0xC5	; 197
 3de:	80 e1       	ldi	r24, 0x10	; 16
 3e0:	0e 94 9c 01 	call	0x338	; 0x338 <SendEvent>
 3e4:	88 81       	ld	r24, Y
 3e6:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <OpenDoors>
 3ea:	84 ff       	sbrs	r24, 4
 3ec:	0a c0       	rjmp	.+20     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3ee:	97 01       	movw	r18, r14
 3f0:	00 2e       	mov	r0, r16
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <MakeDoorStates+0x48>
 3f4:	22 0f       	add	r18, r18
 3f6:	0a 94       	dec	r0
 3f8:	ea f7       	brpl	.-6      	; 0x3f4 <MakeDoorStates+0x46>
 3fa:	24 2b       	or	r18, r20
 3fc:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <OpenDoors>
 400:	0d c0       	rjmp	.+26     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 402:	c7 01       	movw	r24, r14
 404:	00 2e       	mov	r0, r16
 406:	01 c0       	rjmp	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	88 0f       	add	r24, r24
 40a:	0a 94       	dec	r0
 40c:	ea f7       	brpl	.-6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40e:	80 95       	com	r24
 410:	84 23       	and	r24, r20
 412:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <OpenDoors>
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	81 50       	subi	r24, 0x01	; 1
 41a:	89 83       	std	Y+1, r24	; 0x01
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	22 96       	adiw	r28, 0x02	; 2
 422:	04 30       	cpi	r16, 0x04	; 4
 424:	11 05       	cpc	r17, r1
 426:	89 f6       	brne	.-94     	; 0x3ca <MakeDoorStates+0x1c>
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	df 90       	pop	r13
 436:	08 95       	ret

00000438 <ProcessMessage>:
 438:	db 01       	movw	r26, r22
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	b1 f5       	brne	.+108    	; 0x4aa <ProcessMessage+0x72>
 43e:	8c 91       	ld	r24, X
 440:	98 2f       	mov	r25, r24
 442:	90 72       	andi	r25, 0x20	; 32
 444:	28 2f       	mov	r18, r24
 446:	20 76       	andi	r18, 0x60	; 96
 448:	d9 f1       	breq	.+118    	; 0x4c0 <ProcessMessage+0x88>
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	38 2f       	mov	r19, r24
 44e:	30 71       	andi	r19, 0x10	; 16
 450:	84 ff       	sbrs	r24, 4
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	99 23       	and	r25, r25
 456:	11 f0       	breq	.+4      	; 0x45c <ProcessMessage+0x24>
 458:	94 e0       	ldi	r25, 0x04	; 4
 45a:	01 c0       	rjmp	.+2      	; 0x45e <ProcessMessage+0x26>
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	8f 70       	andi	r24, 0x0F	; 15
 460:	89 0f       	add	r24, r25
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <ProcessMessage+0x34>
 468:	44 0f       	add	r20, r20
 46a:	55 1f       	adc	r21, r21
 46c:	8a 95       	dec	r24
 46e:	e2 f7       	brpl	.-8      	; 0x468 <ProcessMessage+0x30>
 470:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 474:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 478:	ba 01       	movw	r22, r20
 47a:	60 95       	com	r22
 47c:	70 95       	com	r23
 47e:	86 23       	and	r24, r22
 480:	97 23       	and	r25, r23
 482:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 486:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 48a:	33 23       	and	r19, r19
 48c:	51 f0       	breq	.+20     	; 0x4a2 <ProcessMessage+0x6a>
 48e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 492:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 496:	84 2b       	or	r24, r20
 498:	95 2b       	or	r25, r21
 49a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 49e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 4a2:	67 ec       	ldi	r22, 0xC7	; 199
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0c 94 9c 01 	jmp	0x338	; 0x338 <SendEvent>
 4aa:	83 30       	cpi	r24, 0x03	; 3
 4ac:	49 f4       	brne	.+18     	; 0x4c0 <ProcessMessage+0x88>
 4ae:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <_testHandler>
 4b2:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <_testHandler+0x1>
 4b6:	30 97       	sbiw	r30, 0x00	; 0
 4b8:	19 f0       	breq	.+6      	; 0x4c0 <ProcessMessage+0x88>
 4ba:	64 2f       	mov	r22, r20
 4bc:	cd 01       	movw	r24, r26
 4be:	09 94       	ijmp
 4c0:	08 95       	ret

000004c2 <HandleMessage>:
 4c2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <msgType.1871>
 4c6:	91 11       	cpse	r25, r1
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <HandleMessage+0x12>
 4ca:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <msgType.1871>
 4ce:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <msgLen.1872>
 4d2:	08 95       	ret
 4d4:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <msgLen.1872>
 4d8:	41 11       	cpse	r20, r1
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <HandleMessage+0x22>
 4dc:	82 50       	subi	r24, 0x02	; 2
 4de:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <msgLen.1872>
 4e2:	15 c0       	rjmp	.+42     	; 0x50e <HandleMessage+0x4c>
 4e4:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <bufferIndex.1870>
 4e8:	e4 17       	cp	r30, r20
 4ea:	98 f4       	brcc	.+38     	; 0x512 <HandleMessage+0x50>
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	2e 0f       	add	r18, r30
 4f0:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <bufferIndex.1870>
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	e2 57       	subi	r30, 0x72	; 114
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	80 83       	st	Z, r24
 4fc:	42 13       	cpse	r20, r18
 4fe:	09 c0       	rjmp	.+18     	; 0x512 <HandleMessage+0x50>
 500:	6e e8       	ldi	r22, 0x8E	; 142
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	89 2f       	mov	r24, r25
 506:	0e 94 1c 02 	call	0x438	; 0x438 <ProcessMessage>
 50a:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <msgType.1871>
 50e:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <bufferIndex.1870>
 512:	08 95       	ret

00000514 <SetInputOutput>:
 514:	cf 93       	push	r28
 516:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <outputRefreshCounter.1884>
 51a:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <outputRefreshCounter.1884+0x1>
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <outputRefreshCounter.1884+0x1>
 524:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <outputRefreshCounter.1884>
 528:	83 70       	andi	r24, 0x03	; 3
 52a:	99 27       	eor	r25, r25
 52c:	89 2b       	or	r24, r25
 52e:	21 f5       	brne	.+72     	; 0x578 <SetInputOutput+0x64>
 530:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <doorRefreshCounter.1885>
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <doorRefreshCounter.1885>
 53a:	83 70       	andi	r24, 0x03	; 3
 53c:	a8 2f       	mov	r26, r24
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	aa 0f       	add	r26, r26
 542:	bb 1f       	adc	r27, r27
 544:	aa 59       	subi	r26, 0x9A	; 154
 546:	be 4f       	sbci	r27, 0xFE	; 254
 548:	11 96       	adiw	r26, 0x01	; 1
 54a:	ec 91       	ld	r30, X
 54c:	11 97       	sbiw	r26, 0x01	; 1
 54e:	9c 91       	ld	r25, X
 550:	94 ff       	sbrs	r25, 4
 552:	03 c0       	rjmp	.+6      	; 0x55a <SetInputOutput+0x46>
 554:	94 e0       	ldi	r25, 0x04	; 4
 556:	9e 1b       	sub	r25, r30
 558:	e9 2f       	mov	r30, r25
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ed 58       	subi	r30, 0x8D	; 141
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	a9 01       	movw	r20, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <SetInputOutput+0x58>
 568:	44 0f       	add	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	8a 95       	dec	r24
 56e:	e2 f7       	brpl	.-8      	; 0x568 <SetInputOutput+0x54>
 570:	ca 01       	movw	r24, r20
 572:	90 81       	ld	r25, Z
 574:	89 2b       	or	r24, r25
 576:	85 bb       	out	0x15, r24	; 21
 578:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <buttonRefreshCounter.1886>
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <buttonRefreshCounter.1886>
 582:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <displayCache>
 586:	22 23       	and	r18, r18
 588:	01 f1       	breq	.+64     	; 0x5ca <SetInputOutput+0xb6>
 58a:	83 70       	andi	r24, 0x03	; 3
 58c:	62 2f       	mov	r22, r18
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	40 e1       	ldi	r20, 0x10	; 16
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	08 2e       	mov	r0, r24
 596:	02 c0       	rjmp	.+4      	; 0x59c <SetInputOutput+0x88>
 598:	44 0f       	add	r20, r20
 59a:	55 1f       	adc	r21, r21
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <SetInputOutput+0x84>
 5a0:	46 23       	and	r20, r22
 5a2:	57 23       	and	r21, r23
 5a4:	45 2b       	or	r20, r21
 5a6:	11 f0       	breq	.+4      	; 0x5ac <SetInputOutput+0x98>
 5a8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <buttonLiftLed>
 5ac:	08 2e       	mov	r0, r24
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <SetInputOutput+0xa0>
 5b0:	75 95       	asr	r23
 5b2:	67 95       	ror	r22
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <SetInputOutput+0x9c>
 5b8:	60 fd       	sbrc	r22, 0
 5ba:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <buttonFloorLed>
 5be:	82 2f       	mov	r24, r18
 5c0:	80 7f       	andi	r24, 0xF0	; 240
 5c2:	19 f0       	breq	.+6      	; 0x5ca <SetInputOutput+0xb6>
 5c4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <buttonLiftLed_on>
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <SetInputOutput+0xb8>
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	2f 70       	andi	r18, 0x0F	; 15
 5ce:	19 f0       	breq	.+6      	; 0x5d6 <SetInputOutput+0xc2>
 5d0:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <buttonFloorLed_On>
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <SetInputOutput+0xc4>
 5d6:	21 e0       	ldi	r18, 0x01	; 1
 5d8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftPosDisplay_On>
 5dc:	81 11       	cpse	r24, r1
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <SetInputOutput+0xd4>
 5e0:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Elevator>
 5e4:	3f 73       	andi	r19, 0x3F	; 63
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <SetInputOutput+0xd6>
 5e8:	3f e3       	ldi	r19, 0x3F	; 63
 5ea:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <liftDisplay7Seg_On>
 5ee:	81 11       	cpse	r24, r1
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <SetInputOutput+0xe4>
 5f2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <liftDisplay7Seg>
 5f6:	01 c0       	rjmp	.+2      	; 0x5fa <SetInputOutput+0xe6>
 5f8:	87 e0       	ldi	r24, 0x07	; 7
 5fa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <floorDisplayPort>
 5fe:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <doorframe>
 602:	60 e4       	ldi	r22, 0x40	; 64
 604:	86 9f       	mul	r24, r22
 606:	a0 01       	movw	r20, r0
 608:	11 24       	eor	r1, r1
 60a:	60 e8       	ldi	r22, 0x80	; 128
 60c:	96 9f       	mul	r25, r22
 60e:	c0 01       	movw	r24, r0
 610:	11 24       	eor	r1, r1
 612:	84 2b       	or	r24, r20
 614:	83 2b       	or	r24, r19
 616:	88 bb       	out	0x18, r24	; 24
 618:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <buttonLiftLed>
 61c:	98 e0       	ldi	r25, 0x08	; 8
 61e:	89 9f       	mul	r24, r25
 620:	a0 01       	movw	r20, r0
 622:	11 24       	eor	r1, r1
 624:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <buttonFloorLed>
 628:	30 e2       	ldi	r19, 0x20	; 32
 62a:	93 9f       	mul	r25, r19
 62c:	c0 01       	movw	r24, r0
 62e:	11 24       	eor	r1, r1
 630:	84 2b       	or	r24, r20
 632:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <floorDisplayPort>
 636:	38 2b       	or	r19, r24
 638:	40 e8       	ldi	r20, 0x80	; 128
 63a:	24 9f       	mul	r18, r20
 63c:	c0 01       	movw	r24, r0
 63e:	11 24       	eor	r1, r1
 640:	83 2b       	or	r24, r19
 642:	8b bb       	out	0x1b, r24	; 27
 644:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <USART_rxBufferOut>
 648:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 64c:	98 17       	cp	r25, r24
 64e:	b9 f0       	breq	.+46     	; 0x67e <SetInputOutput+0x16a>
 650:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <EnterAtomic>
 654:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <USART_rxBufferOut>
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	8e 0f       	add	r24, r30
 65c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ea 5b       	subi	r30, 0xBA	; 186
 664:	fe 4f       	sbci	r31, 0xFE	; 254
 666:	c0 81       	ld	r28, Z
 668:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USART_rxBufferOut>
 66c:	8f 71       	andi	r24, 0x1F	; 31
 66e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 672:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LeaveAtomic>
 676:	8c 2f       	mov	r24, r28
 678:	0e 94 61 02 	call	0x4c2	; 0x4c2 <HandleMessage>
 67c:	e3 cf       	rjmp	.-58     	; 0x644 <SetInputOutput+0x130>
 67e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <terminalRefreshCounter.1887>
 682:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <terminalRefreshCounter.1887+0x1>
 686:	9c 01       	movw	r18, r24
 688:	2f 5f       	subi	r18, 0xFF	; 255
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
 68c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <terminalRefreshCounter.1887+0x1>
 690:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <terminalRefreshCounter.1887>
 694:	8f 3f       	cpi	r24, 0xFF	; 255
 696:	9f 40       	sbci	r25, 0x0F	; 15
 698:	c9 f4       	brne	.+50     	; 0x6cc <SetInputOutput+0x1b8>
 69a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <EnableStatusUpdate>
 69e:	88 23       	and	r24, r24
 6a0:	a9 f0       	breq	.+42     	; 0x6cc <SetInputOutput+0x1b8>
 6a2:	84 e0       	ldi	r24, 0x04	; 4
 6a4:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 6a8:	86 e0       	ldi	r24, 0x06	; 6
 6aa:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 6ae:	85 ea       	ldi	r24, 0xA5	; 165
 6b0:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 6b4:	8a e5       	ldi	r24, 0x5A	; 90
 6b6:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 6ba:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <SystemState>
 6be:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 6c2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <OpenDoors>
 6c6:	cf 91       	pop	r28
 6c8:	0c 94 98 01 	jmp	0x330	; 0x330 <Usart_PutChar>
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <InitializeStart>:
 6d0:	8a ec       	ldi	r24, 0xCA	; 202
 6d2:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 6d6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftPosDisplay_On>
 6da:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <buttonLiftLed_on>
 6de:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <liftDisplay7Seg_On>
 6e2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <buttonFloorLed_On>
 6e6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <doorframe>
 6ea:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <liftDoorState+0x1>
 6ee:	80 e2       	ldi	r24, 0x20	; 32
 6f0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <liftDoorState>
 6f4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <liftDoorState+0x3>
 6f8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <liftDoorState+0x2>
 6fc:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <liftDoorState+0x5>
 700:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <liftDoorState+0x4>
 704:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <liftDoorState+0x7>
 708:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <liftDoorState+0x6>
 70c:	8f e1       	ldi	r24, 0x1F	; 31
 70e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 712:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 716:	0e 94 4c 01 	call	0x298	; 0x298 <InitializeCounter>
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	40 e0       	ldi	r20, 0x00	; 0
 71e:	61 ec       	ldi	r22, 0xC1	; 193
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 9c 01 	call	0x338	; 0x338 <SendEvent>
 726:	8e ef       	ldi	r24, 0xFE	; 254
 728:	0e 94 98 01 	call	0x330	; 0x330 <Usart_PutChar>
 72c:	0e 94 11 01 	call	0x222	; 0x222 <DispatchEvent>
 730:	0e 94 8a 02 	call	0x514	; 0x514 <SetInputOutput>
 734:	fb cf       	rjmp	.-10     	; 0x72c <InitializeStart+0x5c>

00000736 <__vector_1>:
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	4f 93       	push	r20
 746:	5f 93       	push	r21
 748:	6f 93       	push	r22
 74a:	7f 93       	push	r23
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
 758:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 75c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 760:	91 60       	ori	r25, 0x01	; 1
 762:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 766:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 76a:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <ButtonState>
 76e:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <ButtonState+0x1>
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	69 ec       	ldi	r22, 0xC9	; 201
 776:	80 e1       	ldi	r24, 0x10	; 16
 778:	0e 94 9c 01 	call	0x338	; 0x338 <SendEvent>
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__vector_13>:
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	2f 93       	push	r18
 7aa:	3f 93       	push	r19
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
 7b4:	5f 9b       	sbis	0x0b, 7	; 11
 7b6:	1e c0       	rjmp	.+60     	; 0x7f4 <__vector_13+0x56>
 7b8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 7bc:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USART_rxBufferOut>
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	8f 71       	andi	r24, 0x1F	; 31
 7c6:	99 27       	eor	r25, r25
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	82 17       	cp	r24, r18
 7cc:	93 07       	cpc	r25, r19
 7ce:	89 f0       	breq	.+34     	; 0x7f2 <__vector_13+0x54>
 7d0:	8c b1       	in	r24, 0x0c	; 12
 7d2:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <USART_rxBufferIn>
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	9e 0f       	add	r25, r30
 7da:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <USART_rxBufferIn>
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	ea 5b       	subi	r30, 0xBA	; 186
 7e2:	fe 4f       	sbci	r31, 0xFE	; 254
 7e4:	80 83       	st	Z, r24
 7e6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 7ea:	8f 71       	andi	r24, 0x1F	; 31
 7ec:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <USART_rxBufferIn>
 7f0:	e1 cf       	rjmp	.-62     	; 0x7b4 <__vector_13+0x16>
 7f2:	57 98       	cbi	0x0a, 7	; 10
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	9f 91       	pop	r25
 7fa:	8f 91       	pop	r24
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <__vector_7>:
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
 82c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <ElevatorTick.1962>
 830:	8f 5f       	subi	r24, 0xFF	; 255
 832:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ElevatorTick.1962>
 836:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__data_end>
 83a:	9f 5f       	subi	r25, 0xFF	; 255
 83c:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__data_end>
 840:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Elevator+0x2>
 844:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodqi4>
 848:	91 11       	cpse	r25, r1
 84a:	14 c0       	rjmp	.+40     	; 0x874 <__stack+0x15>
 84c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 850:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Elevator+0x1>
 854:	96 17       	cp	r25, r22
 856:	61 f0       	breq	.+24     	; 0x870 <__stack+0x11>
 858:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Elevator+0x4>
 85c:	89 0f       	add	r24, r25
 85e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 862:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Elevator+0x5>
 866:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Elevator+0x6>
 86a:	30 97       	sbiw	r30, 0x00	; 0
 86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
 86e:	09 95       	icall
 870:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <ElevatorTick.1962>
 874:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 878:	6c e0       	ldi	r22, 0x0C	; 12
 87a:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodqi4>
 87e:	91 11       	cpse	r25, r1
 880:	04 c0       	rjmp	.+8      	; 0x88a <__stack+0x2b>
 882:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 886:	0e 94 d7 01 	call	0x3ae	; 0x3ae <MakeDoorStates>
 88a:	ff 91       	pop	r31
 88c:	ef 91       	pop	r30
 88e:	bf 91       	pop	r27
 890:	af 91       	pop	r26
 892:	9f 91       	pop	r25
 894:	8f 91       	pop	r24
 896:	7f 91       	pop	r23
 898:	6f 91       	pop	r22
 89a:	5f 91       	pop	r21
 89c:	4f 91       	pop	r20
 89e:	3f 91       	pop	r19
 8a0:	2f 91       	pop	r18
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <__vector_10>:
 8ac:	1f 92       	push	r1
 8ae:	0f 92       	push	r0
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	0f 92       	push	r0
 8b4:	11 24       	eor	r1, r1
 8b6:	cf 92       	push	r12
 8b8:	df 92       	push	r13
 8ba:	ff 92       	push	r15
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	2f 93       	push	r18
 8c2:	3f 93       	push	r19
 8c4:	4f 93       	push	r20
 8c6:	5f 93       	push	r21
 8c8:	6f 93       	push	r22
 8ca:	7f 93       	push	r23
 8cc:	8f 93       	push	r24
 8ce:	9f 93       	push	r25
 8d0:	af 93       	push	r26
 8d2:	bf 93       	push	r27
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	ef 93       	push	r30
 8da:	ff 93       	push	r31
 8dc:	03 e3       	ldi	r16, 0x33	; 51
 8de:	11 e0       	ldi	r17, 0x01	; 1
 8e0:	c0 e0       	ldi	r28, 0x00	; 0
 8e2:	d0 e0       	ldi	r29, 0x00	; 0
 8e4:	cc 24       	eor	r12, r12
 8e6:	c3 94       	inc	r12
 8e8:	d1 2c       	mov	r13, r1
 8ea:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <UsedTimers>
 8ee:	8f 2d       	mov	r24, r15
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0c 2e       	mov	r0, r28
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__vector_10+0x4e>
 8f6:	95 95       	asr	r25
 8f8:	87 95       	ror	r24
 8fa:	0a 94       	dec	r0
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__vector_10+0x4a>
 8fe:	80 ff       	sbrs	r24, 0
 900:	18 c0       	rjmp	.+48     	; 0x932 <__vector_10+0x86>
 902:	f8 01       	movw	r30, r16
 904:	80 81       	ld	r24, Z
 906:	91 81       	ldd	r25, Z+1	; 0x01
 908:	01 97       	sbiw	r24, 0x01	; 1
 90a:	91 83       	std	Z+1, r25	; 0x01
 90c:	80 83       	st	Z, r24
 90e:	89 2b       	or	r24, r25
 910:	81 f4       	brne	.+32     	; 0x932 <__vector_10+0x86>
 912:	20 e0       	ldi	r18, 0x00	; 0
 914:	40 e0       	ldi	r20, 0x00	; 0
 916:	68 ec       	ldi	r22, 0xC8	; 200
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	0e 94 9c 01 	call	0x338	; 0x338 <SendEvent>
 91e:	c6 01       	movw	r24, r12
 920:	0c 2e       	mov	r0, r28
 922:	01 c0       	rjmp	.+2      	; 0x926 <__vector_10+0x7a>
 924:	88 0f       	add	r24, r24
 926:	0a 94       	dec	r0
 928:	ea f7       	brpl	.-6      	; 0x924 <__vector_10+0x78>
 92a:	80 95       	com	r24
 92c:	f8 22       	and	r15, r24
 92e:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <UsedTimers>
 932:	21 96       	adiw	r28, 0x01	; 1
 934:	0e 5f       	subi	r16, 0xFE	; 254
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	c8 30       	cpi	r28, 0x08	; 8
 93a:	d1 05       	cpc	r29, r1
 93c:	b1 f6       	brne	.-84     	; 0x8ea <__vector_10+0x3e>
 93e:	ff 91       	pop	r31
 940:	ef 91       	pop	r30
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	bf 91       	pop	r27
 948:	af 91       	pop	r26
 94a:	9f 91       	pop	r25
 94c:	8f 91       	pop	r24
 94e:	7f 91       	pop	r23
 950:	6f 91       	pop	r22
 952:	5f 91       	pop	r21
 954:	4f 91       	pop	r20
 956:	3f 91       	pop	r19
 958:	2f 91       	pop	r18
 95a:	1f 91       	pop	r17
 95c:	0f 91       	pop	r16
 95e:	ff 90       	pop	r15
 960:	df 90       	pop	r13
 962:	cf 90       	pop	r12
 964:	0f 90       	pop	r0
 966:	0f be       	out	0x3f, r0	; 63
 968:	0f 90       	pop	r0
 96a:	1f 90       	pop	r1
 96c:	18 95       	reti

0000096e <__udivmodqi4>:
 96e:	99 1b       	sub	r25, r25
 970:	79 e0       	ldi	r23, 0x09	; 9
 972:	04 c0       	rjmp	.+8      	; 0x97c <__udivmodqi4_ep>

00000974 <__udivmodqi4_loop>:
 974:	99 1f       	adc	r25, r25
 976:	96 17       	cp	r25, r22
 978:	08 f0       	brcs	.+2      	; 0x97c <__udivmodqi4_ep>
 97a:	96 1b       	sub	r25, r22

0000097c <__udivmodqi4_ep>:
 97c:	88 1f       	adc	r24, r24
 97e:	7a 95       	dec	r23
 980:	c9 f7       	brne	.-14     	; 0x974 <__udivmodqi4_loop>
 982:	80 95       	com	r24
 984:	08 95       	ret

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
