
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000a2e  00000ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800086  00800086  00000ae8  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002007  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc5  00000000  00000000  00002d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3d  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00004530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ed7  00000000  00000000  00004a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d0  00000000  00000000  000058df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
  98:	90 81       	ld	r25, Z
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	49 f4       	brne	.+18     	; 0xb0 <TestFunction+0x1e>
  9e:	c9 e7       	ldi	r28, 0x79	; 121
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
  a4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <TestFunction+0x12>
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	31 f4       	brne	.+12     	; 0xc0 <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	41 81       	ldd	r20, Z+1	; 0x01
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SendEvent>
	}
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <main>:
void TestFunction(uint8_t* data, uint8_t nrOfBytes);
uint8_t FindBit(uint8_t ch);

int main(void)
{
    InitializePorts();
  c6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <InitializePorts>
	Usart_Init();
  ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Usart_Init>
	RegisterTestHandler( TestFunction );
  ce:	89 e4       	ldi	r24, 0x49	; 73
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 ce 01 	call	0x39c	; 0x39c <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 29 01 	call	0x252	; 0x252 <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  de:	0e 94 ba 03 	call	0x774	; 0x774 <InitializeStart>
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d8 2f       	mov	r29, r24
  f0:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/16;
  f2:	c8 2f       	mov	r28, r24
  f4:	c2 95       	swap	r28
  f6:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 cb 01 	call	0x396	; 0x396 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
  fe:	8d 2f       	mov	r24, r29
 100:	6c 2f       	mov	r22, r28
 102:	0e 94 09 05 	call	0xa12	; 0xa12 <__udivmodqi4>
 106:	91 11       	cpse	r25, r1
 108:	08 c0       	rjmp	.+16     	; 0x11a <NotifyCalibrationDone+0x32>
 10a:	c1 11       	cpse	r28, r1
 10c:	06 c0       	rjmp	.+12     	; 0x11a <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 10e:	21 2f       	mov	r18, r17
 110:	4d 2f       	mov	r20, r29
 112:	62 ec       	ldi	r22, 0xC2	; 194
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SendEvent>
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	08 95       	ret

00000122 <OnElevatorPositionChanged>:
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 122:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 124:	48 2f       	mov	r20, r24
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SendEvent>
 12e:	08 95       	ret

00000130 <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 130:	fc 01       	movw	r30, r24
 132:	81 81       	ldd	r24, Z+1	; 0x01
 134:	81 3c       	cpi	r24, 0xC1	; 193
 136:	29 f4       	brne	.+10     	; 0x142 <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 138:	84 e7       	ldi	r24, 0x74	; 116
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 c7 01 	call	0x38e	; 0x38e <CalibrateElevatorPosition>
		return;
 140:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 142:	82 3c       	cpi	r24, 0xC2	; 194
 144:	49 f4       	brne	.+18     	; 0x158 <MotorCtrl_Initializing+0x28>
	{
		SetDisplay(Floor0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 cb 01 	call	0x396	; 0x396 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 14c:	6d ea       	ldi	r22, 0xAD	; 173
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 19 01 	call	0x232	; 0x232 <SetState>
 158:	08 95       	ret

0000015a <MotorCtrl_Stopped>:
}


void MotorCtrl_Stopped(Message* msg)
{
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 15a:	fc 01       	movw	r30, r24
 15c:	21 81       	ldd	r18, Z+1	; 0x01
 15e:	21 30       	cpi	r18, 0x01	; 1
 160:	81 f4       	brne	.+32     	; 0x182 <MotorCtrl_Stopped+0x28>
 162:	82 81       	ldd	r24, Z+2	; 0x02
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	68 f4       	brcc	.+26     	; 0x182 <MotorCtrl_Stopped+0x28>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 168:	e0 e6       	ldi	r30, 0x60	; 96
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	86 83       	std	Z+6, r24	; 0x06
		SetDoorState(DoorClosed, _motorCtrl.start);
 16e:	65 81       	ldd	r22, Z+5	; 0x05
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	0e 94 96 01 	call	0x32c	; 0x32c <SetDoorState>
		SetState(&_motorCtrl.fsm, Await_DoorClosed);
 176:	64 ef       	ldi	r22, 0xF4	; 244
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 19 01 	call	0x232	; 0x232 <SetState>
 182:	08 95       	ret

00000184 <MotorCtrl_Moving>:
	}
}


void MotorCtrl_Moving(Message* msg)
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 18c:	fc 01       	movw	r30, r24
 18e:	21 81       	ldd	r18, Z+1	; 0x01
 190:	22 30       	cpi	r18, 0x02	; 2
 192:	c1 f4       	brne	.+48     	; 0x1c4 <MotorCtrl_Moving+0x40>
 194:	22 81       	ldd	r18, Z+2	; 0x02
 196:	33 81       	ldd	r19, Z+3	; 0x03
 198:	23 13       	cpse	r18, r19
 19a:	14 c0       	rjmp	.+40     	; 0x1c4 <MotorCtrl_Moving+0x40>
 19c:	8c 01       	movw	r16, r24
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow / POS_STEPS_PER_FLOOR;
 19e:	c0 e6       	ldi	r28, 0x60	; 96
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	22 95       	swap	r18
 1a4:	2f 70       	andi	r18, 0x0F	; 15
 1a6:	2e 83       	std	Y+6, r18	; 0x06
		SetState(&_motorCtrl.fsm, Await_DoorOpen);
 1a8:	67 ee       	ldi	r22, 0xE7	; 231
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 19 01 	call	0x232	; 0x232 <SetState>
		_motorCtrl.start = msg->MsgParamLow / POS_STEPS_PER_FLOOR;
 1b2:	f8 01       	movw	r30, r16
 1b4:	82 81       	ldd	r24, Z+2	; 0x02
 1b6:	82 95       	swap	r24
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	8d 83       	std	Y+5, r24	; 0x05
		SetDoorState(DoorOpen, _motorCtrl.target);
 1bc:	6e 81       	ldd	r22, Y+6	; 0x06
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	0e 94 96 01 	call	0x32c	; 0x32c <SetDoorState>
	}	
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <Await_DoorOpen>:

void Await_DoorOpen(Message* msg)
{
	if (ReadDoorState((FloorType)_motorCtrl.start) == DoorOpen)
 1ce:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1d2:	0e 94 8e 01 	call	0x31c	; 0x31c <ReadDoorState>
 1d6:	80 31       	cpi	r24, 0x10	; 16
 1d8:	31 f4       	brne	.+12     	; 0x1e6 <Await_DoorOpen+0x18>
	{
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 1da:	6d ea       	ldi	r22, 0xAD	; 173
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	80 e6       	ldi	r24, 0x60	; 96
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 19 01 	call	0x232	; 0x232 <SetState>
 1e6:	08 95       	ret

000001e8 <Await_DoorClosed>:
	}
}

void Await_DoorClosed(Message* msg)
{
	if (ReadDoorState((FloorType)_motorCtrl.start) == DoorClosed)
 1e8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1ec:	0e 94 8e 01 	call	0x31c	; 0x31c <ReadDoorState>
 1f0:	80 32       	cpi	r24, 0x20	; 32
 1f2:	71 f4       	brne	.+28     	; 0x210 <Await_DoorClosed+0x28>
	{
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 1f4:	62 ec       	ldi	r22, 0xC2	; 194
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e6       	ldi	r24, 0x60	; 96
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 19 01 	call	0x232	; 0x232 <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 200:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 204:	61 e9       	ldi	r22, 0x91	; 145
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	82 95       	swap	r24
 20a:	80 7f       	andi	r24, 0xF0	; 240
 20c:	0e 94 b3 01 	call	0x366	; 0x366 <MoveElevator>
 210:	08 95       	ret

00000212 <EnterAtomic>:
 212:	f8 94       	cli
 214:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 21e:	08 95       	ret

00000220 <LeaveAtomic>:
 220:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 224:	81 50       	subi	r24, 0x01	; 1
 226:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 22a:	81 11       	cpse	r24, r1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <LeaveAtomic+0x10>
 22e:	78 94       	sei
 230:	08 95       	ret

00000232 <SetState>:
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
 23c:	8b 01       	movw	r16, r22
 23e:	0e 94 09 01 	call	0x212	; 0x212 <EnterAtomic>
 242:	1c 83       	std	Y+4, r17	; 0x04
 244:	0b 83       	std	Y+3, r16	; 0x03
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	0c 94 10 01 	jmp	0x220	; 0x220 <LeaveAtomic>

00000252 <RegisterFsm>:
 252:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <anchor>
 256:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <anchor+0x1>
 25a:	a7 e6       	ldi	r26, 0x67	; 103
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	e7 36       	cpi	r30, 0x67	; 103
 262:	f2 07       	cpc	r31, r18
 264:	29 f0       	breq	.+10     	; 0x270 <RegisterFsm+0x1e>
 266:	df 01       	movw	r26, r30
 268:	01 90       	ld	r0, Z+
 26a:	f0 81       	ld	r31, Z
 26c:	e0 2d       	mov	r30, r0
 26e:	f7 cf       	rjmp	.-18     	; 0x25e <RegisterFsm+0xc>
 270:	8d 93       	st	X+, r24
 272:	9c 93       	st	X, r25
 274:	dc 01       	movw	r26, r24
 276:	ed 93       	st	X+, r30
 278:	fc 93       	st	X, r31
 27a:	08 95       	ret

0000027c <DispatchEvent>:
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	0e 94 09 01 	call	0x212	; 0x212 <EnterAtomic>
 288:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <msgQ_out>
 28c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 290:	98 17       	cp	r25, r24
 292:	59 f0       	breq	.+22     	; 0x2aa <DispatchEvent+0x2e>
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	98 9f       	mul	r25, r24
 298:	e0 01       	movw	r28, r0
 29a:	11 24       	eor	r1, r1
 29c:	cf 55       	subi	r28, 0x5F	; 95
 29e:	df 4f       	sbci	r29, 0xFF	; 255
 2a0:	9f 5f       	subi	r25, 0xFF	; 255
 2a2:	9f 71       	andi	r25, 0x1F	; 31
 2a4:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <msgQ_out>
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DispatchEvent+0x32>
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	0e 94 10 01 	call	0x220	; 0x220 <LeaveAtomic>
 2b2:	20 97       	sbiw	r28, 0x00	; 0
 2b4:	c9 f0       	breq	.+50     	; 0x2e8 <DispatchEvent+0x6c>
 2b6:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <anchor>
 2ba:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <anchor+0x1>
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	07 36       	cpi	r16, 0x67	; 103
 2c2:	1f 07       	cpc	r17, r31
 2c4:	89 f0       	breq	.+34     	; 0x2e8 <DispatchEvent+0x6c>
 2c6:	d8 01       	movw	r26, r16
 2c8:	12 96       	adiw	r26, 0x02	; 2
 2ca:	9c 91       	ld	r25, X
 2cc:	12 97       	sbiw	r26, 0x02	; 2
 2ce:	88 81       	ld	r24, Y
 2d0:	89 23       	and	r24, r25
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <DispatchEvent+0x64>
 2d4:	13 96       	adiw	r26, 0x03	; 3
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	14 97       	sbiw	r26, 0x04	; 4
 2dc:	ce 01       	movw	r24, r28
 2de:	09 95       	icall
 2e0:	f8 01       	movw	r30, r16
 2e2:	00 81       	ld	r16, Z
 2e4:	11 81       	ldd	r17, Z+1	; 0x01
 2e6:	eb cf       	rjmp	.-42     	; 0x2be <DispatchEvent+0x42>
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <InitializeCounter>:
 2f2:	12 be       	out	0x32, r1	; 50
 2f4:	8b e0       	ldi	r24, 0x0B	; 11
 2f6:	83 bf       	out	0x33, r24	; 51
 2f8:	8d e7       	ldi	r24, 0x7D	; 125
 2fa:	8c bf       	out	0x3c, r24	; 60
 2fc:	89 b7       	in	r24, 0x39	; 57
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	89 bf       	out	0x39, r24	; 57
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	9b bd       	out	0x2b, r25	; 43
 308:	8a bd       	out	0x2a, r24	; 42
 30a:	1d bc       	out	0x2d, r1	; 45
 30c:	1c bc       	out	0x2c, r1	; 44
 30e:	1f bc       	out	0x2f, r1	; 47
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	8e bd       	out	0x2e, r24	; 46
 314:	89 b7       	in	r24, 0x39	; 57
 316:	80 61       	ori	r24, 0x10	; 16
 318:	89 bf       	out	0x39, r24	; 57
 31a:	08 95       	ret

0000031c <ReadDoorState>:
 31c:	e8 2f       	mov	r30, r24
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ee 0f       	add	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	ea 59       	subi	r30, 0x9A	; 154
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	80 81       	ld	r24, Z
 32a:	08 95       	ret

0000032c <SetDoorState>:
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	d8 2f       	mov	r29, r24
 332:	c6 2f       	mov	r28, r22
 334:	0e 94 09 01 	call	0x212	; 0x212 <EnterAtomic>
 338:	6c 2f       	mov	r22, r28
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	8d 2f       	mov	r24, r29
 33e:	80 73       	andi	r24, 0x30	; 48
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	fb 01       	movw	r30, r22
 346:	ea 59       	subi	r30, 0x9A	; 154
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	90 81       	ld	r25, Z
 34c:	98 23       	and	r25, r24
 34e:	11 f4       	brne	.+4      	; 0x354 <SetDoorState+0x28>
 350:	94 e0       	ldi	r25, 0x04	; 4
 352:	91 83       	std	Z+1, r25	; 0x01
 354:	fb 01       	movw	r30, r22
 356:	ea 59       	subi	r30, 0x9A	; 154
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	80 83       	st	Z, r24
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	0c 94 10 01 	jmp	0x220	; 0x220 <LeaveAtomic>

00000366 <MoveElevator>:
 366:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 36a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Elevator+0x4>
 36e:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Elevator+0x6>
 372:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Elevator+0x5>
 376:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 37a:	98 17       	cp	r25, r24
 37c:	10 f4       	brcc	.+4      	; 0x382 <MoveElevator+0x1c>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	03 c0       	rjmp	.+6      	; 0x388 <MoveElevator+0x22>
 382:	89 17       	cp	r24, r25
 384:	18 f4       	brcc	.+6      	; 0x38c <MoveElevator+0x26>
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Elevator+0x4>
 38c:	08 95       	ret

0000038e <CalibrateElevatorPosition>:
 38e:	bc 01       	movw	r22, r24
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0c 94 b3 01 	jmp	0x366	; 0x366 <MoveElevator>

00000396 <SetDisplay>:
 396:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <liftDisplay7Seg>
 39a:	08 95       	ret

0000039c <RegisterTestHandler>:
 39c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_testHandler+0x1>
 3a0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_testHandler>
 3a4:	08 95       	ret

000003a6 <Usart_Init>:
 3a6:	10 bc       	out	0x20, r1	; 32
 3a8:	8c e0       	ldi	r24, 0x0C	; 12
 3aa:	89 b9       	out	0x09, r24	; 9
 3ac:	86 e8       	ldi	r24, 0x86	; 134
 3ae:	80 bd       	out	0x20, r24	; 32
 3b0:	88 e9       	ldi	r24, 0x98	; 152
 3b2:	8a b9       	out	0x0a, r24	; 10
 3b4:	78 94       	sei
 3b6:	08 95       	ret

000003b8 <InitializePorts>:
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	87 bb       	out	0x17, r24	; 23
 3bc:	84 bb       	out	0x14, r24	; 20
 3be:	8a bb       	out	0x1a, r24	; 26
 3c0:	11 ba       	out	0x11, r1	; 17
 3c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Usart_Init>
 3c6:	85 b7       	in	r24, 0x35	; 53
 3c8:	83 60       	ori	r24, 0x03	; 3
 3ca:	85 bf       	out	0x35, r24	; 53
 3cc:	8b b7       	in	r24, 0x3b	; 59
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	8b bf       	out	0x3b, r24	; 59
 3d2:	08 95       	ret

000003d4 <Usart_PutChar>:
 3d4:	8c b9       	out	0x0c, r24	; 12
 3d6:	5d 9b       	sbis	0x0b, 5	; 11
 3d8:	fe cf       	rjmp	.-4      	; 0x3d6 <Usart_PutChar+0x2>
 3da:	08 95       	ret

000003dc <SendEvent>:
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	c8 2f       	mov	r28, r24
 3e6:	06 2f       	mov	r16, r22
 3e8:	d4 2f       	mov	r29, r20
 3ea:	12 2f       	mov	r17, r18
 3ec:	0e 94 09 01 	call	0x212	; 0x212 <EnterAtomic>
 3f0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 3f4:	e8 2f       	mov	r30, r24
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	af 01       	movw	r20, r30
 3fa:	4f 5f       	subi	r20, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	4f 71       	andi	r20, 0x1F	; 31
 400:	55 27       	eor	r21, r21
 402:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <msgQ_out>
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	42 17       	cp	r20, r18
 40a:	53 07       	cpc	r21, r19
 40c:	71 f4       	brne	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 420:	8e ed       	ldi	r24, 0xDE	; 222
 422:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 426:	8d ea       	ldi	r24, 0xAD	; 173
 428:	f9 cf       	rjmp	.-14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 42a:	ee 0f       	add	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	ef 55       	subi	r30, 0x5F	; 95
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	01 83       	std	Z+1, r16	; 0x01
 438:	13 83       	std	Z+3, r17	; 0x03
 43a:	d2 83       	std	Z+2, r29	; 0x02
 43c:	c0 83       	st	Z, r28
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	8f 71       	andi	r24, 0x1F	; 31
 442:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <msgQ_in>
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	0c 94 10 01 	jmp	0x220	; 0x220 <LeaveAtomic>

00000452 <MakeDoorStates>:
 452:	df 92       	push	r13
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	c6 e6       	ldi	r28, 0x66	; 102
 462:	d1 e0       	ldi	r29, 0x01	; 1
 464:	00 e0       	ldi	r16, 0x00	; 0
 466:	10 e0       	ldi	r17, 0x00	; 0
 468:	ee 24       	eor	r14, r14
 46a:	e3 94       	inc	r14
 46c:	f1 2c       	mov	r15, r1
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	81 11       	cpse	r24, r1
 472:	24 c0       	rjmp	.+72     	; 0x4bc <MakeDoorStates+0x6a>
 474:	48 81       	ld	r20, Y
 476:	40 ff       	sbrs	r20, 0
 478:	23 c0       	rjmp	.+70     	; 0x4c0 <MakeDoorStates+0x6e>
 47a:	4e 7f       	andi	r20, 0xFE	; 254
 47c:	48 83       	st	Y, r20
 47e:	20 2f       	mov	r18, r16
 480:	65 ec       	ldi	r22, 0xC5	; 197
 482:	80 e1       	ldi	r24, 0x10	; 16
 484:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SendEvent>
 488:	88 81       	ld	r24, Y
 48a:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <OpenDoors>
 48e:	84 ff       	sbrs	r24, 4
 490:	0a c0       	rjmp	.+20     	; 0x4a6 <MakeDoorStates+0x54>
 492:	97 01       	movw	r18, r14
 494:	00 2e       	mov	r0, r16
 496:	01 c0       	rjmp	.+2      	; 0x49a <MakeDoorStates+0x48>
 498:	22 0f       	add	r18, r18
 49a:	0a 94       	dec	r0
 49c:	ea f7       	brpl	.-6      	; 0x498 <MakeDoorStates+0x46>
 49e:	24 2b       	or	r18, r20
 4a0:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <OpenDoors>
 4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <MakeDoorStates+0x6e>
 4a6:	c7 01       	movw	r24, r14
 4a8:	00 2e       	mov	r0, r16
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <MakeDoorStates+0x5c>
 4ac:	88 0f       	add	r24, r24
 4ae:	0a 94       	dec	r0
 4b0:	ea f7       	brpl	.-6      	; 0x4ac <MakeDoorStates+0x5a>
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <OpenDoors>
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <MakeDoorStates+0x6e>
 4bc:	81 50       	subi	r24, 0x01	; 1
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	0f 5f       	subi	r16, 0xFF	; 255
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	22 96       	adiw	r28, 0x02	; 2
 4c6:	04 30       	cpi	r16, 0x04	; 4
 4c8:	11 05       	cpc	r17, r1
 4ca:	89 f6       	brne	.-94     	; 0x46e <MakeDoorStates+0x1c>
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	df 90       	pop	r13
 4da:	08 95       	ret

000004dc <ProcessMessage>:
 4dc:	db 01       	movw	r26, r22
 4de:	82 30       	cpi	r24, 0x02	; 2
 4e0:	b1 f5       	brne	.+108    	; 0x54e <ProcessMessage+0x72>
 4e2:	8c 91       	ld	r24, X
 4e4:	98 2f       	mov	r25, r24
 4e6:	90 72       	andi	r25, 0x20	; 32
 4e8:	28 2f       	mov	r18, r24
 4ea:	20 76       	andi	r18, 0x60	; 96
 4ec:	d9 f1       	breq	.+118    	; 0x564 <ProcessMessage+0x88>
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	38 2f       	mov	r19, r24
 4f2:	30 71       	andi	r19, 0x10	; 16
 4f4:	84 ff       	sbrs	r24, 4
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	99 23       	and	r25, r25
 4fa:	11 f0       	breq	.+4      	; 0x500 <ProcessMessage+0x24>
 4fc:	94 e0       	ldi	r25, 0x04	; 4
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <ProcessMessage+0x26>
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	8f 70       	andi	r24, 0x0F	; 15
 504:	89 0f       	add	r24, r25
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <ProcessMessage+0x34>
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	8a 95       	dec	r24
 512:	e2 f7       	brpl	.-8      	; 0x50c <ProcessMessage+0x30>
 514:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 518:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 51c:	ba 01       	movw	r22, r20
 51e:	60 95       	com	r22
 520:	70 95       	com	r23
 522:	86 23       	and	r24, r22
 524:	97 23       	and	r25, r23
 526:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 52a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 52e:	33 23       	and	r19, r19
 530:	51 f0       	breq	.+20     	; 0x546 <ProcessMessage+0x6a>
 532:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 536:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 53a:	84 2b       	or	r24, r20
 53c:	95 2b       	or	r25, r21
 53e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 542:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 546:	67 ec       	ldi	r22, 0xC7	; 199
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <SendEvent>
 54e:	83 30       	cpi	r24, 0x03	; 3
 550:	49 f4       	brne	.+18     	; 0x564 <ProcessMessage+0x88>
 552:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <_testHandler>
 556:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <_testHandler+0x1>
 55a:	30 97       	sbiw	r30, 0x00	; 0
 55c:	19 f0       	breq	.+6      	; 0x564 <ProcessMessage+0x88>
 55e:	64 2f       	mov	r22, r20
 560:	cd 01       	movw	r24, r26
 562:	09 94       	ijmp
 564:	08 95       	ret

00000566 <HandleMessage>:
 566:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <msgType.1871>
 56a:	91 11       	cpse	r25, r1
 56c:	05 c0       	rjmp	.+10     	; 0x578 <HandleMessage+0x12>
 56e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <msgType.1871>
 572:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <msgLen.1872>
 576:	08 95       	ret
 578:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <msgLen.1872>
 57c:	41 11       	cpse	r20, r1
 57e:	04 c0       	rjmp	.+8      	; 0x588 <HandleMessage+0x22>
 580:	82 50       	subi	r24, 0x02	; 2
 582:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <msgLen.1872>
 586:	15 c0       	rjmp	.+42     	; 0x5b2 <HandleMessage+0x4c>
 588:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <bufferIndex.1870>
 58c:	e4 17       	cp	r30, r20
 58e:	98 f4       	brcc	.+38     	; 0x5b6 <HandleMessage+0x50>
 590:	21 e0       	ldi	r18, 0x01	; 1
 592:	2e 0f       	add	r18, r30
 594:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <bufferIndex.1870>
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	e2 57       	subi	r30, 0x72	; 114
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	80 83       	st	Z, r24
 5a0:	42 13       	cpse	r20, r18
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <HandleMessage+0x50>
 5a4:	6e e8       	ldi	r22, 0x8E	; 142
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	89 2f       	mov	r24, r25
 5aa:	0e 94 6e 02 	call	0x4dc	; 0x4dc <ProcessMessage>
 5ae:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <msgType.1871>
 5b2:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <bufferIndex.1870>
 5b6:	08 95       	ret

000005b8 <SetInputOutput>:
 5b8:	cf 93       	push	r28
 5ba:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <outputRefreshCounter.1884>
 5be:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <outputRefreshCounter.1884+0x1>
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <outputRefreshCounter.1884+0x1>
 5c8:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <outputRefreshCounter.1884>
 5cc:	83 70       	andi	r24, 0x03	; 3
 5ce:	99 27       	eor	r25, r25
 5d0:	89 2b       	or	r24, r25
 5d2:	21 f5       	brne	.+72     	; 0x61c <SetInputOutput+0x64>
 5d4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <doorRefreshCounter.1885>
 5d8:	8f 5f       	subi	r24, 0xFF	; 255
 5da:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <doorRefreshCounter.1885>
 5de:	83 70       	andi	r24, 0x03	; 3
 5e0:	a8 2f       	mov	r26, r24
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	aa 0f       	add	r26, r26
 5e6:	bb 1f       	adc	r27, r27
 5e8:	aa 59       	subi	r26, 0x9A	; 154
 5ea:	be 4f       	sbci	r27, 0xFE	; 254
 5ec:	11 96       	adiw	r26, 0x01	; 1
 5ee:	ec 91       	ld	r30, X
 5f0:	11 97       	sbiw	r26, 0x01	; 1
 5f2:	9c 91       	ld	r25, X
 5f4:	94 ff       	sbrs	r25, 4
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <SetInputOutput+0x46>
 5f8:	94 e0       	ldi	r25, 0x04	; 4
 5fa:	9e 1b       	sub	r25, r30
 5fc:	e9 2f       	mov	r30, r25
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	ed 58       	subi	r30, 0x8D	; 141
 602:	ff 4f       	sbci	r31, 0xFF	; 255
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	a9 01       	movw	r20, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <SetInputOutput+0x58>
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	8a 95       	dec	r24
 612:	e2 f7       	brpl	.-8      	; 0x60c <SetInputOutput+0x54>
 614:	ca 01       	movw	r24, r20
 616:	90 81       	ld	r25, Z
 618:	89 2b       	or	r24, r25
 61a:	85 bb       	out	0x15, r24	; 21
 61c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <buttonRefreshCounter.1886>
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <buttonRefreshCounter.1886>
 626:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <displayCache>
 62a:	22 23       	and	r18, r18
 62c:	01 f1       	breq	.+64     	; 0x66e <SetInputOutput+0xb6>
 62e:	83 70       	andi	r24, 0x03	; 3
 630:	62 2f       	mov	r22, r18
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	40 e1       	ldi	r20, 0x10	; 16
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	08 2e       	mov	r0, r24
 63a:	02 c0       	rjmp	.+4      	; 0x640 <SetInputOutput+0x88>
 63c:	44 0f       	add	r20, r20
 63e:	55 1f       	adc	r21, r21
 640:	0a 94       	dec	r0
 642:	e2 f7       	brpl	.-8      	; 0x63c <SetInputOutput+0x84>
 644:	46 23       	and	r20, r22
 646:	57 23       	and	r21, r23
 648:	45 2b       	or	r20, r21
 64a:	11 f0       	breq	.+4      	; 0x650 <SetInputOutput+0x98>
 64c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <buttonLiftLed>
 650:	08 2e       	mov	r0, r24
 652:	02 c0       	rjmp	.+4      	; 0x658 <SetInputOutput+0xa0>
 654:	75 95       	asr	r23
 656:	67 95       	ror	r22
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <SetInputOutput+0x9c>
 65c:	60 fd       	sbrc	r22, 0
 65e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <buttonFloorLed>
 662:	82 2f       	mov	r24, r18
 664:	80 7f       	andi	r24, 0xF0	; 240
 666:	19 f0       	breq	.+6      	; 0x66e <SetInputOutput+0xb6>
 668:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <buttonLiftLed_on>
 66c:	01 c0       	rjmp	.+2      	; 0x670 <SetInputOutput+0xb8>
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	2f 70       	andi	r18, 0x0F	; 15
 672:	19 f0       	breq	.+6      	; 0x67a <SetInputOutput+0xc2>
 674:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <buttonFloorLed_On>
 678:	01 c0       	rjmp	.+2      	; 0x67c <SetInputOutput+0xc4>
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftPosDisplay_On>
 680:	81 11       	cpse	r24, r1
 682:	04 c0       	rjmp	.+8      	; 0x68c <SetInputOutput+0xd4>
 684:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Elevator>
 688:	3f 73       	andi	r19, 0x3F	; 63
 68a:	01 c0       	rjmp	.+2      	; 0x68e <SetInputOutput+0xd6>
 68c:	3f e3       	ldi	r19, 0x3F	; 63
 68e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <liftDisplay7Seg_On>
 692:	81 11       	cpse	r24, r1
 694:	03 c0       	rjmp	.+6      	; 0x69c <SetInputOutput+0xe4>
 696:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <liftDisplay7Seg>
 69a:	01 c0       	rjmp	.+2      	; 0x69e <SetInputOutput+0xe6>
 69c:	87 e0       	ldi	r24, 0x07	; 7
 69e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <floorDisplayPort>
 6a2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <doorframe>
 6a6:	60 e4       	ldi	r22, 0x40	; 64
 6a8:	86 9f       	mul	r24, r22
 6aa:	a0 01       	movw	r20, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	60 e8       	ldi	r22, 0x80	; 128
 6b0:	96 9f       	mul	r25, r22
 6b2:	c0 01       	movw	r24, r0
 6b4:	11 24       	eor	r1, r1
 6b6:	84 2b       	or	r24, r20
 6b8:	83 2b       	or	r24, r19
 6ba:	88 bb       	out	0x18, r24	; 24
 6bc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <buttonLiftLed>
 6c0:	98 e0       	ldi	r25, 0x08	; 8
 6c2:	89 9f       	mul	r24, r25
 6c4:	a0 01       	movw	r20, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <buttonFloorLed>
 6cc:	30 e2       	ldi	r19, 0x20	; 32
 6ce:	93 9f       	mul	r25, r19
 6d0:	c0 01       	movw	r24, r0
 6d2:	11 24       	eor	r1, r1
 6d4:	84 2b       	or	r24, r20
 6d6:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <floorDisplayPort>
 6da:	38 2b       	or	r19, r24
 6dc:	40 e8       	ldi	r20, 0x80	; 128
 6de:	24 9f       	mul	r18, r20
 6e0:	c0 01       	movw	r24, r0
 6e2:	11 24       	eor	r1, r1
 6e4:	83 2b       	or	r24, r19
 6e6:	8b bb       	out	0x1b, r24	; 27
 6e8:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <USART_rxBufferOut>
 6ec:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 6f0:	98 17       	cp	r25, r24
 6f2:	b9 f0       	breq	.+46     	; 0x722 <SetInputOutput+0x16a>
 6f4:	0e 94 09 01 	call	0x212	; 0x212 <EnterAtomic>
 6f8:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <USART_rxBufferOut>
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	8e 0f       	add	r24, r30
 700:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	ea 5b       	subi	r30, 0xBA	; 186
 708:	fe 4f       	sbci	r31, 0xFE	; 254
 70a:	c0 81       	ld	r28, Z
 70c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USART_rxBufferOut>
 710:	8f 71       	andi	r24, 0x1F	; 31
 712:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 716:	0e 94 10 01 	call	0x220	; 0x220 <LeaveAtomic>
 71a:	8c 2f       	mov	r24, r28
 71c:	0e 94 b3 02 	call	0x566	; 0x566 <HandleMessage>
 720:	e3 cf       	rjmp	.-58     	; 0x6e8 <SetInputOutput+0x130>
 722:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <terminalRefreshCounter.1887>
 726:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <terminalRefreshCounter.1887+0x1>
 72a:	9c 01       	movw	r18, r24
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <terminalRefreshCounter.1887+0x1>
 734:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <terminalRefreshCounter.1887>
 738:	8f 3f       	cpi	r24, 0xFF	; 255
 73a:	9f 40       	sbci	r25, 0x0F	; 15
 73c:	c9 f4       	brne	.+50     	; 0x770 <SetInputOutput+0x1b8>
 73e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <EnableStatusUpdate>
 742:	88 23       	and	r24, r24
 744:	a9 f0       	breq	.+42     	; 0x770 <SetInputOutput+0x1b8>
 746:	84 e0       	ldi	r24, 0x04	; 4
 748:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 74c:	86 e0       	ldi	r24, 0x06	; 6
 74e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 752:	85 ea       	ldi	r24, 0xA5	; 165
 754:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 758:	8a e5       	ldi	r24, 0x5A	; 90
 75a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 75e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <SystemState>
 762:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 766:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <OpenDoors>
 76a:	cf 91       	pop	r28
 76c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <Usart_PutChar>
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <InitializeStart>:
 774:	8a ec       	ldi	r24, 0xCA	; 202
 776:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 77a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftPosDisplay_On>
 77e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <buttonLiftLed_on>
 782:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <liftDisplay7Seg_On>
 786:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <buttonFloorLed_On>
 78a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <doorframe>
 78e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <liftDoorState+0x1>
 792:	80 e2       	ldi	r24, 0x20	; 32
 794:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <liftDoorState>
 798:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <liftDoorState+0x3>
 79c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <liftDoorState+0x2>
 7a0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <liftDoorState+0x5>
 7a4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <liftDoorState+0x4>
 7a8:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <liftDoorState+0x7>
 7ac:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <liftDoorState+0x6>
 7b0:	8f e1       	ldi	r24, 0x1F	; 31
 7b2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 7b6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 7ba:	0e 94 79 01 	call	0x2f2	; 0x2f2 <InitializeCounter>
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	61 ec       	ldi	r22, 0xC1	; 193
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SendEvent>
 7ca:	8e ef       	ldi	r24, 0xFE	; 254
 7cc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Usart_PutChar>
 7d0:	0e 94 3e 01 	call	0x27c	; 0x27c <DispatchEvent>
 7d4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SetInputOutput>
 7d8:	fb cf       	rjmp	.-10     	; 0x7d0 <InitializeStart+0x5c>

000007da <__vector_1>:
 7da:	1f 92       	push	r1
 7dc:	0f 92       	push	r0
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	0f 92       	push	r0
 7e2:	11 24       	eor	r1, r1
 7e4:	2f 93       	push	r18
 7e6:	3f 93       	push	r19
 7e8:	4f 93       	push	r20
 7ea:	5f 93       	push	r21
 7ec:	6f 93       	push	r22
 7ee:	7f 93       	push	r23
 7f0:	8f 93       	push	r24
 7f2:	9f 93       	push	r25
 7f4:	af 93       	push	r26
 7f6:	bf 93       	push	r27
 7f8:	ef 93       	push	r30
 7fa:	ff 93       	push	r31
 7fc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 800:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 804:	91 60       	ori	r25, 0x01	; 1
 806:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 80a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 80e:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <ButtonState>
 812:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <ButtonState+0x1>
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	69 ec       	ldi	r22, 0xC9	; 201
 81a:	80 e1       	ldi	r24, 0x10	; 16
 81c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SendEvent>
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	bf 91       	pop	r27
 826:	af 91       	pop	r26
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	7f 91       	pop	r23
 82e:	6f 91       	pop	r22
 830:	5f 91       	pop	r21
 832:	4f 91       	pop	r20
 834:	3f 91       	pop	r19
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <__vector_13>:
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	ef 93       	push	r30
 856:	ff 93       	push	r31
 858:	5f 9b       	sbis	0x0b, 7	; 11
 85a:	1e c0       	rjmp	.+60     	; 0x898 <__stack+0x39>
 85c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 860:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USART_rxBufferOut>
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	8f 71       	andi	r24, 0x1F	; 31
 86a:	99 27       	eor	r25, r25
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	82 17       	cp	r24, r18
 870:	93 07       	cpc	r25, r19
 872:	89 f0       	breq	.+34     	; 0x896 <__stack+0x37>
 874:	8c b1       	in	r24, 0x0c	; 12
 876:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <USART_rxBufferIn>
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	9e 0f       	add	r25, r30
 87e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <USART_rxBufferIn>
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	ea 5b       	subi	r30, 0xBA	; 186
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	80 83       	st	Z, r24
 88a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 88e:	8f 71       	andi	r24, 0x1F	; 31
 890:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <USART_rxBufferIn>
 894:	e1 cf       	rjmp	.-62     	; 0x858 <__vector_13+0x16>
 896:	57 98       	cbi	0x0a, 7	; 10
 898:	ff 91       	pop	r31
 89a:	ef 91       	pop	r30
 89c:	9f 91       	pop	r25
 89e:	8f 91       	pop	r24
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <__vector_7>:
 8ae:	1f 92       	push	r1
 8b0:	0f 92       	push	r0
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	0f 92       	push	r0
 8b6:	11 24       	eor	r1, r1
 8b8:	2f 93       	push	r18
 8ba:	3f 93       	push	r19
 8bc:	4f 93       	push	r20
 8be:	5f 93       	push	r21
 8c0:	6f 93       	push	r22
 8c2:	7f 93       	push	r23
 8c4:	8f 93       	push	r24
 8c6:	9f 93       	push	r25
 8c8:	af 93       	push	r26
 8ca:	bf 93       	push	r27
 8cc:	ef 93       	push	r30
 8ce:	ff 93       	push	r31
 8d0:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <ElevatorTick.1962>
 8d4:	8f 5f       	subi	r24, 0xFF	; 255
 8d6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ElevatorTick.1962>
 8da:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__data_end>
 8de:	9f 5f       	subi	r25, 0xFF	; 255
 8e0:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__data_end>
 8e4:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Elevator+0x2>
 8e8:	0e 94 09 05 	call	0xa12	; 0xa12 <__udivmodqi4>
 8ec:	91 11       	cpse	r25, r1
 8ee:	14 c0       	rjmp	.+40     	; 0x918 <__vector_7+0x6a>
 8f0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 8f4:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Elevator+0x1>
 8f8:	96 17       	cp	r25, r22
 8fa:	61 f0       	breq	.+24     	; 0x914 <__vector_7+0x66>
 8fc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Elevator+0x4>
 900:	89 0f       	add	r24, r25
 902:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 906:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Elevator+0x5>
 90a:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Elevator+0x6>
 90e:	30 97       	sbiw	r30, 0x00	; 0
 910:	09 f0       	breq	.+2      	; 0x914 <__vector_7+0x66>
 912:	09 95       	icall
 914:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <ElevatorTick.1962>
 918:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 91c:	6c e0       	ldi	r22, 0x0C	; 12
 91e:	0e 94 09 05 	call	0xa12	; 0xa12 <__udivmodqi4>
 922:	91 11       	cpse	r25, r1
 924:	04 c0       	rjmp	.+8      	; 0x92e <__vector_7+0x80>
 926:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 92a:	0e 94 29 02 	call	0x452	; 0x452 <MakeDoorStates>
 92e:	ff 91       	pop	r31
 930:	ef 91       	pop	r30
 932:	bf 91       	pop	r27
 934:	af 91       	pop	r26
 936:	9f 91       	pop	r25
 938:	8f 91       	pop	r24
 93a:	7f 91       	pop	r23
 93c:	6f 91       	pop	r22
 93e:	5f 91       	pop	r21
 940:	4f 91       	pop	r20
 942:	3f 91       	pop	r19
 944:	2f 91       	pop	r18
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <__vector_10>:
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	cf 92       	push	r12
 95c:	df 92       	push	r13
 95e:	ff 92       	push	r15
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	2f 93       	push	r18
 966:	3f 93       	push	r19
 968:	4f 93       	push	r20
 96a:	5f 93       	push	r21
 96c:	6f 93       	push	r22
 96e:	7f 93       	push	r23
 970:	8f 93       	push	r24
 972:	9f 93       	push	r25
 974:	af 93       	push	r26
 976:	bf 93       	push	r27
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	ef 93       	push	r30
 97e:	ff 93       	push	r31
 980:	03 e3       	ldi	r16, 0x33	; 51
 982:	11 e0       	ldi	r17, 0x01	; 1
 984:	c0 e0       	ldi	r28, 0x00	; 0
 986:	d0 e0       	ldi	r29, 0x00	; 0
 988:	cc 24       	eor	r12, r12
 98a:	c3 94       	inc	r12
 98c:	d1 2c       	mov	r13, r1
 98e:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <UsedTimers>
 992:	8f 2d       	mov	r24, r15
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0c 2e       	mov	r0, r28
 998:	02 c0       	rjmp	.+4      	; 0x99e <__vector_10+0x4e>
 99a:	95 95       	asr	r25
 99c:	87 95       	ror	r24
 99e:	0a 94       	dec	r0
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <__vector_10+0x4a>
 9a2:	80 ff       	sbrs	r24, 0
 9a4:	18 c0       	rjmp	.+48     	; 0x9d6 <__vector_10+0x86>
 9a6:	f8 01       	movw	r30, r16
 9a8:	80 81       	ld	r24, Z
 9aa:	91 81       	ldd	r25, Z+1	; 0x01
 9ac:	01 97       	sbiw	r24, 0x01	; 1
 9ae:	91 83       	std	Z+1, r25	; 0x01
 9b0:	80 83       	st	Z, r24
 9b2:	89 2b       	or	r24, r25
 9b4:	81 f4       	brne	.+32     	; 0x9d6 <__vector_10+0x86>
 9b6:	20 e0       	ldi	r18, 0x00	; 0
 9b8:	40 e0       	ldi	r20, 0x00	; 0
 9ba:	68 ec       	ldi	r22, 0xC8	; 200
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SendEvent>
 9c2:	c6 01       	movw	r24, r12
 9c4:	0c 2e       	mov	r0, r28
 9c6:	01 c0       	rjmp	.+2      	; 0x9ca <__vector_10+0x7a>
 9c8:	88 0f       	add	r24, r24
 9ca:	0a 94       	dec	r0
 9cc:	ea f7       	brpl	.-6      	; 0x9c8 <__vector_10+0x78>
 9ce:	80 95       	com	r24
 9d0:	f8 22       	and	r15, r24
 9d2:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <UsedTimers>
 9d6:	21 96       	adiw	r28, 0x01	; 1
 9d8:	0e 5f       	subi	r16, 0xFE	; 254
 9da:	1f 4f       	sbci	r17, 0xFF	; 255
 9dc:	c8 30       	cpi	r28, 0x08	; 8
 9de:	d1 05       	cpc	r29, r1
 9e0:	b1 f6       	brne	.-84     	; 0x98e <__vector_10+0x3e>
 9e2:	ff 91       	pop	r31
 9e4:	ef 91       	pop	r30
 9e6:	df 91       	pop	r29
 9e8:	cf 91       	pop	r28
 9ea:	bf 91       	pop	r27
 9ec:	af 91       	pop	r26
 9ee:	9f 91       	pop	r25
 9f0:	8f 91       	pop	r24
 9f2:	7f 91       	pop	r23
 9f4:	6f 91       	pop	r22
 9f6:	5f 91       	pop	r21
 9f8:	4f 91       	pop	r20
 9fa:	3f 91       	pop	r19
 9fc:	2f 91       	pop	r18
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	ff 90       	pop	r15
 a04:	df 90       	pop	r13
 a06:	cf 90       	pop	r12
 a08:	0f 90       	pop	r0
 a0a:	0f be       	out	0x3f, r0	; 63
 a0c:	0f 90       	pop	r0
 a0e:	1f 90       	pop	r1
 a10:	18 95       	reti

00000a12 <__udivmodqi4>:
 a12:	99 1b       	sub	r25, r25
 a14:	79 e0       	ldi	r23, 0x09	; 9
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <__udivmodqi4_ep>

00000a18 <__udivmodqi4_loop>:
 a18:	99 1f       	adc	r25, r25
 a1a:	96 17       	cp	r25, r22
 a1c:	08 f0       	brcs	.+2      	; 0xa20 <__udivmodqi4_ep>
 a1e:	96 1b       	sub	r25, r22

00000a20 <__udivmodqi4_ep>:
 a20:	88 1f       	adc	r24, r24
 a22:	7a 95       	dec	r23
 a24:	c9 f7       	brne	.-14     	; 0xa18 <__udivmodqi4_loop>
 a26:	80 95       	com	r24
 a28:	08 95       	ret

00000a2a <_exit>:
 a2a:	f8 94       	cli

00000a2c <__stop_program>:
 a2c:	ff cf       	rjmp	.-2      	; 0xa2c <__stop_program>
