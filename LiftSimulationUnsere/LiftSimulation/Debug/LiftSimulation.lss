
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000bba  00000c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800094  00800094  00000c82  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002742  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dee  00000000  00000000  00003662  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f37  00000000  00000000  00004450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001035  00000000  00000000  0000593c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014dc  00000000  00000000  00006971  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007e4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b0 04 	jmp	0x960	; 0x960 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
  98:	90 81       	ld	r25, Z
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	49 f4       	brne	.+18     	; 0xb0 <TestFunction+0x1e>
  9e:	c8 e8       	ldi	r28, 0x88	; 136
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
  a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <TestFunction+0x12>
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	31 f4       	brne	.+12     	; 0xc0 <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	41 81       	ldd	r20, Z+1	; 0x01
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
	}
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <main>:
void TestFunction(uint8_t* data, uint8_t nrOfBytes);
//uint8_t FindBit(uint8_t ch);

int main(void)
{
    InitializePorts();
  c6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <InitializePorts>
	Usart_Init();
  ca:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Usart_Init>
	RegisterTestHandler( TestFunction );
  ce:	89 e4       	ldi	r24, 0x49	; 73
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  d6:	8f e6       	ldi	r24, 0x6F	; 111
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 b8 01 	call	0x370	; 0x370 <RegisterFsm>
	RegisterFsm(&_mainCtrl.fsm);
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 b8 01 	call	0x370	; 0x370 <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  e6:	0e 94 49 04 	call	0x892	; 0x892 <InitializeStart>
}
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

000000f0 <Message_ElevatorReady>:
		*floor = _mainCtrl.ElevatorNextPosQ[_mainCtrl.qOut];
		_mainCtrl.qOut = (_mainCtrl.qOut + 1)%countof(_mainCtrl.ElevatorNextPosQ);
		return true;
	}
	return false;
}
  f0:	08 95       	ret

000000f2 <MainCtrl_Initializing>:
  f2:	fc 01       	movw	r30, r24
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	82 3c       	cpi	r24, 0xC2	; 194
  f8:	19 f4       	brne	.+6      	; 0x100 <MainCtrl_Initializing+0xe>
  fa:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
  fe:	08 95       	ret
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	88 57       	subi	r24, 0x78	; 120
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	49 f4       	brne	.+18     	; 0x11a <MainCtrl_Initializing+0x28>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <EnableStatusUpdate>
 10e:	61 ea       	ldi	r22, 0xA1	; 161
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 a8 01 	call	0x350	; 0x350 <SetState>
 11a:	08 95       	ret

0000011c <FindBit>:

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
 11c:	88 23       	and	r24, r24
 11e:	49 f0       	breq	.+18     	; 0x132 <FindBit+0x16>
	uint8_t pos = 0;
	while(!(value&1))
 120:	80 fd       	sbrc	r24, 0
 122:	09 c0       	rjmp	.+18     	; 0x136 <FindBit+0x1a>
 124:	90 e0       	ldi	r25, 0x00	; 0
	{
		value >>=1;
 126:	86 95       	lsr	r24
		pos++;
 128:	9f 5f       	subi	r25, 0xFF	; 255

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
	uint8_t pos = 0;
	while(!(value&1))
 12a:	80 ff       	sbrs	r24, 0
 12c:	fc cf       	rjmp	.-8      	; 0x126 <FindBit+0xa>
	{
		value >>=1;
		pos++;
 12e:	89 2f       	mov	r24, r25
 130:	08 95       	ret
	return false;
}

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	08 95       	ret
	uint8_t pos = 0;
	while(!(value&1))
 136:	80 e0       	ldi	r24, 0x00	; 0
	{
		value >>=1;
		pos++;
	}
	return pos;
}
 138:	08 95       	ret

0000013a <GetFloorReservation>:



FloorType GetFloorReservation(uint8_t buttonEventParameter )
{
	return FindBit(buttonEventParameter) - 4;
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <FindBit>
}
 13e:	84 50       	subi	r24, 0x04	; 4
 140:	08 95       	ret

00000142 <MainCtrl_AwaitElevatorRequest>:
	//Usart_PutChar(0xD0);
	//Usart_PutChar(msg->Id);
}

void MainCtrl_AwaitElevatorRequest(Message* msg)
{
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	Usart_PutChar(0xA0);
 14c:	80 ea       	ldi	r24, 0xA0	; 160
 14e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
	Usart_PutChar(msg->Id);
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>

	if( IS_BUTTON_PRESS( msg ) )
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	87 3c       	cpi	r24, 0xC7	; 199
 15c:	09 f5       	brne	.+66     	; 0x1a0 <MainCtrl_AwaitElevatorRequest+0x5e>
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <MainCtrl_AwaitElevatorRequest+0x24>
 164:	3f c0       	rjmp	.+126    	; 0x1e4 <MainCtrl_AwaitElevatorRequest+0xa2>
	{
		if( IS_RESERVATION(msg->MsgParamLow))
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	98 2f       	mov	r25, r24
 16a:	90 7f       	andi	r25, 0xF0	; 240
 16c:	d9 f1       	breq	.+118    	; 0x1e4 <MainCtrl_AwaitElevatorRequest+0xa2>
		{
			FloorType reservation = GetFloorReservation(msg->MsgParamLow);
 16e:	0e 94 9d 00 	call	0x13a	; 0x13a <GetFloorReservation>
			if( reservation != _mainCtrl.currentFloor )
 172:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 176:	89 17       	cp	r24, r25
 178:	49 f0       	breq	.+18     	; 0x18c <MainCtrl_AwaitElevatorRequest+0x4a>
			{			
				_mainCtrl.nextFloor = reservation;
 17a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
				SendEvent(SignalSourceApp, Message_MoveTo, _mainCtrl.nextFloor, 0);
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	48 2f       	mov	r20, r24
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
 18a:	0a c0       	rjmp	.+20     	; 0x1a0 <MainCtrl_AwaitElevatorRequest+0x5e>
			}
			else if( reservation == _mainCtrl.currentFloor)
			{
				SetDoorState(DoorOpen, _mainCtrl.currentFloor);
 18c:	68 2f       	mov	r22, r24
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	0e 94 25 02 	call	0x44a	; 0x44a <SetDoorState>
				_mainCtrl.timer = StartTimer(5000);
 194:	88 e8       	ldi	r24, 0x88	; 136
 196:	93 e1       	ldi	r25, 0x13	; 19
 198:	0e 94 37 05 	call	0xa6e	; 0xa6e <StartTimer>
 19c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			}
		}
	}
	if( msg->Id == TimerEvent )
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	88 3c       	cpi	r24, 0xC8	; 200
 1a4:	71 f4       	brne	.+28     	; 0x1c2 <MainCtrl_AwaitElevatorRequest+0x80>
	{
		Usart_PutChar(0xA1);
 1a6:	81 ea       	ldi	r24, 0xA1	; 161
 1a8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
		Usart_PutChar(_mainCtrl.currentFloor);
 1ac:	00 e6       	ldi	r16, 0x60	; 96
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	f8 01       	movw	r30, r16
 1b2:	85 81       	ldd	r24, Z+5	; 0x05
 1b4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
		SetDoorState(DoorClosed, _mainCtrl.currentFloor);
 1b8:	f8 01       	movw	r30, r16
 1ba:	65 81       	ldd	r22, Z+5	; 0x05
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	0e 94 25 02 	call	0x44a	; 0x44a <SetDoorState>
	}
	
	if( msg->Id == Message_PosChanged)
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	71 f4       	brne	.+28     	; 0x1e4 <MainCtrl_AwaitElevatorRequest+0xa2>
	{
		if( msg->MsgParamHigh == msg->MsgParamLow)
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	89 13       	cpse	r24, r25
 1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <MainCtrl_AwaitElevatorRequest+0xa2>
		{
			_mainCtrl.currentFloor = msg->MsgParamHigh/POS_STEPS_PER_FLOOR;
 1d0:	c0 e6       	ldi	r28, 0x60	; 96
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	82 95       	swap	r24
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	8d 83       	std	Y+5, r24	; 0x05
			_mainCtrl.timer = StartTimer(5000);
 1da:	88 e8       	ldi	r24, 0x88	; 136
 1dc:	93 e1       	ldi	r25, 0x13	; 19
 1de:	0e 94 37 05 	call	0xa6e	; 0xa6e <StartTimer>
 1e2:	8f 83       	std	Y+7, r24	; 0x07
		}
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	d8 2f       	mov	r29, r24
 1f6:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/16;
 1f8:	c8 2f       	mov	r28, r24
 1fa:	c2 95       	swap	r28
 1fc:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
 204:	8d 2f       	mov	r24, r29
 206:	6c 2f       	mov	r22, r28
 208:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__udivmodqi4>
 20c:	91 11       	cpse	r25, r1
 20e:	08 c0       	rjmp	.+16     	; 0x220 <NotifyCalibrationDone+0x32>
 210:	c1 11       	cpse	r28, r1
 212:	06 c0       	rjmp	.+12     	; 0x220 <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 214:	21 2f       	mov	r18, r17
 216:	4d 2f       	mov	r20, r29
 218:	62 ec       	ldi	r22, 0xC2	; 194
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	08 95       	ret

00000228 <OnElevatorPositionChanged>:
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 228:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 22a:	48 2f       	mov	r20, r24
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
 234:	08 95       	ret

00000236 <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 236:	fc 01       	movw	r30, r24
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	81 3c       	cpi	r24, 0xC1	; 193
 23c:	29 f4       	brne	.+10     	; 0x248 <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 23e:	87 ef       	ldi	r24, 0xF7	; 247
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 56 02 	call	0x4ac	; 0x4ac <CalibrateElevatorPosition>
		return;
 246:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 248:	82 3c       	cpi	r24, 0xC2	; 194
 24a:	81 f4       	brne	.+32     	; 0x26c <MotorCtrl_Initializing+0x36>
	{
		SetDisplay(Floor0);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 252:	67 e3       	ldi	r22, 0x37	; 55
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	8f e6       	ldi	r24, 0x6F	; 111
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 a8 01 	call	0x350	; 0x350 <SetState>
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	68 e7       	ldi	r22, 0x78	; 120
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
 26c:	08 95       	ret

0000026e <MotorCtrl_Stopped>:
}


void MotorCtrl_Stopped(Message* msg)
{
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 26e:	fc 01       	movw	r30, r24
 270:	21 81       	ldd	r18, Z+1	; 0x01
 272:	21 30       	cpi	r18, 0x01	; 1
 274:	81 f4       	brne	.+32     	; 0x296 <MotorCtrl_Stopped+0x28>
 276:	82 81       	ldd	r24, Z+2	; 0x02
 278:	84 30       	cpi	r24, 0x04	; 4
 27a:	68 f4       	brcc	.+26     	; 0x296 <MotorCtrl_Stopped+0x28>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 27c:	ef e6       	ldi	r30, 0x6F	; 111
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	86 83       	std	Z+6, r24	; 0x06
		SetDoorState(DoorClosed, _motorCtrl.start);
 282:	65 81       	ldd	r22, Z+5	; 0x05
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	0e 94 25 02 	call	0x44a	; 0x44a <SetDoorState>
		SetState(&_motorCtrl.fsm, Await_DoorClosed);
 28a:	63 e8       	ldi	r22, 0x83	; 131
 28c:	71 e0       	ldi	r23, 0x01	; 1
 28e:	8f e6       	ldi	r24, 0x6F	; 111
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 a8 01 	call	0x350	; 0x350 <SetState>
 296:	08 95       	ret

00000298 <MotorCtrl_Moving>:
	}
}


void MotorCtrl_Moving(Message* msg)
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
	SetDisplay((FloorType)msg->MsgParamLow / POS_STEPS_PER_FLOOR);
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	82 95       	swap	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SetDisplay>
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	c1 f4       	brne	.+48     	; 0x2e2 <MotorCtrl_Moving+0x4a>
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	9b 81       	ldd	r25, Y+3	; 0x03
 2b6:	89 13       	cpse	r24, r25
 2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <MotorCtrl_Moving+0x4a>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow / POS_STEPS_PER_FLOOR;
 2ba:	0f e6       	ldi	r16, 0x6F	; 111
 2bc:	10 e0       	ldi	r17, 0x00	; 0
 2be:	82 95       	swap	r24
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	f8 01       	movw	r30, r16
 2c4:	86 83       	std	Z+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, Await_DoorOpen);
 2c6:	66 e7       	ldi	r22, 0x76	; 118
 2c8:	71 e0       	ldi	r23, 0x01	; 1
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e 94 a8 01 	call	0x350	; 0x350 <SetState>
		_motorCtrl.start = msg->MsgParamLow / POS_STEPS_PER_FLOOR;
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	82 95       	swap	r24
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	f8 01       	movw	r30, r16
 2d8:	85 83       	std	Z+5, r24	; 0x05
		SetDoorState(DoorOpen, _motorCtrl.target);
 2da:	66 81       	ldd	r22, Z+6	; 0x06
 2dc:	80 e1       	ldi	r24, 0x10	; 16
 2de:	0e 94 25 02 	call	0x44a	; 0x44a <SetDoorState>
	}	
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <Await_DoorOpen>:

void Await_DoorOpen(Message* msg)
{
	if (ReadDoorState((FloorType)_motorCtrl.start) == DoorOpen)
 2ec:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <_motorCtrl+0x5>
 2f0:	0e 94 1d 02 	call	0x43a	; 0x43a <ReadDoorState>
 2f4:	80 31       	cpi	r24, 0x10	; 16
 2f6:	31 f4       	brne	.+12     	; 0x304 <Await_DoorOpen+0x18>
	{
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 2f8:	67 e3       	ldi	r22, 0x37	; 55
 2fa:	71 e0       	ldi	r23, 0x01	; 1
 2fc:	8f e6       	ldi	r24, 0x6F	; 111
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 a8 01 	call	0x350	; 0x350 <SetState>
 304:	08 95       	ret

00000306 <Await_DoorClosed>:
	}
}

void Await_DoorClosed(Message* msg)
{
	if (ReadDoorState((FloorType)_motorCtrl.start) == DoorClosed)
 306:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <_motorCtrl+0x5>
 30a:	0e 94 1d 02 	call	0x43a	; 0x43a <ReadDoorState>
 30e:	80 32       	cpi	r24, 0x20	; 32
 310:	71 f4       	brne	.+28     	; 0x32e <Await_DoorClosed+0x28>
	{
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 312:	6c e4       	ldi	r22, 0x4C	; 76
 314:	71 e0       	ldi	r23, 0x01	; 1
 316:	8f e6       	ldi	r24, 0x6F	; 111
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 a8 01 	call	0x350	; 0x350 <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 31e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <_motorCtrl+0x6>
 322:	64 e1       	ldi	r22, 0x14	; 20
 324:	71 e0       	ldi	r23, 0x01	; 1
 326:	82 95       	swap	r24
 328:	80 7f       	andi	r24, 0xF0	; 240
 32a:	0e 94 42 02 	call	0x484	; 0x484 <MoveElevator>
 32e:	08 95       	ret

00000330 <EnterAtomic>:
 330:	f8 94       	cli
 332:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 33c:	08 95       	ret

0000033e <LeaveAtomic>:
 33e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 342:	81 50       	subi	r24, 0x01	; 1
 344:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 348:	81 11       	cpse	r24, r1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <LeaveAtomic+0x10>
 34c:	78 94       	sei
 34e:	08 95       	ret

00000350 <SetState>:
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	ec 01       	movw	r28, r24
 35a:	8b 01       	movw	r16, r22
 35c:	0e 94 98 01 	call	0x330	; 0x330 <EnterAtomic>
 360:	1c 83       	std	Y+4, r17	; 0x04
 362:	0b 83       	std	Y+3, r16	; 0x03
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <LeaveAtomic>

00000370 <RegisterFsm>:
 370:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <anchor>
 374:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <anchor+0x1>
 378:	a6 e7       	ldi	r26, 0x76	; 118
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	e6 37       	cpi	r30, 0x76	; 118
 380:	f2 07       	cpc	r31, r18
 382:	29 f0       	breq	.+10     	; 0x38e <RegisterFsm+0x1e>
 384:	df 01       	movw	r26, r30
 386:	01 90       	ld	r0, Z+
 388:	f0 81       	ld	r31, Z
 38a:	e0 2d       	mov	r30, r0
 38c:	f7 cf       	rjmp	.-18     	; 0x37c <RegisterFsm+0xc>
 38e:	8d 93       	st	X+, r24
 390:	9c 93       	st	X, r25
 392:	dc 01       	movw	r26, r24
 394:	ed 93       	st	X+, r30
 396:	fc 93       	st	X, r31
 398:	08 95       	ret

0000039a <DispatchEvent>:
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	0e 94 98 01 	call	0x330	; 0x330 <EnterAtomic>
 3a6:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <msgQ_out>
 3aa:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 3ae:	98 17       	cp	r25, r24
 3b0:	59 f0       	breq	.+22     	; 0x3c8 <DispatchEvent+0x2e>
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	98 9f       	mul	r25, r24
 3b6:	e0 01       	movw	r28, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	c1 55       	subi	r28, 0x51	; 81
 3bc:	df 4f       	sbci	r29, 0xFF	; 255
 3be:	9f 5f       	subi	r25, 0xFF	; 255
 3c0:	9f 71       	andi	r25, 0x1F	; 31
 3c2:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <msgQ_out>
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DispatchEvent+0x32>
 3c8:	c0 e0       	ldi	r28, 0x00	; 0
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	0e 94 9f 01 	call	0x33e	; 0x33e <LeaveAtomic>
 3d0:	20 97       	sbiw	r28, 0x00	; 0
 3d2:	c9 f0       	breq	.+50     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d4:	00 91 76 00 	lds	r16, 0x0076	; 0x800076 <anchor>
 3d8:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <anchor+0x1>
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	06 37       	cpi	r16, 0x76	; 118
 3e0:	1f 07       	cpc	r17, r31
 3e2:	89 f0       	breq	.+34     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e4:	d8 01       	movw	r26, r16
 3e6:	12 96       	adiw	r26, 0x02	; 2
 3e8:	9c 91       	ld	r25, X
 3ea:	12 97       	sbiw	r26, 0x02	; 2
 3ec:	88 81       	ld	r24, Y
 3ee:	89 23       	and	r24, r25
 3f0:	31 f0       	breq	.+12     	; 0x3fe <DispatchEvent+0x64>
 3f2:	13 96       	adiw	r26, 0x03	; 3
 3f4:	ed 91       	ld	r30, X+
 3f6:	fc 91       	ld	r31, X
 3f8:	14 97       	sbiw	r26, 0x04	; 4
 3fa:	ce 01       	movw	r24, r28
 3fc:	09 95       	icall
 3fe:	f8 01       	movw	r30, r16
 400:	00 81       	ld	r16, Z
 402:	11 81       	ldd	r17, Z+1	; 0x01
 404:	eb cf       	rjmp	.-42     	; 0x3dc <DispatchEvent+0x42>
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <InitializeCounter>:
 410:	12 be       	out	0x32, r1	; 50
 412:	8b e0       	ldi	r24, 0x0B	; 11
 414:	83 bf       	out	0x33, r24	; 51
 416:	8d e7       	ldi	r24, 0x7D	; 125
 418:	8c bf       	out	0x3c, r24	; 60
 41a:	89 b7       	in	r24, 0x39	; 57
 41c:	82 60       	ori	r24, 0x02	; 2
 41e:	89 bf       	out	0x39, r24	; 57
 420:	80 e8       	ldi	r24, 0x80	; 128
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	9b bd       	out	0x2b, r25	; 43
 426:	8a bd       	out	0x2a, r24	; 42
 428:	1d bc       	out	0x2d, r1	; 45
 42a:	1c bc       	out	0x2c, r1	; 44
 42c:	1f bc       	out	0x2f, r1	; 47
 42e:	8d e0       	ldi	r24, 0x0D	; 13
 430:	8e bd       	out	0x2e, r24	; 46
 432:	89 b7       	in	r24, 0x39	; 57
 434:	80 61       	ori	r24, 0x10	; 16
 436:	89 bf       	out	0x39, r24	; 57
 438:	08 95       	ret

0000043a <ReadDoorState>:
 43a:	e8 2f       	mov	r30, r24
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ec 58       	subi	r30, 0x8C	; 140
 444:	fe 4f       	sbci	r31, 0xFE	; 254
 446:	80 81       	ld	r24, Z
 448:	08 95       	ret

0000044a <SetDoorState>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	d8 2f       	mov	r29, r24
 450:	c6 2f       	mov	r28, r22
 452:	0e 94 98 01 	call	0x330	; 0x330 <EnterAtomic>
 456:	6c 2f       	mov	r22, r28
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	8d 2f       	mov	r24, r29
 45c:	80 73       	andi	r24, 0x30	; 48
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	fb 01       	movw	r30, r22
 464:	ec 58       	subi	r30, 0x8C	; 140
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	90 81       	ld	r25, Z
 46a:	98 23       	and	r25, r24
 46c:	11 f4       	brne	.+4      	; 0x472 <SetDoorState+0x28>
 46e:	94 e0       	ldi	r25, 0x04	; 4
 470:	91 83       	std	Z+1, r25	; 0x01
 472:	fb 01       	movw	r30, r22
 474:	ec 58       	subi	r30, 0x8C	; 140
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	0c 94 9f 01 	jmp	0x33e	; 0x33e <LeaveAtomic>

00000484 <MoveElevator>:
 484:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 488:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Elevator+0x4>
 48c:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <Elevator+0x6>
 490:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Elevator+0x5>
 494:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 498:	98 17       	cp	r25, r24
 49a:	10 f4       	brcc	.+4      	; 0x4a0 <MoveElevator+0x1c>
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <MoveElevator+0x22>
 4a0:	89 17       	cp	r24, r25
 4a2:	18 f4       	brcc	.+6      	; 0x4aa <MoveElevator+0x26>
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Elevator+0x4>
 4aa:	08 95       	ret

000004ac <CalibrateElevatorPosition>:
 4ac:	bc 01       	movw	r22, r24
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0c 94 42 02 	jmp	0x484	; 0x484 <MoveElevator>

000004b4 <SetDisplay>:
 4b4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <liftDisplay7Seg>
 4b8:	08 95       	ret

000004ba <RegisterTestHandler>:
 4ba:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_testHandler+0x1>
 4be:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_testHandler>
 4c2:	08 95       	ret

000004c4 <Usart_Init>:
 4c4:	10 bc       	out	0x20, r1	; 32
 4c6:	8c e0       	ldi	r24, 0x0C	; 12
 4c8:	89 b9       	out	0x09, r24	; 9
 4ca:	86 e8       	ldi	r24, 0x86	; 134
 4cc:	80 bd       	out	0x20, r24	; 32
 4ce:	88 e9       	ldi	r24, 0x98	; 152
 4d0:	8a b9       	out	0x0a, r24	; 10
 4d2:	78 94       	sei
 4d4:	08 95       	ret

000004d6 <InitializePorts>:
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	87 bb       	out	0x17, r24	; 23
 4da:	84 bb       	out	0x14, r24	; 20
 4dc:	8a bb       	out	0x1a, r24	; 26
 4de:	11 ba       	out	0x11, r1	; 17
 4e0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Usart_Init>
 4e4:	85 b7       	in	r24, 0x35	; 53
 4e6:	83 60       	ori	r24, 0x03	; 3
 4e8:	85 bf       	out	0x35, r24	; 53
 4ea:	8b b7       	in	r24, 0x3b	; 59
 4ec:	80 64       	ori	r24, 0x40	; 64
 4ee:	8b bf       	out	0x3b, r24	; 59
 4f0:	08 95       	ret

000004f2 <Usart_PutChar>:
 4f2:	8c b9       	out	0x0c, r24	; 12
 4f4:	5d 9b       	sbis	0x0b, 5	; 11
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <Usart_PutChar+0x2>
 4f8:	08 95       	ret

000004fa <SendEvent>:
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	c8 2f       	mov	r28, r24
 504:	06 2f       	mov	r16, r22
 506:	d4 2f       	mov	r29, r20
 508:	12 2f       	mov	r17, r18
 50a:	0e 94 98 01 	call	0x330	; 0x330 <EnterAtomic>
 50e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 512:	e8 2f       	mov	r30, r24
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	af 01       	movw	r20, r30
 518:	4f 5f       	subi	r20, 0xFF	; 255
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	4f 71       	andi	r20, 0x1F	; 31
 51e:	55 27       	eor	r21, r21
 520:	20 91 ad 00 	lds	r18, 0x00AD	; 0x8000ad <msgQ_out>
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	42 17       	cp	r20, r18
 528:	53 07       	cpc	r21, r19
 52a:	71 f4       	brne	.+28     	; 0x548 <SendEvent+0x4e>
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 53e:	8e ed       	ldi	r24, 0xDE	; 222
 540:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 544:	8d ea       	ldi	r24, 0xAD	; 173
 546:	f9 cf       	rjmp	.-14     	; 0x53a <SendEvent+0x40>
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	e1 55       	subi	r30, 0x51	; 81
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	01 83       	std	Z+1, r16	; 0x01
 556:	13 83       	std	Z+3, r17	; 0x03
 558:	d2 83       	std	Z+2, r29	; 0x02
 55a:	c0 83       	st	Z, r28
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	8f 71       	andi	r24, 0x1F	; 31
 560:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <msgQ_in>
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <LeaveAtomic>

00000570 <MakeDoorStates>:
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	c4 e7       	ldi	r28, 0x74	; 116
 580:	d1 e0       	ldi	r29, 0x01	; 1
 582:	00 e0       	ldi	r16, 0x00	; 0
 584:	10 e0       	ldi	r17, 0x00	; 0
 586:	ee 24       	eor	r14, r14
 588:	e3 94       	inc	r14
 58a:	f1 2c       	mov	r15, r1
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	81 11       	cpse	r24, r1
 590:	24 c0       	rjmp	.+72     	; 0x5da <MakeDoorStates+0x6a>
 592:	48 81       	ld	r20, Y
 594:	40 ff       	sbrs	r20, 0
 596:	23 c0       	rjmp	.+70     	; 0x5de <MakeDoorStates+0x6e>
 598:	4e 7f       	andi	r20, 0xFE	; 254
 59a:	48 83       	st	Y, r20
 59c:	20 2f       	mov	r18, r16
 59e:	65 ec       	ldi	r22, 0xC5	; 197
 5a0:	80 e1       	ldi	r24, 0x10	; 16
 5a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
 5a6:	88 81       	ld	r24, Y
 5a8:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <OpenDoors>
 5ac:	84 ff       	sbrs	r24, 4
 5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <MakeDoorStates+0x54>
 5b0:	97 01       	movw	r18, r14
 5b2:	00 2e       	mov	r0, r16
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <MakeDoorStates+0x48>
 5b6:	22 0f       	add	r18, r18
 5b8:	0a 94       	dec	r0
 5ba:	ea f7       	brpl	.-6      	; 0x5b6 <MakeDoorStates+0x46>
 5bc:	24 2b       	or	r18, r20
 5be:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <OpenDoors>
 5c2:	0d c0       	rjmp	.+26     	; 0x5de <MakeDoorStates+0x6e>
 5c4:	c7 01       	movw	r24, r14
 5c6:	00 2e       	mov	r0, r16
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <MakeDoorStates+0x5c>
 5ca:	88 0f       	add	r24, r24
 5cc:	0a 94       	dec	r0
 5ce:	ea f7       	brpl	.-6      	; 0x5ca <MakeDoorStates+0x5a>
 5d0:	80 95       	com	r24
 5d2:	84 23       	and	r24, r20
 5d4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <OpenDoors>
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <MakeDoorStates+0x6e>
 5da:	81 50       	subi	r24, 0x01	; 1
 5dc:	89 83       	std	Y+1, r24	; 0x01
 5de:	0f 5f       	subi	r16, 0xFF	; 255
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	22 96       	adiw	r28, 0x02	; 2
 5e4:	04 30       	cpi	r16, 0x04	; 4
 5e6:	11 05       	cpc	r17, r1
 5e8:	89 f6       	brne	.-94     	; 0x58c <MakeDoorStates+0x1c>
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	ff 90       	pop	r15
 5f4:	ef 90       	pop	r14
 5f6:	df 90       	pop	r13
 5f8:	08 95       	ret

000005fa <ProcessMessage>:
 5fa:	db 01       	movw	r26, r22
 5fc:	82 30       	cpi	r24, 0x02	; 2
 5fe:	b1 f5       	brne	.+108    	; 0x66c <ProcessMessage+0x72>
 600:	8c 91       	ld	r24, X
 602:	98 2f       	mov	r25, r24
 604:	90 72       	andi	r25, 0x20	; 32
 606:	28 2f       	mov	r18, r24
 608:	20 76       	andi	r18, 0x60	; 96
 60a:	d9 f1       	breq	.+118    	; 0x682 <ProcessMessage+0x88>
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	38 2f       	mov	r19, r24
 610:	30 71       	andi	r19, 0x10	; 16
 612:	84 ff       	sbrs	r24, 4
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	99 23       	and	r25, r25
 618:	11 f0       	breq	.+4      	; 0x61e <ProcessMessage+0x24>
 61a:	94 e0       	ldi	r25, 0x04	; 4
 61c:	01 c0       	rjmp	.+2      	; 0x620 <ProcessMessage+0x26>
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	8f 70       	andi	r24, 0x0F	; 15
 622:	89 0f       	add	r24, r25
 624:	41 e0       	ldi	r20, 0x01	; 1
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <ProcessMessage+0x34>
 62a:	44 0f       	add	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <ProcessMessage+0x30>
 632:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 636:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 63a:	ba 01       	movw	r22, r20
 63c:	60 95       	com	r22
 63e:	70 95       	com	r23
 640:	86 23       	and	r24, r22
 642:	97 23       	and	r25, r23
 644:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 648:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 64c:	33 23       	and	r19, r19
 64e:	51 f0       	breq	.+20     	; 0x664 <ProcessMessage+0x6a>
 650:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 654:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 658:	84 2b       	or	r24, r20
 65a:	95 2b       	or	r25, r21
 65c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 660:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 664:	67 ec       	ldi	r22, 0xC7	; 199
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <SendEvent>
 66c:	83 30       	cpi	r24, 0x03	; 3
 66e:	49 f4       	brne	.+18     	; 0x682 <ProcessMessage+0x88>
 670:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <_testHandler>
 674:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <_testHandler+0x1>
 678:	30 97       	sbiw	r30, 0x00	; 0
 67a:	19 f0       	breq	.+6      	; 0x682 <ProcessMessage+0x88>
 67c:	64 2f       	mov	r22, r20
 67e:	cd 01       	movw	r24, r26
 680:	09 94       	ijmp
 682:	08 95       	ret

00000684 <HandleMessage>:
 684:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <msgType.1871>
 688:	91 11       	cpse	r25, r1
 68a:	05 c0       	rjmp	.+10     	; 0x696 <HandleMessage+0x12>
 68c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <msgType.1871>
 690:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <msgLen.1872>
 694:	08 95       	ret
 696:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <msgLen.1872>
 69a:	41 11       	cpse	r20, r1
 69c:	04 c0       	rjmp	.+8      	; 0x6a6 <HandleMessage+0x22>
 69e:	82 50       	subi	r24, 0x02	; 2
 6a0:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <msgLen.1872>
 6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <HandleMessage+0x4c>
 6a6:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <bufferIndex.1870>
 6aa:	e4 17       	cp	r30, r20
 6ac:	98 f4       	brcc	.+38     	; 0x6d4 <HandleMessage+0x50>
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	2e 0f       	add	r18, r30
 6b2:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <bufferIndex.1870>
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	e4 56       	subi	r30, 0x64	; 100
 6ba:	ff 4f       	sbci	r31, 0xFF	; 255
 6bc:	80 83       	st	Z, r24
 6be:	42 13       	cpse	r20, r18
 6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <HandleMessage+0x50>
 6c2:	6c e9       	ldi	r22, 0x9C	; 156
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	89 2f       	mov	r24, r25
 6c8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <ProcessMessage>
 6cc:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <msgType.1871>
 6d0:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <bufferIndex.1870>
 6d4:	08 95       	ret

000006d6 <SetInputOutput>:
 6d6:	cf 93       	push	r28
 6d8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <outputRefreshCounter.1884>
 6dc:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <outputRefreshCounter.1884+0x1>
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <outputRefreshCounter.1884+0x1>
 6e6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <outputRefreshCounter.1884>
 6ea:	83 70       	andi	r24, 0x03	; 3
 6ec:	99 27       	eor	r25, r25
 6ee:	89 2b       	or	r24, r25
 6f0:	21 f5       	brne	.+72     	; 0x73a <SetInputOutput+0x64>
 6f2:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <doorRefreshCounter.1885>
 6f6:	8f 5f       	subi	r24, 0xFF	; 255
 6f8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <doorRefreshCounter.1885>
 6fc:	83 70       	andi	r24, 0x03	; 3
 6fe:	a8 2f       	mov	r26, r24
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	aa 0f       	add	r26, r26
 704:	bb 1f       	adc	r27, r27
 706:	ac 58       	subi	r26, 0x8C	; 140
 708:	be 4f       	sbci	r27, 0xFE	; 254
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ec 91       	ld	r30, X
 70e:	11 97       	sbiw	r26, 0x01	; 1
 710:	9c 91       	ld	r25, X
 712:	94 ff       	sbrs	r25, 4
 714:	03 c0       	rjmp	.+6      	; 0x71c <SetInputOutput+0x46>
 716:	94 e0       	ldi	r25, 0x04	; 4
 718:	9e 1b       	sub	r25, r30
 71a:	e9 2f       	mov	r30, r25
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	ee 57       	subi	r30, 0x7E	; 126
 720:	ff 4f       	sbci	r31, 0xFF	; 255
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	a9 01       	movw	r20, r18
 728:	02 c0       	rjmp	.+4      	; 0x72e <SetInputOutput+0x58>
 72a:	44 0f       	add	r20, r20
 72c:	55 1f       	adc	r21, r21
 72e:	8a 95       	dec	r24
 730:	e2 f7       	brpl	.-8      	; 0x72a <SetInputOutput+0x54>
 732:	ca 01       	movw	r24, r20
 734:	90 81       	ld	r25, Z
 736:	89 2b       	or	r24, r25
 738:	85 bb       	out	0x15, r24	; 21
 73a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <buttonRefreshCounter.1886>
 73e:	8f 5f       	subi	r24, 0xFF	; 255
 740:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <buttonRefreshCounter.1886>
 744:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <displayCache>
 748:	22 23       	and	r18, r18
 74a:	01 f1       	breq	.+64     	; 0x78c <SetInputOutput+0xb6>
 74c:	83 70       	andi	r24, 0x03	; 3
 74e:	62 2f       	mov	r22, r18
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	40 e1       	ldi	r20, 0x10	; 16
 754:	50 e0       	ldi	r21, 0x00	; 0
 756:	08 2e       	mov	r0, r24
 758:	02 c0       	rjmp	.+4      	; 0x75e <SetInputOutput+0x88>
 75a:	44 0f       	add	r20, r20
 75c:	55 1f       	adc	r21, r21
 75e:	0a 94       	dec	r0
 760:	e2 f7       	brpl	.-8      	; 0x75a <SetInputOutput+0x84>
 762:	46 23       	and	r20, r22
 764:	57 23       	and	r21, r23
 766:	45 2b       	or	r20, r21
 768:	11 f0       	breq	.+4      	; 0x76e <SetInputOutput+0x98>
 76a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <buttonLiftLed>
 76e:	08 2e       	mov	r0, r24
 770:	02 c0       	rjmp	.+4      	; 0x776 <SetInputOutput+0xa0>
 772:	75 95       	asr	r23
 774:	67 95       	ror	r22
 776:	0a 94       	dec	r0
 778:	e2 f7       	brpl	.-8      	; 0x772 <SetInputOutput+0x9c>
 77a:	60 fd       	sbrc	r22, 0
 77c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <buttonFloorLed>
 780:	82 2f       	mov	r24, r18
 782:	80 7f       	andi	r24, 0xF0	; 240
 784:	19 f0       	breq	.+6      	; 0x78c <SetInputOutput+0xb6>
 786:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <buttonLiftLed_on>
 78a:	01 c0       	rjmp	.+2      	; 0x78e <SetInputOutput+0xb8>
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	2f 70       	andi	r18, 0x0F	; 15
 790:	19 f0       	breq	.+6      	; 0x798 <SetInputOutput+0xc2>
 792:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <buttonFloorLed_On>
 796:	01 c0       	rjmp	.+2      	; 0x79a <SetInputOutput+0xc4>
 798:	21 e0       	ldi	r18, 0x01	; 1
 79a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <liftPosDisplay_On>
 79e:	81 11       	cpse	r24, r1
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <SetInputOutput+0xd4>
 7a2:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <Elevator>
 7a6:	3f 73       	andi	r19, 0x3F	; 63
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <SetInputOutput+0xd6>
 7aa:	3f e3       	ldi	r19, 0x3F	; 63
 7ac:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <liftDisplay7Seg_On>
 7b0:	81 11       	cpse	r24, r1
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <SetInputOutput+0xe4>
 7b4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <liftDisplay7Seg>
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <SetInputOutput+0xe6>
 7ba:	87 e0       	ldi	r24, 0x07	; 7
 7bc:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <floorDisplayPort>
 7c0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <doorframe>
 7c4:	60 e4       	ldi	r22, 0x40	; 64
 7c6:	86 9f       	mul	r24, r22
 7c8:	a0 01       	movw	r20, r0
 7ca:	11 24       	eor	r1, r1
 7cc:	60 e8       	ldi	r22, 0x80	; 128
 7ce:	96 9f       	mul	r25, r22
 7d0:	c0 01       	movw	r24, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	84 2b       	or	r24, r20
 7d6:	83 2b       	or	r24, r19
 7d8:	88 bb       	out	0x18, r24	; 24
 7da:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <buttonLiftLed>
 7de:	98 e0       	ldi	r25, 0x08	; 8
 7e0:	89 9f       	mul	r24, r25
 7e2:	a0 01       	movw	r20, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <buttonFloorLed>
 7ea:	30 e2       	ldi	r19, 0x20	; 32
 7ec:	93 9f       	mul	r25, r19
 7ee:	c0 01       	movw	r24, r0
 7f0:	11 24       	eor	r1, r1
 7f2:	84 2b       	or	r24, r20
 7f4:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <floorDisplayPort>
 7f8:	38 2b       	or	r19, r24
 7fa:	40 e8       	ldi	r20, 0x80	; 128
 7fc:	24 9f       	mul	r18, r20
 7fe:	c0 01       	movw	r24, r0
 800:	11 24       	eor	r1, r1
 802:	83 2b       	or	r24, r19
 804:	8b bb       	out	0x1b, r24	; 27
 806:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <USART_rxBufferOut>
 80a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 80e:	98 17       	cp	r25, r24
 810:	b9 f0       	breq	.+46     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 812:	0e 94 98 01 	call	0x330	; 0x330 <EnterAtomic>
 816:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <USART_rxBufferOut>
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	8e 0f       	add	r24, r30
 81e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	ec 5a       	subi	r30, 0xAC	; 172
 826:	fe 4f       	sbci	r31, 0xFE	; 254
 828:	c0 81       	ld	r28, Z
 82a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USART_rxBufferOut>
 82e:	8f 71       	andi	r24, 0x1F	; 31
 830:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 834:	0e 94 9f 01 	call	0x33e	; 0x33e <LeaveAtomic>
 838:	8c 2f       	mov	r24, r28
 83a:	0e 94 42 03 	call	0x684	; 0x684 <HandleMessage>
 83e:	e3 cf       	rjmp	.-58     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 840:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <terminalRefreshCounter.1887>
 844:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <terminalRefreshCounter.1887+0x1>
 848:	9c 01       	movw	r18, r24
 84a:	2f 5f       	subi	r18, 0xFF	; 255
 84c:	3f 4f       	sbci	r19, 0xFF	; 255
 84e:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <terminalRefreshCounter.1887+0x1>
 852:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <terminalRefreshCounter.1887>
 856:	8f 3f       	cpi	r24, 0xFF	; 255
 858:	9f 40       	sbci	r25, 0x0F	; 15
 85a:	c9 f4       	brne	.+50     	; 0x88e <__stack+0x2f>
 85c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <EnableStatusUpdate>
 860:	88 23       	and	r24, r24
 862:	a9 f0       	breq	.+42     	; 0x88e <__stack+0x2f>
 864:	84 e0       	ldi	r24, 0x04	; 4
 866:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 86a:	86 e0       	ldi	r24, 0x06	; 6
 86c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 870:	85 ea       	ldi	r24, 0xA5	; 165
 872:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 876:	8a e5       	ldi	r24, 0x5A	; 90
 878:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 87c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SystemState>
 880:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 884:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <OpenDoors>
 888:	cf 91       	pop	r28
 88a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <Usart_PutChar>
 88e:	cf 91       	pop	r28
 890:	08 95       	ret

00000892 <InitializeStart>:
 892:	8a ec       	ldi	r24, 0xCA	; 202
 894:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 898:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <liftPosDisplay_On>
 89c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <buttonLiftLed_on>
 8a0:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <liftDisplay7Seg_On>
 8a4:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <buttonFloorLed_On>
 8a8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <doorframe>
 8ac:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <liftDoorState+0x1>
 8b0:	80 e2       	ldi	r24, 0x20	; 32
 8b2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <liftDoorState>
 8b6:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <liftDoorState+0x3>
 8ba:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <liftDoorState+0x2>
 8be:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <liftDoorState+0x5>
 8c2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <liftDoorState+0x4>
 8c6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <liftDoorState+0x7>
 8ca:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <liftDoorState+0x6>
 8ce:	8f e1       	ldi	r24, 0x1F	; 31
 8d0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 8d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 8d8:	0e 94 08 02 	call	0x410	; 0x410 <InitializeCounter>
 8dc:	20 e0       	ldi	r18, 0x00	; 0
 8de:	40 e0       	ldi	r20, 0x00	; 0
 8e0:	61 ec       	ldi	r22, 0xC1	; 193
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
 8e8:	8e ef       	ldi	r24, 0xFE	; 254
 8ea:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Usart_PutChar>
 8ee:	0e 94 cd 01 	call	0x39a	; 0x39a <DispatchEvent>
 8f2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SetInputOutput>
 8f6:	fb cf       	rjmp	.-10     	; 0x8ee <InitializeStart+0x5c>

000008f8 <__vector_1>:
 8f8:	1f 92       	push	r1
 8fa:	0f 92       	push	r0
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	0f 92       	push	r0
 900:	11 24       	eor	r1, r1
 902:	2f 93       	push	r18
 904:	3f 93       	push	r19
 906:	4f 93       	push	r20
 908:	5f 93       	push	r21
 90a:	6f 93       	push	r22
 90c:	7f 93       	push	r23
 90e:	8f 93       	push	r24
 910:	9f 93       	push	r25
 912:	af 93       	push	r26
 914:	bf 93       	push	r27
 916:	ef 93       	push	r30
 918:	ff 93       	push	r31
 91a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 91e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 922:	91 60       	ori	r25, 0x01	; 1
 924:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 928:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 92c:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <ButtonState>
 930:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <ButtonState+0x1>
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	69 ec       	ldi	r22, 0xC9	; 201
 938:	80 e1       	ldi	r24, 0x10	; 16
 93a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
 93e:	ff 91       	pop	r31
 940:	ef 91       	pop	r30
 942:	bf 91       	pop	r27
 944:	af 91       	pop	r26
 946:	9f 91       	pop	r25
 948:	8f 91       	pop	r24
 94a:	7f 91       	pop	r23
 94c:	6f 91       	pop	r22
 94e:	5f 91       	pop	r21
 950:	4f 91       	pop	r20
 952:	3f 91       	pop	r19
 954:	2f 91       	pop	r18
 956:	0f 90       	pop	r0
 958:	0f be       	out	0x3f, r0	; 63
 95a:	0f 90       	pop	r0
 95c:	1f 90       	pop	r1
 95e:	18 95       	reti

00000960 <__vector_13>:
 960:	1f 92       	push	r1
 962:	0f 92       	push	r0
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	0f 92       	push	r0
 968:	11 24       	eor	r1, r1
 96a:	2f 93       	push	r18
 96c:	3f 93       	push	r19
 96e:	8f 93       	push	r24
 970:	9f 93       	push	r25
 972:	ef 93       	push	r30
 974:	ff 93       	push	r31
 976:	5f 9b       	sbis	0x0b, 7	; 11
 978:	1e c0       	rjmp	.+60     	; 0x9b6 <__vector_13+0x56>
 97a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 97e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USART_rxBufferOut>
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	01 96       	adiw	r24, 0x01	; 1
 986:	8f 71       	andi	r24, 0x1F	; 31
 988:	99 27       	eor	r25, r25
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	82 17       	cp	r24, r18
 98e:	93 07       	cpc	r25, r19
 990:	89 f0       	breq	.+34     	; 0x9b4 <__vector_13+0x54>
 992:	8c b1       	in	r24, 0x0c	; 12
 994:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <USART_rxBufferIn>
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	9e 0f       	add	r25, r30
 99c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USART_rxBufferIn>
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	ec 5a       	subi	r30, 0xAC	; 172
 9a4:	fe 4f       	sbci	r31, 0xFE	; 254
 9a6:	80 83       	st	Z, r24
 9a8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 9ac:	8f 71       	andi	r24, 0x1F	; 31
 9ae:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USART_rxBufferIn>
 9b2:	e1 cf       	rjmp	.-62     	; 0x976 <__vector_13+0x16>
 9b4:	57 98       	cbi	0x0a, 7	; 10
 9b6:	ff 91       	pop	r31
 9b8:	ef 91       	pop	r30
 9ba:	9f 91       	pop	r25
 9bc:	8f 91       	pop	r24
 9be:	3f 91       	pop	r19
 9c0:	2f 91       	pop	r18
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <__vector_7>:
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	2f 93       	push	r18
 9d8:	3f 93       	push	r19
 9da:	4f 93       	push	r20
 9dc:	5f 93       	push	r21
 9de:	6f 93       	push	r22
 9e0:	7f 93       	push	r23
 9e2:	8f 93       	push	r24
 9e4:	9f 93       	push	r25
 9e6:	af 93       	push	r26
 9e8:	bf 93       	push	r27
 9ea:	ef 93       	push	r30
 9ec:	ff 93       	push	r31
 9ee:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ElevatorTick.1962>
 9f2:	8f 5f       	subi	r24, 0xFF	; 255
 9f4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ElevatorTick.1962>
 9f8:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
 9fc:	9f 5f       	subi	r25, 0xFF	; 255
 9fe:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__data_end>
 a02:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <Elevator+0x2>
 a06:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__udivmodqi4>
 a0a:	91 11       	cpse	r25, r1
 a0c:	14 c0       	rjmp	.+40     	; 0xa36 <__vector_7+0x6a>
 a0e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 a12:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <Elevator+0x1>
 a16:	96 17       	cp	r25, r22
 a18:	61 f0       	breq	.+24     	; 0xa32 <__vector_7+0x66>
 a1a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Elevator+0x4>
 a1e:	89 0f       	add	r24, r25
 a20:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 a24:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Elevator+0x5>
 a28:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Elevator+0x6>
 a2c:	30 97       	sbiw	r30, 0x00	; 0
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_7+0x66>
 a30:	09 95       	icall
 a32:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <ElevatorTick.1962>
 a36:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 a3a:	6c e0       	ldi	r22, 0x0C	; 12
 a3c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__udivmodqi4>
 a40:	91 11       	cpse	r25, r1
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <__vector_7+0x80>
 a44:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
 a48:	0e 94 b8 02 	call	0x570	; 0x570 <MakeDoorStates>
 a4c:	ff 91       	pop	r31
 a4e:	ef 91       	pop	r30
 a50:	bf 91       	pop	r27
 a52:	af 91       	pop	r26
 a54:	9f 91       	pop	r25
 a56:	8f 91       	pop	r24
 a58:	7f 91       	pop	r23
 a5a:	6f 91       	pop	r22
 a5c:	5f 91       	pop	r21
 a5e:	4f 91       	pop	r20
 a60:	3f 91       	pop	r19
 a62:	2f 91       	pop	r18
 a64:	0f 90       	pop	r0
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	0f 90       	pop	r0
 a6a:	1f 90       	pop	r1
 a6c:	18 95       	reti

00000a6e <StartTimer>:
 a6e:	ff 92       	push	r15
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 a7c:	2f 2d       	mov	r18, r15
 a7e:	30 e0       	ldi	r19, 0x00	; 0
 a80:	c0 e0       	ldi	r28, 0x00	; 0
 a82:	d0 e0       	ldi	r29, 0x00	; 0
 a84:	a9 01       	movw	r20, r18
 a86:	0c 2e       	mov	r0, r28
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <StartTimer+0x20>
 a8a:	55 95       	asr	r21
 a8c:	47 95       	ror	r20
 a8e:	0a 94       	dec	r0
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <StartTimer+0x1c>
 a92:	40 fd       	sbrc	r20, 0
 a94:	18 c0       	rjmp	.+48     	; 0xac6 <StartTimer+0x58>
 a96:	8c 01       	movw	r16, r24
 a98:	0e 94 98 01 	call	0x330	; 0x330 <EnterAtomic>
 a9c:	21 e0       	ldi	r18, 0x01	; 1
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	0c 2e       	mov	r0, r28
 aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <StartTimer+0x38>
 aa4:	22 0f       	add	r18, r18
 aa6:	0a 94       	dec	r0
 aa8:	ea f7       	brpl	.-6      	; 0xaa4 <StartTimer+0x36>
 aaa:	2f 29       	or	r18, r15
 aac:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <UsedTimers>
 ab0:	fe 01       	movw	r30, r28
 ab2:	ee 0f       	add	r30, r30
 ab4:	ff 1f       	adc	r31, r31
 ab6:	ef 5b       	subi	r30, 0xBF	; 191
 ab8:	fe 4f       	sbci	r31, 0xFE	; 254
 aba:	11 83       	std	Z+1, r17	; 0x01
 abc:	00 83       	st	Z, r16
 abe:	0e 94 9f 01 	call	0x33e	; 0x33e <LeaveAtomic>
 ac2:	8c 2f       	mov	r24, r28
 ac4:	05 c0       	rjmp	.+10     	; 0xad0 <StartTimer+0x62>
 ac6:	21 96       	adiw	r28, 0x01	; 1
 ac8:	c8 30       	cpi	r28, 0x08	; 8
 aca:	d1 05       	cpc	r29, r1
 acc:	d9 f6       	brne	.-74     	; 0xa84 <StartTimer+0x16>
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	1f 91       	pop	r17
 ad6:	0f 91       	pop	r16
 ad8:	ff 90       	pop	r15
 ada:	08 95       	ret

00000adc <__vector_10>:
 adc:	1f 92       	push	r1
 ade:	0f 92       	push	r0
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	0f 92       	push	r0
 ae4:	11 24       	eor	r1, r1
 ae6:	cf 92       	push	r12
 ae8:	df 92       	push	r13
 aea:	ff 92       	push	r15
 aec:	0f 93       	push	r16
 aee:	1f 93       	push	r17
 af0:	2f 93       	push	r18
 af2:	3f 93       	push	r19
 af4:	4f 93       	push	r20
 af6:	5f 93       	push	r21
 af8:	6f 93       	push	r22
 afa:	7f 93       	push	r23
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
 b00:	af 93       	push	r26
 b02:	bf 93       	push	r27
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	ef 93       	push	r30
 b0a:	ff 93       	push	r31
 b0c:	01 e4       	ldi	r16, 0x41	; 65
 b0e:	11 e0       	ldi	r17, 0x01	; 1
 b10:	c0 e0       	ldi	r28, 0x00	; 0
 b12:	d0 e0       	ldi	r29, 0x00	; 0
 b14:	cc 24       	eor	r12, r12
 b16:	c3 94       	inc	r12
 b18:	d1 2c       	mov	r13, r1
 b1a:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 b1e:	8f 2d       	mov	r24, r15
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	0c 2e       	mov	r0, r28
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <__vector_10+0x4e>
 b26:	95 95       	asr	r25
 b28:	87 95       	ror	r24
 b2a:	0a 94       	dec	r0
 b2c:	e2 f7       	brpl	.-8      	; 0xb26 <__vector_10+0x4a>
 b2e:	80 ff       	sbrs	r24, 0
 b30:	18 c0       	rjmp	.+48     	; 0xb62 <__vector_10+0x86>
 b32:	f8 01       	movw	r30, r16
 b34:	80 81       	ld	r24, Z
 b36:	91 81       	ldd	r25, Z+1	; 0x01
 b38:	01 97       	sbiw	r24, 0x01	; 1
 b3a:	91 83       	std	Z+1, r25	; 0x01
 b3c:	80 83       	st	Z, r24
 b3e:	89 2b       	or	r24, r25
 b40:	81 f4       	brne	.+32     	; 0xb62 <__vector_10+0x86>
 b42:	20 e0       	ldi	r18, 0x00	; 0
 b44:	40 e0       	ldi	r20, 0x00	; 0
 b46:	68 ec       	ldi	r22, 0xC8	; 200
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SendEvent>
 b4e:	c6 01       	movw	r24, r12
 b50:	0c 2e       	mov	r0, r28
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <__vector_10+0x7a>
 b54:	88 0f       	add	r24, r24
 b56:	0a 94       	dec	r0
 b58:	ea f7       	brpl	.-6      	; 0xb54 <__vector_10+0x78>
 b5a:	80 95       	com	r24
 b5c:	f8 22       	and	r15, r24
 b5e:	f0 92 51 01 	sts	0x0151, r15	; 0x800151 <UsedTimers>
 b62:	21 96       	adiw	r28, 0x01	; 1
 b64:	0e 5f       	subi	r16, 0xFE	; 254
 b66:	1f 4f       	sbci	r17, 0xFF	; 255
 b68:	c8 30       	cpi	r28, 0x08	; 8
 b6a:	d1 05       	cpc	r29, r1
 b6c:	b1 f6       	brne	.-84     	; 0xb1a <__vector_10+0x3e>
 b6e:	ff 91       	pop	r31
 b70:	ef 91       	pop	r30
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	bf 91       	pop	r27
 b78:	af 91       	pop	r26
 b7a:	9f 91       	pop	r25
 b7c:	8f 91       	pop	r24
 b7e:	7f 91       	pop	r23
 b80:	6f 91       	pop	r22
 b82:	5f 91       	pop	r21
 b84:	4f 91       	pop	r20
 b86:	3f 91       	pop	r19
 b88:	2f 91       	pop	r18
 b8a:	1f 91       	pop	r17
 b8c:	0f 91       	pop	r16
 b8e:	ff 90       	pop	r15
 b90:	df 90       	pop	r13
 b92:	cf 90       	pop	r12
 b94:	0f 90       	pop	r0
 b96:	0f be       	out	0x3f, r0	; 63
 b98:	0f 90       	pop	r0
 b9a:	1f 90       	pop	r1
 b9c:	18 95       	reti

00000b9e <__udivmodqi4>:
 b9e:	99 1b       	sub	r25, r25
 ba0:	79 e0       	ldi	r23, 0x09	; 9
 ba2:	04 c0       	rjmp	.+8      	; 0xbac <__udivmodqi4_ep>

00000ba4 <__udivmodqi4_loop>:
 ba4:	99 1f       	adc	r25, r25
 ba6:	96 17       	cp	r25, r22
 ba8:	08 f0       	brcs	.+2      	; 0xbac <__udivmodqi4_ep>
 baa:	96 1b       	sub	r25, r22

00000bac <__udivmodqi4_ep>:
 bac:	88 1f       	adc	r24, r24
 bae:	7a 95       	dec	r23
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__udivmodqi4_loop>
 bb2:	80 95       	com	r24
 bb4:	08 95       	ret

00000bb6 <_exit>:
 bb6:	f8 94       	cli

00000bb8 <__stop_program>:
 bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <__stop_program>
